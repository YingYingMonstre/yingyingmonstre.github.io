<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Q-learning和DQN算法总结</title>
    <url>/2022/08/29/DQN/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Q-learning算法主要是维护一个Q表格，其中的值表示当前状态下采取动作能带来的价值。</p>
<img src="/2022/08/29/DQN/diff.png" class="" title="q-learning">

<p>DQN可以视为Q-learning的进阶版，是针对巨大的状态和动作空间、Q表格的维护和查找不现实所引入神经网络的方法。但是引入非线性函数、使用神经网络近似Q表，训练结果可能不收敛。</p>
<img src="/2022/08/29/DQN/diff2.png" class="" title="DQN">

<p>DQN有两版，2013版《Playing Atari with Deep Reinforcement Learning》伪代码：</p>
<img src="/2022/08/29/DQN/2013.png" class="" width="2013">

<p>2015版《Human-level control through deep reinforcement learning》伪代码：</p>
<img src="/2022/08/29/DQN/2015.png" class="" width="2015">

<h1 id="Q-learning算法"><a href="#Q-learning算法" class="headerlink" title="Q-learning算法"></a>Q-learning算法</h1><p>Q-learning是一种model-free的强化学习算法，用于学习特定状态下动作的价值。该算法的核心为使用贝尔曼方程进行简单的值迭代更新，对当前值和新信息进行加权平均。</p>
<blockquote>
<p>model-free算法只用学习策略即可。model-based算法让agent学习环境的模型，在训练之后，代理必须通过预测下一个状态和reward来采取行动。</p>
</blockquote>
<blockquote>
<p>Bellman方程：<br>状态s的最优值$V^*(s)$、Q-state的最优值$Q^*(s,a)$<br>$V^*(s)=\max\limits_{a}\sum\limits_{s’}T(s,a,s’)[R(s,a,s’)+rV^*(s’)]=\max\limits_{a}Q^*(s,a)$<br>$Q^*(s,a)=\sum\limits_{s’}T(s,a,s’)[R(s,a,s’)+rV^*(s’)]$</p>
</blockquote>
<p>值迭代更新：</p>
<p>$Q^{new}(s_t,a_t)\leftarrow Q(s_t,a_t)+\alpha\cdot(r_t+\gamma\cdot\max\limits_{a}Q(s_{t+1},a)-Q(s_t,a_t))$</p>
<p>其中:</p>
<ul>
<li>$Q(s_t,a_t)$为当前值</li>
<li>$\alpha$为学习率</li>
<li>$r_t$为状态从$s_t$到$s_{t+1}$获得的奖励</li>
<li>$\gamma$为折扣系数（接近于0时，智能体更在意短期回报；接近于1时，更在意长期回报）</li>
<li>$\max\limits_{a}Q(s_{t+1},a)$表示对未来最优值的估计</li>
</ul>
<h1 id="DQN的两大改进"><a href="#DQN的两大改进" class="headerlink" title="DQN的两大改进"></a>DQN的两大改进</h1><p>DQN的整体结构如图所示。</p>
<img src="/2022/08/29/DQN/structure.png" class="" title="structure">

<h2 id="Replay-Memory经验池"><a href="#Replay-Memory经验池" class="headerlink" title="Replay Memory经验池"></a>Replay Memory经验池</h2><p>DQN引入了经验池，利用Q-learning是off-policy的特性，使用经验回放记忆训练DQN。存储agent观察到的转换，允许稍后重用这些数据，重复利用过去经验。通过随机抽样，构建批次的转换是decorrelated。已经表明这极大的稳定和改进了DQN训练过程（DQN tutorial那里提到的）。需要两个类：</p>
<ul>
<li><code>Transition</code> - 一个命名元组，代表环境中的单个transition。本质上将(state, action)对映射到它们的(next_state, reward)结果。</li>
<li><code>ReplayMemory</code> - 一个有界大小的循环缓冲区，用于保存最近观察到的transitions。它还实现了一个<code>.sample()</code>的方法，用于随机选择批次的transition进行训练。</li>
</ul>
<h2 id="固定Q-target"><a href="#固定Q-target" class="headerlink" title="固定Q-target"></a>固定Q-target</h2><p>DQN中会有两个结构完全相同但是参数却不同的网络，一个(policy_net)用于预测Q估计、一个(target_net)用于预测Q现实。这是由于$Q(s,a)$ 在用表格表示与用网络表示有很大的不同：修改$Q(s,a)$要让它接近$r+\gamma\cdot\max\limits_{a’}Q(s_{t+1},a’)$，对于表格表示，修改不会影响别的位置的值；而对于网络表示，修改网络参数会造成全局的变化，会导致$\max\limits_{a’}Q(s_{t+1},a’)$的值也改变。即预测在接近target的过程中，target也在移动，因此训练比较困难。</p>
<p>对于训练更新规则，将使用一个事实——Every Q function for some policy obeys the Bellman方程：</p>
<p>$Q^π(s, a) = r + γQ^π(s’,π(s’))$</p>
<p>Temporal difference error为：$δ=Q(s,a)-Q^*(s,a)$。损失函数一般采用均方误差损失。</p>
<p>过程描述：初始化policy_net和target_net，根据损失函数更新policy_net的参数，而target_net的参数固定不变。在经过多次迭代后，将policy_net的参数全部复制给target_net，并一直如此迭代。<strong>这样一段时间内的target_net是固定不变的，从而使得算法更新更加稳定</strong>。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>详细代码略，这里推荐<a href="https://pytorch.org/tutorials/intermediate/reinforcement_q_learning.html">pytorch官方DQN代码</a>，比较具体。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://en.wikipedia.org/wiki/Q-learning">Q-learning</a></p>
<p><a href="https://blog.csdn.net/yf_programmer/article/details/120667700">DQN简介</a></p>
<p><a href="https://pytorch.org/tutorials/intermediate/reinforcement_q_learning.html">REINFORCEMENT LEARNING (DQN) TUTORIAL</a></p>
<p><a href="https://blog.csdn.net/qq_34003876/article/details/107349526">Pytorch实现简单DQN</a></p>
]]></content>
      <categories>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Gym环境创建</title>
    <url>/2022/08/09/Gym%E7%8E%AF%E5%A2%83%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<p>本文档概述了为创建新环境而设计的Gym中包含的创建新环境和相关有用的wrappers、utilities、tests。可以克隆gym-examples以使用此处的代码。<a href="https://github.com/Farama-Foundation/gym-examples">gym-examples</a>。</p>
<h1 id="Subclassing-gym-Env"><a href="#Subclassing-gym-Env" class="headerlink" title="Subclassing gym.Env"></a>Subclassing gym.Env</h1><p>在学习创建自己的环境前应该查看Gym的<a href="https://www.gymlibrary.ml/content/api/">API文档</a>。将关注一个看起来像这样的gym-examples的子集：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gym-examples/</span><br><span class="line">  README.md</span><br><span class="line">  setup.py</span><br><span class="line">  gym_examples/</span><br><span class="line">    __init__.py</span><br><span class="line">    envs/</span><br><span class="line">      __init__.py</span><br><span class="line">      grid_world.py</span><br><span class="line">    wrappers/</span><br><span class="line">      __init__.py</span><br><span class="line">      relative_position.py</span><br></pre></td></tr></table></figure>

<p>通过实现一个简单的游戏<code>GridWorldEnv</code>来说明gym.Env子类的过程。在<code>gym-examples/gym_examples/envs/grid_world.py</code>中编写代码。环境由一个二维方形网格组成（大小由参数size决定）。Agent在每个timestep可以垂直或水平地移动。Agent的目标是导航到episode开始时随机放置的目标。</p>
<ul>
<li>Observations提供了agent和目标的位置。</li>
<li>四个动作分别为上、下、左、右。</li>
<li>Agent到达目标位置则发出done信号。</li>
<li>奖励是二元且稀疏的，意味着除了到达目标时为1，其他情况都为0。</li>
</ul>
<p>分块看其源码。</p>
<h1 id="Declaration-and-Initialization"><a href="#Declaration-and-Initialization" class="headerlink" title="Declaration and Initialization"></a>Declaration and Initialization</h1><p><code>__init__</code>主要作用是初始化一些参数。如在<code>GridWorldEnv</code>中规定了方格的大小、设置了用于渲染的变量、观测空间和动作空间。在初始化函数中设置<code>self.seed()</code>的参数<code>seed=</code>为整数可以使随机数固定、初始化结果一致，如果为空的话就是随机选取种子。</p>
<h1 id="Constructing-Observations-From-Environment-States"><a href="#Constructing-Observations-From-Environment-States" class="headerlink" title="Constructing Observations From Environment States"></a>Constructing Observations From Environment States</h1><p>由于需要在<code>reset</code>和<code>step</code>中计算观测结果，因此使用（private）方法<code>_get_obs</code>将环境状态转换为观测结果通常很方便。但是这不是强制性的，也可以在<code>reset</code>和<code>step</code>中分别计算观测结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_obs</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;agent&quot;</span>: self._agent_location, <span class="string">&quot;target&quot;</span>: self._target_location&#125;</span><br></pre></td></tr></table></figure>

<p>对于<code>reset</code>和<code>step</code>返回的辅助信息，也可以实现类似的方法。例如提供agent和目标的曼哈顿距离：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_info</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;distance&quot;</span>: np.linalg.norm(self._agent_location - self._target_location, <span class="built_in">ord</span>=<span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h1><p>调用<code>reset</code>来启动新的episode。可以假设在调用reset之前不会调用step方法。只要发出done信号，就应该调用reset。用户可以将种子关键字传递给 reset 以将环境使用的任何随机数生成器初始化为确定性状态。推荐使用环境基类<code>gym.Env</code>提供的随机数生成器<code>self.np_random</code>。如果只使用这个RNG，就不需要太担心seeding，但要使用<code>super.reset(seed=seed)</code>来确保gym.Env正确的seeding RNG。</p>
<h1 id="Step"><a href="#Step" class="headerlink" title="Step"></a>Step</h1><p><code>step</code>方法通常包括环境的大部分逻辑。它接受一个动作，在应用该动作后计算环境状态并返回四元组(observation, reward, done, info)。</p>
<h1 id="Rendering"><a href="#Rendering" class="headerlink" title="Rendering"></a>Rendering</h1><p>渲染，绘图函数，在图形界面上做出反应。</p>
<h1 id="Close"><a href="#Close" class="headerlink" title="Close"></a>Close</h1><p>关闭环境使用的所有打开的资源。很多情况下不比去实现该方法。</p>
<h1 id="Registering-Envs"><a href="#Registering-Envs" class="headerlink" title="Registering Envs"></a>Registering Envs</h1><p>为了让Gym检测到自定义环境，必须按如下方式注册。环境在<code>/Users/zhangke/miniforge3/envs/zkFrame/lib/python3.8/site-packages/gym/envs/__init__.py</code>中获得gym中所有注册的环境信息，在其中加入代码对自定义环境进行注册。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例子</span></span><br><span class="line"><span class="comment"># user</span></span><br><span class="line"><span class="comment"># ---------</span></span><br><span class="line">register(</span><br><span class="line">    <span class="built_in">id</span>=<span class="string">&#x27;GridWorld-v1&#x27;</span>,</span><br><span class="line">    entry_point=<span class="string">&#x27;gym.envs.user:GridEnv1&#x27;</span>,</span><br><span class="line">    max_episode_steps=<span class="number">200</span>,</span><br><span class="line">    reward_threshold=<span class="number">100.0</span>,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<p>环境ID由三个部分组成，其中两个是可选的：一个可选的namespace（这里忽略掉了）、一个强制名称（GridWorld）、一个可选但推荐的版本（v1）。在环境创建期间应使用适当的ID。</p>
<p>关键参数<code>max_episode_steps=200</code>将确保通过<code>gym.make</code>实例化的GridWorld环境将被包装在TimeLimit包装器中。如果agent已达到目标或在当前episode中已执行200步，则将产生done信号。</p>
<p>除了id和entrypoint，还可以pass以下的关键字来注册：</p>
<table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Type</th>
<th align="center">Default</th>
<th align="center">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center">reward_threshold</td>
<td align="center">float</td>
<td align="center">None</td>
<td align="center">任务被认为已解决前的奖励阈值</td>
</tr>
<tr>
<td align="center">nondeterministic</td>
<td align="center">bool</td>
<td align="center">False</td>
<td align="center">即使在seeding之后这个环境是否也是非确定性的</td>
</tr>
<tr>
<td align="center">max_episode_steps</td>
<td align="center">int</td>
<td align="center">None</td>
<td align="center">一个episode可以包含的最大步骤数。如果不是None则添加TimeLimit包装器</td>
</tr>
<tr>
<td align="center">order_enforce</td>
<td align="center">bool</td>
<td align="center">True</td>
<td align="center">是否将环境包装在OrderEnforcing包装器中</td>
</tr>
<tr>
<td align="center">autoreset</td>
<td align="center">bool</td>
<td align="center">False</td>
<td align="center">是否将环境包装在AutoResetWrapper</td>
</tr>
<tr>
<td align="center">kwargs</td>
<td align="center">dict</td>
<td align="center">{}</td>
<td align="center">传给环境类的默认k wa r g</td>
</tr>
</tbody></table>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="编写环境"><a href="#编写环境" class="headerlink" title="编写环境"></a>编写环境</h2><p>路径为<code>/Users/zhangke/miniforge3/envs/zkFrame/lib/python3.8/site-packages/gym/envs</code>。在envs中创建了一个文件夹<code>gym_test</code>，里面包含<code>__init__.py</code>和<code>env_guess_number.py</code>。其中后者描述具体环境，主要包括在init初始化函数中初始化一些参数、step输入action并返回四元组、reset重置，具体代码为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">from</span> gym <span class="keyword">import</span> spaces</span><br><span class="line"><span class="keyword">from</span> gym.utils <span class="keyword">import</span> seeding</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">guess_number</span>(<span class="params">gym.Env</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hotter Colder</span></span><br><span class="line"><span class="string">        The goal of hotter colder is to guess closer to a randomly selected guess_number</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        After each step the agent receives an observation of:</span></span><br><span class="line"><span class="string">        0 - No guess yet submitted (only after reset)</span></span><br><span class="line"><span class="string">        1 - Guess is lower than the target</span></span><br><span class="line"><span class="string">        2 - Guess is equal to the target</span></span><br><span class="line"><span class="string">        3 - Guess is higher than the target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The rewards is calculated as:</span></span><br><span class="line"><span class="string">        (min(action, self.guess_number) + self.range) / (max(action, self.guess_number) + self.range)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Ideally an agent will be able to recognise the &#x27;scent&#x27; of a higher reward and</span></span><br><span class="line"><span class="string">        increase the rate in which is guesses in that direction until the reward reaches</span></span><br><span class="line"><span class="string">        its maximum</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.<span class="built_in">range</span> = <span class="number">1000</span>  <span class="comment"># +/- value the randomly select guess_number can be between</span></span><br><span class="line">        self.bounds = <span class="number">2000</span>  <span class="comment"># Action space bounds</span></span><br><span class="line"></span><br><span class="line">        self.action_space = spaces.Box(low=np.array([-self.bounds]), high=np.array([self.bounds]), dtype=np.<span class="built_in">int</span>)</span><br><span class="line">        self.observation_space = spaces.Discrete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        self.guess_number = <span class="number">0</span></span><br><span class="line">        self.guess_count = <span class="number">0</span></span><br><span class="line">        self.guess_max = <span class="number">200</span></span><br><span class="line">        self.observation = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.seed()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">seed</span>(<span class="params">self, seed=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.np_random, seed = seeding.np_random(seed)</span><br><span class="line">        <span class="keyword">return</span> [seed]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">step</span>(<span class="params">self, action</span>):</span></span><br><span class="line">        <span class="comment"># assert self.action_space.contains(action)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> action &lt; self.guess_number:</span><br><span class="line">            self.observation = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> action == self.guess_number:</span><br><span class="line">            self.observation = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> action &gt; self.guess_number:</span><br><span class="line">            self.observation = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 两个值越接近，奖励越接近1</span></span><br><span class="line">        reward = ((<span class="built_in">min</span>(action, self.guess_number) + self.bounds) / (<span class="built_in">max</span>(action, self.guess_number) + self.bounds)) ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        self.guess_count += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 200个episode</span></span><br><span class="line">        done = self.guess_count &gt;= self.guess_max</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.observation, reward, done, &#123;<span class="string">&quot;guess_number&quot;</span>: self.guess_number, <span class="string">&quot;guesses&quot;</span>: self.guess_count&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.guess_number = <span class="built_in">int</span>(self.np_random.uniform(-self.<span class="built_in">range</span>, self.<span class="built_in">range</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;guess number = &quot;</span>, self.guess_number)</span><br><span class="line">        self.guess_count = <span class="number">0</span></span><br><span class="line">        self.observation = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> self.observation</span><br></pre></td></tr></table></figure>

<p>完成基本环境设置后需要在<code>gym_test/__init__.py</code>中设置环境实例初始化的调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gym.envs.gym_test.env_guess_number <span class="keyword">import</span> guess_number</span><br></pre></td></tr></table></figure>

<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>在<code>envs/__init__.py</code>中加入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">···</span><br><span class="line"><span class="comment"># User test</span></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"></span><br><span class="line">register(</span><br><span class="line">    <span class="built_in">id</span>=<span class="string">&quot;GuessNumber-v0&quot;</span>,</span><br><span class="line">    entry_point=<span class="string">&quot;gym.envs.gym_test:guess_number&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Classic</span></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line">···</span><br></pre></td></tr></table></figure>

<h2 id="gym测试"><a href="#gym测试" class="headerlink" title="gym测试"></a>gym测试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line">env = gym.make(<span class="string">&quot;GuessNumber-v0&quot;</span>)</span><br><span class="line">obs = env.reset()</span><br><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    action = env.action_space.sample()</span><br><span class="line">    <span class="built_in">print</span>(action)</span><br><span class="line">    obs, reward, done, info = env.step(action)</span><br></pre></td></tr></table></figure>

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.gymlibrary.ml/content/environment_creation/">Gym Documentation</a></p>
<p><a href="https://blog.csdn.net/RenJie_L/article/details/123500345">构建自己的gym训练环境 巨详细</a></p>
<p><a href="https://blog.csdn.net/sinat_39620217/article/details/115519622">gym搭建自己的环境</a></p>
<p><a href="https://lossyou.com/post/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84gym%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83">搭建自己的gym强化学习环境</a></p>
]]></content>
      <categories>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook Air M1安装gym问题汇总</title>
    <url>/2021/11/03/MacBook%20Air%20M1%E5%AE%89%E8%A3%85gym%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>安装gym花了一天时间，中途出了很多问题，特此记录。</p>
<p><strong>0. 关于本机</strong></p>
<ul>
<li>macOS Monterey版本12.0.1</li>
<li>MacBook Air（M1，2020）</li>
<li>芯片 Apple M1</li>
</ul>
<p><strong>1. 环境相关</strong></p>
<p>创建pycharm环境参考文章：<a href="https://zhuanlan.zhihu.com/p/410961551">https://zhuanlan.zhihu.com/p/410961551</a></p>
<p><strong>2. 下载gym</strong></p>
<p>可以直接在终端上pip install gym，但是在pycharm中使用时会报错缺一些组件，比如No module named ‘pyglet’。本人使用的是下边的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;openai&#x2F;gym.git</span><br><span class="line"></span><br><span class="line">cd gym</span><br><span class="line"></span><br><span class="line">pip install -e &#39;.[all]&#39;</span><br></pre></td></tr></table></figure>



<p><strong>3. No matching distribution found for ale-py~=0.7.1 (from gym==0.21.0)</strong></p>
<p>问题状况：在问题2中pip install -e ‘.[all]’时报错。</p>
<p>解决方法：直接pip install ale-py，如果不能下载（具体报错的原因忘了），尝试conda update pip，我是在更新完pip后可以下载的。</p>
<p><strong>4. unable to execute ‘swig’: No such file or directory</strong></p>
<p>问题状况：解决了第3步的问题后，在pip install -e ‘.[all]’过程中出现。</p>
<p>解决方法：brew install swig</p>
<p><strong>5. zsh: command not found: brew</strong></p>
<p>问题状况：在第4步输入brew install swig后报错。</p>
<p>解决方法：mac安装homebrew，</p>
<p>用以下命令安装，序列号选择中科大（1）的</p>
<p>/bin/zsh -c “$(curl -fsSL <a href="https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;">https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</a></p>
<p>原文地址：<a href="https://links.jianshu.com/go?to=https://blog.csdn.net/wangyun71/article/details/108560873">https://blog.csdn.net/wangyun71/article/details/108560873</a></p>
<p><strong>6. from . import multiarray等</strong></p>
<p>问题状况：在解决了第4、5步的问题后继续运行pip install -e ‘.[all]’，成功安装。但是在测试用例代码时报的错误。提示检查python和numpy的版本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试用例</span></span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line">env = gym.make(<span class="string">&#x27;CartPole-v0&#x27;</span>)</span><br><span class="line">env.reset()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    env.render()</span><br><span class="line">    env.step(env.action_space.sample()) <span class="comment"># take a random action</span></span><br></pre></td></tr></table></figure>

<p>解决方法：重新安装了numpy之后就可以用了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip uninstall numpy</span><br><span class="line"></span><br><span class="line">pip install numpy</span><br></pre></td></tr></table></figure>



<p><strong>7. zsh:killed</strong></p>
<p>问题状况：偶然遇到的，在conda activate环境后不能用clear、pip等命令，不知道是什么原因。</p>
<p>解决方法：删除环境重新搭建环境就可以了</p>
]]></content>
      <categories>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>ModbusTCP协议学习</title>
    <url>/2021/09/17/ModbusTCP%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Modbus由MODICON公司于1979年开发，是一种<strong>工业现场总线</strong>协议标准。1996年<strong>施耐德</strong>公司推出基于<strong>以太网TCP/IP</strong>的Modbus协议：<strong>Modbus TCP</strong>。</p>
<p>Modbus协议是一项应用层报文传输协议，包括ASCII、RTU、<strong>TCP</strong>三种报文类型。</p>
<p>标准的Modbus协议物理层接口有RS232、RS422、RS485和<strong>以太网</strong>接口，采用<strong>master/slave</strong>方式通信。</p>
<h3 id="Modbus-TCP数据帧"><a href="#Modbus-TCP数据帧" class="headerlink" title="Modbus TCP数据帧"></a>Modbus TCP数据帧</h3><p>Modbus TCP的数据帧可分为两部分：<strong>MBAP</strong>+<strong>PDU</strong>。其协议特征如图所示。</p>
<img src="/2021/09/17/ModbusTCP%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/feature.png" class="">

<center>Modbus TCP协议特征</center>

<h4 id="报文头MBAP"><a href="#报文头MBAP" class="headerlink" title="报文头MBAP"></a>报文头MBAP</h4><p>MBAP为报文头，长度为7字节，组成如下：</p>
<table>
<thead>
<tr>
<th align="left">事务处理标识</th>
<th align="left">协议标识</th>
<th align="left">长度</th>
<th align="left">单元标识符</th>
</tr>
</thead>
<tbody><tr>
<td align="left">2字节</td>
<td align="left">2字节</td>
<td align="left">2字节</td>
<td align="left">1字节</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>内容</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><strong>事务处理标识</strong></td>
<td>可以理解为报文的序列号，一般每次通信之后就要加1以区别不同的通信数据报文。</td>
</tr>
<tr>
<td><strong>协议标识符</strong></td>
<td>00 00表示Modbus TCP协议。</td>
</tr>
<tr>
<td><strong>长度</strong></td>
<td>表示接下来的数据长度，单位为字节。</td>
</tr>
<tr>
<td><strong>单元标识符</strong></td>
<td>可以理解为设备地址。</td>
</tr>
</tbody></table>
<h4 id="帧结构PDU"><a href="#帧结构PDU" class="headerlink" title="帧结构PDU"></a>帧结构PDU</h4><p>PDU由<strong>功能码+数据</strong>组成。功能码为1字节，数据长度不定，由具体功能决定。</p>
<p><strong>功能码</strong></p>
<p>Modbus的操作对象有四种：线圈、离散输入、保持寄存器、输入寄存器。</p>
<table>
<thead>
<tr>
<th align="center">对象</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">线圈</td>
<td align="center">PLC的输出位，开关量，在Modbus中可读可写</td>
</tr>
<tr>
<td align="center">离散量</td>
<td align="center">PLC的输入位，开关量，在Modbus中只读</td>
</tr>
<tr>
<td align="center">输入寄存器</td>
<td align="center">PLC中只能从模拟量输入端改变的寄存器，在Modbus中只读</td>
</tr>
<tr>
<td align="center">保持寄存器</td>
<td align="center">PLC中用于输出模拟量信号的寄存器，在Modbus中可读可写</td>
</tr>
</tbody></table>
<p>根据对象的不同，Modbus的功能码有：</p>
<table>
<thead>
<tr>
<th align="center">功能码</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0x01</td>
<td align="center">读线圈</td>
</tr>
<tr>
<td align="center">0x05</td>
<td align="center">写单个线圈</td>
</tr>
<tr>
<td align="center">0x0F</td>
<td align="center">写多个线圈</td>
</tr>
<tr>
<td align="center">0x02</td>
<td align="center">读离散量输入</td>
</tr>
<tr>
<td align="center">0x04</td>
<td align="center">读输入寄存器</td>
</tr>
<tr>
<td align="center">0x03</td>
<td align="center">读保持寄存器</td>
</tr>
<tr>
<td align="center">0x06</td>
<td align="center">写单个保持寄存器</td>
</tr>
<tr>
<td align="center">0x10</td>
<td align="center">写多个保持寄存器</td>
</tr>
</tbody></table>
<p>说明更详细的表</p>
<table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">中文名称</th>
<th align="center">英文名</th>
<th align="center">位操作/字操作</th>
<th align="center">操作数量</th>
</tr>
</thead>
<tbody><tr>
<td align="center">01</td>
<td align="center">读线圈状态</td>
<td align="center">READ COIL STATUS</td>
<td align="center">位操作</td>
<td align="center">单个或多个</td>
</tr>
<tr>
<td align="center">02</td>
<td align="center">读离散输入状态</td>
<td align="center">READ INPUT STATUS</td>
<td align="center">位操作</td>
<td align="center">单个或多个</td>
</tr>
<tr>
<td align="center">03</td>
<td align="center">读保持寄存器</td>
<td align="center">READ HOLDING REGISTER</td>
<td align="center">字操作</td>
<td align="center">单个或多个</td>
</tr>
<tr>
<td align="center">04</td>
<td align="center">读输入寄存器</td>
<td align="center">READ INPUT REGISTER</td>
<td align="center">字操作</td>
<td align="center">单个或多个</td>
</tr>
<tr>
<td align="center">05</td>
<td align="center">写线圈状态</td>
<td align="center">WRITE SINGLE COIL</td>
<td align="center">位操作</td>
<td align="center">单个</td>
</tr>
<tr>
<td align="center">06</td>
<td align="center">写单个保持寄存器</td>
<td align="center">WRITE SINGLE REGISTER</td>
<td align="center">字操作</td>
<td align="center">单个</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">写多个线圈</td>
<td align="center">WRITE MULTIPLE COIL</td>
<td align="center">位操作</td>
<td align="center">多个</td>
</tr>
<tr>
<td align="center">16</td>
<td align="center">写多个保持寄存器</td>
<td align="center">WRITE MULTIPLE REGISTER</td>
<td align="center">字操作</td>
<td align="center">多个</td>
</tr>
</tbody></table>
<h3 id="PDU详细结构"><a href="#PDU详细结构" class="headerlink" title="PDU详细结构"></a>PDU详细结构</h3><p>测试软件：mod_RSsim5.3</p>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="center">对应</th>
</tr>
</thead>
<tbody><tr>
<td align="center">线圈</td>
<td align="center">Coil Outputs</td>
</tr>
<tr>
<td align="center">离散量</td>
<td align="center">Digital Inputs</td>
</tr>
<tr>
<td align="center">输入寄存器</td>
<td align="center">Analogue Inputs</td>
</tr>
<tr>
<td align="center">保持寄存器</td>
<td align="center">Holding Registers</td>
</tr>
</tbody></table>
<h4 id="0x01：读线圈"><a href="#0x01：读线圈" class="headerlink" title="0x01：读线圈"></a><strong>0x01：读线圈</strong></h4><p>在从站中读1~2000个连续线圈状态，ON=1,OFF=0</p>
<ul>
<li>请求：MBAP 功能码 起始地址H 起始地址L 数量H 数量L（共12字节）</li>
<li>响应：MBAP 功能码 数据长度 数据（一个地址的数据为1位）</li>
<li>如：在从站0x01中，读取开始地址为0x0002的线圈数据，读0x0008位<br>00 01 00 00 00 06 01 01 00 02 00 08</li>
<li>回：数据长度为0x01个字节，数据为0x01，第一个线圈为ON，其余为OFF<br>00 01 00 00 00 04 01 01 01 01</li>
</ul>
<h4 id="0x05：写单个线圈"><a href="#0x05：写单个线圈" class="headerlink" title="0x05：写单个线圈"></a><strong>0x05：写单个线圈</strong></h4><p>将从站中的一个输出写成ON或OFF，0xFF00请求输出为ON,0x000请求输出为OFF</p>
<ul>
<li>请求：MBAP 功能码 输出地址H 输出地址L 输出值H 输出值L（共12字节）</li>
<li>响应：MBAP 功能码 输出地址H 输出地址L 输出值H 输出值L（共12字节）</li>
<li>如：将地址为0x0003的线圈设为ON<br>00 01 00 00 00 06 01 05 00 03 FF 00</li>
<li>回：写入成功<br>00 01 00 00 00 06 01 05 00 03 FF 00</li>
</ul>
<h4 id="0x0F：写多个线圈"><a href="#0x0F：写多个线圈" class="headerlink" title="0x0F：写多个线圈"></a><strong>0x0F：写多个线圈</strong></h4><p>将一个从站中的一个线圈序列的每个线圈都强制为ON或OFF，数据域中置1的位请求相应输出位ON，置0的位请求响应输出为OFF</p>
<ul>
<li>请求：MBAP 功能码 起始地址H 起始地址L 输出数量H 输出数量L 字节长度 输出值H 输出值L</li>
<li>响应：MBAP 功能码 起始地址H 起始地址L 输出数量H 输出数量L</li>
</ul>
<h4 id="0x02：读离散量输入"><a href="#0x02：读离散量输入" class="headerlink" title="0x02：读离散量输入"></a><strong>0x02：读离散量输入</strong></h4><p>从一个从站中读1~2000个连续的离散量输入状态</p>
<ul>
<li>请求：MBAP 功能码 起始地址H 起始地址L 数量H 数量L（共12字节）</li>
<li>响应：MBAP 功能码 数据长度 数据（长度：9+ceil（数量/8））</li>
<li>如：从地址0x0000开始读0x0012个离散量输入<br>00 01 00 00 00 06 01 02 00 00 00 12</li>
<li>回：数据长度为0x03个字节，数据为0x01 04 00，表示第一个离散量输入和第11个离散量输入为ON，其余为OFF<br>00 01 00 00 00 06 01 02 03 01 04 00</li>
</ul>
<h4 id="0x04：读输入寄存器"><a href="#0x04：读输入寄存器" class="headerlink" title="0x04：读输入寄存器"></a><strong>0x04：读输入寄存器</strong></h4><p>从一个远程设备中读1~2000个连续输入寄存器</p>
<ul>
<li>请求：MBAP 功能码 起始地址H 起始地址L 寄存器数量H 寄存器数量L（共12字节）</li>
<li>响应：MBAP 功能码 数据长度 寄存器数据(长度：9+寄存器数量×2)</li>
<li>如：读起始地址为0x0002，数量为0x0005的寄存器数据<br>00 01 00 00 00 06 01 04 00 02 00 05</li>
<li>回：数据长度为0x0A，第一个寄存器的数据为0x0c，其余为0x00<br>00 01 00 00 00 0D 01 04 0A 00 0C 00 00 00 00 00 00 00 00</li>
</ul>
<h4 id="0x03：读保持寄存器"><a href="#0x03：读保持寄存器" class="headerlink" title="0x03：读保持寄存器"></a><strong>0x03：读保持寄存器</strong></h4><p>从远程设备中读保持寄存器连续块的内容</p>
<ul>
<li>请求：MBAP 功能码 起始地址H 起始地址L 寄存器数量H 寄存器数量L（共12字节）</li>
<li>响应：MBAP 功能码 数据长度 寄存器数据(长度：9+寄存器数量×2)</li>
<li>如：起始地址是0x0000，寄存器数量是 0x0003<br>00 01 00 00 00 06 01 03 00 00 00 03</li>
<li>回：数据长度为0x06，第一个寄存器的数据为0x21，其余为0x00<br>00 01 00 00 00 09 01 03 06 00 21 00 00 00 00</li>
</ul>
<h4 id="0x06：写单个保持寄存器"><a href="#0x06：写单个保持寄存器" class="headerlink" title="0x06：写单个保持寄存器"></a><strong>0x06：写单个保持寄存器</strong></h4><p>在一个远程设备中写一个保持寄存器</p>
<ul>
<li>请求：MBAP 功能码 寄存器地址H 寄存器地址L 寄存器值H 寄存器值L（共12字节）</li>
<li>响应：MBAP 功能码 寄存器地址H 寄存器地址L 寄存器值H 寄存器值L（共12字节）</li>
<li>如：向地址是0x0000的寄存器写入数据0x000A<br>00 01 00 00 00 06 01 06 00 00 00 0A</li>
<li>回：写入成功<br>00 01 00 00 00 06 01 06 00 00 00 0A</li>
</ul>
<h4 id="0x10：写多个保持寄存器"><a href="#0x10：写多个保持寄存器" class="headerlink" title="0x10：写多个保持寄存器"></a><strong>0x10：写多个保持寄存器</strong></h4><p>在一个远程设备中写连续寄存器块（1~123个寄存器）</p>
<ul>
<li>请求：MBAP 功能码 起始地址H 起始地址L 寄存器数量H 寄存器数量L 字节长度 寄存器值（13+寄存器数量×2）</li>
<li>响应：MBAP 功能码 起始地址H 起始地址L 寄存器数量H 寄存器数量L（共12字节）</li>
<li>如：向起始地址为0x0000，数量为0x0001的寄存器写入数据，数据长度为0x02，数据为0x000F<br>00 01 00 00 00 09 01 10 00 00 00 01 02 00 0F</li>
<li>回：写入成功<br>00 01 00 00 00 06 01 10 00 00 00 01</li>
</ul>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    HOST = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    TCP_IP = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    TCP_PORT = <span class="number">502</span></span><br><span class="line">    MaxBytes = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建socket连接</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s.connect((TCP_IP, TCP_PORT))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>, e)</span><br><span class="line">        s.close()</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接成功</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;have connected with server&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 十进制、十六进制都可以</span></span><br><span class="line">    <span class="comment"># 示例为写一个保持寄存器</span></span><br><span class="line">    arr = [<span class="number">00</span>, <span class="number">1</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">00</span>, <span class="number">0x0A</span>]</span><br><span class="line">    data = struct.pack(<span class="string">&quot;%dB&quot;</span> % (<span class="built_in">len</span>(arr)), *arr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s.settimeout(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># s.sendall(data) 发送数据包</span></span><br><span class="line">        sendBytes = s.send(data)</span><br><span class="line">        <span class="keyword">if</span> sendBytes &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 接受响应信息</span></span><br><span class="line">        recvData = s.recv(MaxBytes)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> recvData:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;接收数据为空，我要退出了&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        localTime = time.asctime(time.localtime(time.time()))</span><br><span class="line">        <span class="built_in">print</span>(localTime, <span class="string">&#x27; 接收到数据字节数:&#x27;</span>, <span class="built_in">len</span>(recvData))</span><br><span class="line">        <span class="built_in">print</span>(struct.unpack(<span class="string">&quot;%dB&quot;</span> % (<span class="built_in">len</span>(recvData)), recvData))</span><br><span class="line"></span><br><span class="line">        localTime = time.asctime(time.localtime(time.time()))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    s.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我已经退出了，后会无期&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="Modbus-TCP-示例报文"><a href="#Modbus-TCP-示例报文" class="headerlink" title="Modbus TCP 示例报文"></a>Modbus TCP 示例报文</h3><p>ModBusTcp与串行链路Modbus的数据域是一致的，具体数据域可以参考串行Modbus。这里给出几个ModbusTcp的链路解析说明，辅助新人分析报文。</p>
<img src="/2021/09/17/ModbusTCP%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/test1.png" class="">

<img src="/2021/09/17/ModbusTCP%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/test2.png" class="">

<img src="/2021/09/17/ModbusTCP%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/test3.png" class="">

<img src="/2021/09/17/ModbusTCP%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/test4.png" class="">

<blockquote>
<p>功能码 0x10：写多个保持寄存器。上面图片3和图片4都写错了。</p>
</blockquote>
<h3 id="ModbusTCP通信"><a href="#ModbusTCP通信" class="headerlink" title="ModbusTCP通信"></a>ModbusTCP通信</h3><h4 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a><strong>通信方式</strong></h4><p>Modbus设备可分为主站(poll)和从站(slave)。主站只有一个，从站有多个，主站向各从站发送请求帧，从站给予响应。在使用TCP通信时，主站为client端，主动建立连接；从站为server端，等待连接。</p>
<ul>
<li>主站请求：功能码+数据</li>
<li>从站正常响应：请求功能码+响应数据</li>
<li>从站异常响应：异常功能码+异常码，其中异常功能码即将请求功能码的最高有效位置1，异常码指示差错类型</li>
<li><strong>注意：需要超时管理机制，避免无期限的等待可能不出现的应答</strong></li>
</ul>
<p>IANA（Internet Assigned Numbers Authority，互联网编号分配管理机构）给Modbus协议赋予TCP端口号为<strong>502</strong>，这是目前在仪表与自动化行业中唯一分配到的端口号。</p>
<h4 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a><strong>通信过程</strong></h4><ol>
<li>connect 建立TCP连接</li>
<li>准备Modbus报文</li>
<li>使用send命令发送报文</li>
<li>在同一连接下等待应答</li>
<li>使用recv命令读取报文，完成一次数据交换</li>
<li>通信任务结束时，关闭TCP连接</li>
</ol>
<h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><p>在工业自动化控制中，经常会遇到开关量，数字量，模拟量，离散量，脉冲量等各种概念，而人们在实际应用中，对于这些概念又很容易混淆。现将各种概念罗列如下：</p>
<p><strong>1.开关量：</strong></p>
<p>一般指的是触点的“开”与“关”的状态，一般在计算机设备中也会用“0”或“1”来表示开关量的状态。开关量分为有源开关量信号和无源开关量信号，有源开关量信号指的是“开”与“关”的状态是带电源的信号，专业叫法为跃阶信号，可以理解为脉冲量，一般的都有220VAC, 110VAC,24VDC,12VDC等信号，无源开关量信号指的是“开”和“关”的状态时不带电源的信号，一般又称之为干接点。电阻测试法为电阻0或无穷大。</p>
<p><strong>2.数字量：</strong></p>
<p>很多人会将数字量与开关量混淆，也将其与模拟量混淆。数字量在时间和数量上都是离散的物理量，其表示的信号则为数字信号。数字量是由0和1组成的信号，经过编码形成有规律的信号，量化后的模拟量就是数字量。</p>
<p><strong>3.模拟量：</strong></p>
<p>模拟量的概念与数字量相对应，但是经过量化之后又可以转化为数字量。模拟量是在时间和数量上都是连续的物理量，其表示的信号则为模拟信号。模拟量在连续的变化过程中任何一个取值都是一个具体有意义的物理量，如温度，电压，电流等。</p>
<p><strong>4.离散量：</strong></p>
<p>离散量是将模拟量离散化之后得到的物理量。即任何仪器设备对于模拟量都不可能有个完全精确的表示，因为他们都有一个采样周期，在该采样周期内，其物理量的数值都是不变的，而实际上的模拟量则是变化的。这样就将模拟量离散化，成为了离散量。</p>
<p><strong>5.脉冲量：</strong></p>
<p>脉冲量就是瞬间电压或电流由某一值跃变到另一值的信号量。在量化后，其变化持续有规律就是数字量，如果其由0变成某一固定值并保持不变，其就是开关量。</p>
<blockquote>
<p>综上所述，模拟量就是在某个过程中时间和数量连续变化的物理量，由于在实际的应用中，所有的仪器设备对于外界数据的采集都有一个采样周期，其采集的数据只有在下一个采样周期开始时才有变动，采样周期内其数值并不随模拟量的变化而变动。</p>
<p>这样就将模拟量离散化了，例如：某设备的采样周期为1秒，其在第五秒的时间采集的温度为35度，而第六秒的温度为36度，该设备就只能标称第五秒时间温度35度，第六秒时间温度36度，而第五点五秒的时间其标称也只是35度，但是其实际的模拟量是35.5度。这样就将模拟信号离散化。其采集的数据就是离散化了，不再是连续的模拟量信号。</p>
<p>由于计算机只识别0和1两个信号，即开关量信号，用其来表示数值都是使用数字串来表示，由于计算能力的问题，其数字串不能无限长，即其表达的精度也是有限的，同样的以温度为例，由于数字串限制，其表达温度的精度只能达到0.1度，小于该单位的数值则不能被标称，这样就必须将离散量进行量化，将其变为数字量。即35.68度的温度则表示为35.6度。</p>
</blockquote>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p><a href="https://www.cnblogs.com/ioufev/articles/10830028.html">ModbusTCP协议 - ioufev - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>协议</category>
      </categories>
      <tags>
        <tag>工控协议</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenAI的Gym</title>
    <url>/2022/08/09/gym/</url>
    <content><![CDATA[<h1 id="什么是Gym"><a href="#什么是Gym" class="headerlink" title="什么是Gym"></a>什么是Gym</h1><p>Gym是一个用于强化学习(Reinforcement Learning, RL)的标准API，以及各种参考环境的集合。</p>
<h1 id="Gym的优点"><a href="#Gym的优点" class="headerlink" title="Gym的优点"></a>Gym的优点</h1><p>Gym的接口简单、python化、能够表示一般的RL问题。</p>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line">env = gym.make(<span class="string">&quot;LunarLander-v2&quot;</span>)</span><br><span class="line">observation, info = env.reset(seed=<span class="number">42</span>, return_info=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">   env.render()</span><br><span class="line">   action = policy(observation)  <span class="comment"># User-defined policy function</span></span><br><span class="line">   observation, reward, done, info = env.step(action)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> done:</span><br><span class="line">      observation, info = env.reset(return_info=<span class="literal">True</span>)</span><br><span class="line">env.close()</span><br></pre></td></tr></table></figure>

<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="Initializing-Environment"><a href="#Initializing-Environment" class="headerlink" title="Initializing Environment"></a>Initializing Environment</h2><p>在Gym中初始化环境(Initializing Environment)很简单，可以通过：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line">env = gym.make(<span class="string">&#x27;CartPole-v0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Interacting-with-the-Environment"><a href="#Interacting-with-the-Environment" class="headerlink" title="Interacting with the Environment"></a>Interacting with the Environment</h2><p>Gym实现了经典的“Agent-Environment循环”：</p>
<img src="/2022/08/09/gym/1.AE_loop.png" class="" title="AE_loop.png">

<p>Agent与环境的行动-观察的exchange称为一个timestep。RL的目标是以某种特定的方式manipulate环境。</p>
<p>给了一个示例，运行<code>LunarLander-v2</code>环境的一个实例1000个timestep，每一个step都渲染环境：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line">env = gym.make(<span class="string">&#x27;LunarLander-v2&#x27;</span>)</span><br><span class="line">env.action_space.seed(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">observation, info = env.reset(seed=<span class="number">42</span>, return_info=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">250</span>):</span><br><span class="line">    observation, reward, done, info = env.step(env.action_space.sample())</span><br><span class="line">    env.render()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> done:</span><br><span class="line">        observation, info = env.reset(return_info=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">env.close()</span><br></pre></td></tr></table></figure>

<p>每个环境会提供<code>env.action_space</code>属性明确valid actions的格式。类似的，valid observations的格式由<code>env.observation_space</code>明确。上述例子中，使用<code>env.action_space.sample()</code>对随机动作进行采样。这里环境和动作空间的seed是独立的，以确保可重复的样本。</p>
<h2 id="Standard-methods"><a href="#Standard-methods" class="headerlink" title="Standard methods"></a>Standard methods</h2><h3 id="Stepping"><a href="#Stepping" class="headerlink" title="Stepping"></a>Stepping</h3><p><code>gym.Env.step(self, action: ActType) → Union[Tuple[ObsType, float, bool, bool, dict], Tuple[ObsType, float, bool, dict]]</code></p>
<p>运行一个动态环境的timestep。当episode结束时，使用<code>reset()</code>来重置环境的状态。接收一个动作，返回一个元祖(observation, reward, terminated, truncated, info)或(observation, reward, done, info)。后者已被弃用，未来会被删掉。</p>
<p>参数：</p>
<p><strong>action</strong>（ActType）- 由Agent提供的一个动作</p>
<p>返回：</p>
<ul>
<li><strong>observation</strong>（object）- <code> observation_space</code>的一个元素。例如可能是一个包含某些对象的位置或速度的numpy数组。</li>
<li><strong>reward</strong>（float）- 采取行动后返回的奖励。</li>
<li><strong>terminated</strong>（bool）- 是否达到终止状态（根据任务的MDP定义）。在到达这种状态后进一步的step()调用可能会返回为定义的结果。</li>
<li><strong>truncated</strong>（bool）- 是否满足MDP范围之外的截断条件。通常是一个时间限制，但也可以用于指示agent在物理上超出范围。可用于在达到终止状态之前提前结束episode。</li>
<li><strong>info</strong>（dictionary）- 包含辅助诊断信息（有助于调试、学习和记录）。例如可能包含：描述agent性能状态的指标、对观察隐藏的变量、组合起来产生总奖励的单个奖励项。</li>
<li><strong>done</strong>（bool）- 如果episode结束则返回的布尔值，在这种情况下进一步调用<code>step()</code>将返回未定义的结果。可能会因为不同的原因发出done信号：环境下的任务已解决、超出某个时间限制、物理模拟已经入无效状态。</li>
</ul>
<h3 id="Resetting"><a href="#Resetting" class="headerlink" title="Resetting"></a>Resetting</h3><p><code>gym.Env.reset(self, *, seed: Optional[int] = None, return_info: bool = False, options: Optional[dict] = None) → Union[ObsType, Tuple[ObsType, dict]]</code></p>
<p>将环境重置为初始状态并返回初始observation。如果种子是整数或环境未初始化随机数生成器（Random Number Generator，RNG），此方法可以重置环境的RNG。如果环境已有一个RNG并用seed=None调用了<code>reset()</code>，则不应重置RNG。此外，<code>reset()</code>应该（在典型用例中）在初始化后立即使用整数种子调用，然后再不重复。</p>
<p>参数：</p>
<p><strong>seed</strong>（optional int）- 初始化环境的PRNG。如果环境还没有PRNG并且传递的<code>seed=None</code>（默认选项），将从一些source of entropy中随机选择一个种子（例如时间戳或/dev/urandom）。但是如果环境已经有PRNG并传递<code>seed=None</code>则不会重置PRNG。如果pass整数，即使PRNG存在也会重置。通常在环境初始化后立即pass个整数，然后再不传递。</p>
<p><strong>return_info</strong>（bool）- 如果为真，则返回附加信息以及初始观察。此info应类似于step()中返回的信息。</p>
<p><strong>options</strong>（optional dict）- 指定如何重置环境的附加信息（可选，取决于特定环境）。</p>
<p>返回：</p>
<ul>
<li><strong>observation</strong>（object）- 初始状态的观察。这将是<code>observation_space</code>的一个元素（通常是一个numpy数组），类似于step()返回的观察值。</li>
<li><strong>info</strong>（optional dictionary）- 仅当<code>return_info=True</code>被传递时才会返回。它包含补充观察的辅助信息。该字典应类似于step()返回的信息。</li>
</ul>
<h3 id="Rendering"><a href="#Rendering" class="headerlink" title="Rendering"></a>Rendering</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gym.Env.render(self: <span class="built_in">object</span>, *args: <span class="type">Tuple</span>[<span class="type">Any</span>], **kwargs: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]) → <span class="type">Optional</span>[<span class="type">Union</span>[RenderFrame, <span class="type">List</span>[RenderFrame]]]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="Additional-Environment-API"><a href="#Additional-Environment-API" class="headerlink" title="Additional Environment API"></a>Additional Environment API</h2><h3 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Env.action_space: Space[ActType]</span><br></pre></td></tr></table></figure>

<p>该属性给出了有效动作的格式。它是Gym提供的数据类型Space。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Env.observation_space: Space[ObsType]</span><br></pre></td></tr></table></figure>

<p>该属性给出了有效observation的格式。可以使用属性检查box bounds。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Env.reward_range = (-inf, inf)</span><br></pre></td></tr></table></figure>

<p>该属性对应最小、最大奖励的元组，默认从负无穷到正无穷，可以自行设定范围。</p>
<h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gym.Env.close(self)</span><br></pre></td></tr></table></figure>

<p>在子类中override close函数以执行必要的清理。</p>
<p>当垃圾收集或程序退出时，环境会自动执行close()函数。</p>
<h2 id="Checking-API-Conformity"><a href="#Checking-API-Conformity" class="headerlink" title="Checking API-Conformity"></a>Checking API-Conformity</h2><p>如果已经实现了自定义环境并希望进行健全性检查以确保符合API，可以运行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gym.utils.env_checker <span class="keyword">import</span> check_env</span><br><span class="line">check_env(env)</span><br></pre></td></tr></table></figure>
<p>如果环境不遵循Gym API，此函数将引发异常。如果犯了错误或未遵循最佳practice将引发异常（例如observation_space看起来像图片但dtype不正确），则会产生warnings。可以通过传递<code>warn=False</code>来关闭警告。默认情况下check_env不会检查渲染方法，可以通过<code>skip_render_check=False</code>来更改。</p>
<blockquote>
<p>在环境中运行check_env后不应重复使用已检查的实例，因为它可能已经关闭。</p>
</blockquote>
<h2 id="Spaces"><a href="#Spaces" class="headerlink" title="Spaces"></a>Spaces</h2><p> Spaces通常用于指定有效动作和observation的格式。每个环境都应该有属性<code>action_space</code>和<code>observation_space</code>，它们都应该是继承自Space类的实例。Gym中有多种可用的空间类型：</p>
<ul>
<li><code>Box</code>:描述一个n维的连续空间。这是一个有界空间，可以在其中定义上下界，这些上下限描述observation可以采用的有效值。</li>
<li><code>Discrete</code>:描述一个离散空间，其中{0, 1, ···, n-1}是observation或action可以采取的有效值。可以使用可选参数将值转换为{a, a+1, ···, a+n-1}。</li>
<li><code>Dict</code>:表示simple spaces的一个字典。</li>
<li><code>Tuple</code>:表示simple spaces的一个元组。</li>
<li><code>MultiBinary</code>:创建一个n-shape的二元空间。参数n可以是一个数字或数字列表。</li>
<li><code>MultiDiscrete</code>:由一系列离散动作空间组成，每个元素中具有不同数量的动作。</li>
</ul>
<h2 id="Wrappers（略）"><a href="#Wrappers（略）" class="headerlink" title="Wrappers（略）"></a>Wrappers（略）</h2><p>包装器是一种无需直接更改底层代码即可修改现有环境的便捷方式。使用包装器可以避免大量样板代码，并使环境更加模块化。包装器也可以链接起来以组合它们的效果。大多数通过<code>gym.make</code>生成的环境已经被默认包装了。</p>
<p>为了包装一个环境，必须首先初始化一个基础环境。然后可以将此环境与（可能是可选的）参数一起传递给包装器的构造函数。</p>
<h2 id="Playing-within-an-environment（略）"><a href="#Playing-within-an-environment（略）" class="headerlink" title="Playing within an environment（略）"></a>Playing within an environment（略）</h2><p>还可以使用<code>gym.utils.play</code>中的播放功能使用键盘播放环境。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.gymlibrary.ml/">Gym Documentation</a></p>
]]></content>
      <categories>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>小提琴图与分位点</title>
    <url>/2022/08/25/percentile%E7%99%BE%E5%88%86%E4%BD%8D/</url>
    <content><![CDATA[<p>处理数据时使用到了小提琴图，看了四分位点的计算公式，但是和numpy的percentile对应不上，搞了一会知道它是怎么计算的了，特此记录。</p>
<h1 id="小提琴图"><a href="#小提琴图" class="headerlink" title="小提琴图"></a>小提琴图</h1><p>一般来说，小提琴图是一种绘制连续型数据的方法，可以认为是箱形图与核密度图的结合体。在小提琴图中，我们可以获取与箱形图中相同的信息。</p>
<img src="/2022/08/25/percentile%E7%99%BE%E5%88%86%E4%BD%8D/violin.png" class="" title="violin">

<ul>
<li>中位数（小提琴图上的一个白点）</li>
<li>四分位数距(Inter Quartile Range, IQR)：小提琴图中心的黑色粗条</li>
<li>Upper adjacent value：Third Quartile + 1.5 * IQR</li>
<li>Lower adjacent value：First Quartile - 1.5 * IQR</li>
<li>Upper/lower adjacent value（黑色细线）用来检测离群值，即位于这俩“栅栏“之外的值可被视为离群值。</li>
</ul>
<blockquote>
<p>离群值是一个统计学里的专业术语。<strong>在对同一样本进行多次重复测定时，经常会发现在一组测定数据中有某一个或数个测定值看似比其他测定值明显地偏小或偏大。称这种显著偏离的数据为离群值</strong>。有疑问的观察值可能是测试中随机波动的极度表现，但还处于统计控制 的范围之内，是属于同一总体的误差，不算离群值。</p>
</blockquote>
<h1 id="四分位数"><a href="#四分位数" class="headerlink" title="四分位数"></a>四分位数</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>四分位数（Quartile）应用于统计学中的箱线图绘制，是统计学中分位数的一种，即把所有数值由小到大排列并分为四等份，处于三个分割点位置的数值就是四分位数。</p>
<h2 id="如何理解四分位"><a href="#如何理解四分位" class="headerlink" title="如何理解四分位"></a>如何理解四分位</h2><p>中位数把数集分成两个50%，下四分位就是把前50%分成两个25%，上四分位就是把后50%，分成两个25%。</p>
<h2 id="如何计算"><a href="#如何计算" class="headerlink" title="如何计算"></a>如何计算</h2><p>假设数列一共有n个数。</p>
<p>（1）当(n+1)/4可以整除时，Q1在(n+1)/4位、Q2在(n+1)/2位、Q3在(n+1)·3/4位。</p>
<p>举例 数列[1 2 2 5 6 9 9]：</p>
<p>Q1在第(7+1)/4=2位，即Q1=2</p>
<p>Q2在第(7+1)/2=4位，即Q2=5</p>
<p>Q3在第(7+1)·3/4=6位，即Q3=9</p>
<p>（2）当(n+1)/4不能整除时</p>
<p>举例 数列[1 2 3 4 5 6 7 8]：</p>
<p>Q1在(8+1)/4=2.25位，介于第二和第三位之间，但是更靠近第二位。所以第二位数权重占75%(小数位)，第三位数权重占25%。Q1=(2*0.75+3*0.25)/(0.75+0.25)=2.25</p>
<p>Q2在(8+1)/2=4.5位，即第4和第5位的平均数，Q2=4.5</p>
<p>同理Q3在(8+1)/4*3=6.75位，在第六位和第七位之间，更靠近第7位。所以第7位权重75%，第6位权重25%。Q3=(7*0.75+6*0.25)/(0.75+0.25)=6.75</p>
<h2 id="numpy的percentile"><a href="#numpy的percentile" class="headerlink" title="numpy的percentile"></a>numpy的percentile</h2><p>上边计算中所用的方法是n+1的方法。而numpy的percentile使用的是n-1的方法，即：</p>
<p>Q1的位置=1+(n-1)x0.25</p>
<p>Q2的位置=1+(n-1)x0.5</p>
<p>Q3的位置=1+(n-1)x0.75</p>
<p>靠近分位位置的那一个值占较大比重，为位置小数点后的那部分（或者壹减去小数点后的部分，与上边计算方式相似）。例如数列[1 2 3]：Q1=1.5、Q2=2、Q3=2.5；数列[1 2 3 4 5 6 7 8 9]的60%分位点位置=1+(9-1)x0.6=5.8，Q=6x0.8+5x0.2=5.8。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://zhuanlan.zhihu.com/p/376055263">如何通俗的理解小提琴图</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/235345817">如何计算四分位数值&amp;应用</a></p>
<p><a href="https://baike.baidu.com/item/%E5%9B%9B%E5%88%86%E4%BD%8D%E6%95%B0/5040599">四分位数</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1734923">python numpy库np.percentile用法说明</a></p>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>小提琴图</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出理解什么是LLVM</title>
    <url>/2021/12/24/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%90%86%E8%A7%A3%E4%BB%80%E4%B9%88%E6%98%AFLLVM/</url>
    <content><![CDATA[<h3 id="什么是LLVM"><a href="#什么是LLVM" class="headerlink" title="什么是LLVM"></a>什么是<a href="https://llvm.org/">LLVM</a></h3><blockquote>
<p>LLVM项目是模块化、可重用的编译器以及工具链技术的集合。</p>
</blockquote>
<p>美国计算机协会 (ACM) 将其2012年软件系统奖项颁给了LLVM，之前曾经获得此奖项的软件和技术包括:Java、Apache、Mosaic、the World Wide Web、Smalltalk、UNIX、Eclipse等等。<br>创始人:Chris Lattner，亦是Swift之父。</p>
<blockquote>
<p>趣闻：Chris Latter本来只是想写一个底层的虚拟机，这也是LLVM名字的由来，low level virtual machine，跟Java的JVM虚拟机一样，可是后来，llvm从来没有被用作过虚拟机，哪怕LLVM的名气已经传开了。所以人们决定仍然叫他LLVM，更多的时候只是当作“商标”一样的感觉在使用，其实它跟虚拟机没有半毛钱关系。官方描述如下<br>The name “LLVM” itself is not an acronym; it is the full name of the project. “LLVM”这个名称本身不是首字母缩略词; 它是项目的全名。</p>
</blockquote>
<h3 id="传统的编译器架构"><a href="#传统的编译器架构" class="headerlink" title="传统的编译器架构"></a>传统的编译器架构</h3><img src="/2021/12/24/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%90%86%E8%A7%A3%E4%BB%80%E4%B9%88%E6%98%AFLLVM/traditional.jpg" class="">

<center>传统编译器架构</center>


<ul>
<li><strong>Frontend:前端</strong><br>词法分析、语法分析、语义分析、生成中间代码</li>
<li><strong>Optimizer:优化器</strong><br>中间代码优化</li>
<li><strong>Backend:后端</strong><br>生成机器码</li>
</ul>
<h3 id="LLVM架构"><a href="#LLVM架构" class="headerlink" title="LLVM架构"></a>LLVM架构</h3><img src="/2021/12/24/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%90%86%E8%A7%A3%E4%BB%80%E4%B9%88%E6%98%AFLLVM/llvm.png" class="">

<center>LLVM架构</center>

<ul>
<li><p>不同的前端后端使用统一的中间代码LLVM Intermediate Representation (LLVM IR)</p>
</li>
<li><p>如果需要支持一种新的编程语言，那么只需要实现一个新的前端</p>
</li>
<li><p>如果需要支持一种新的硬件设备，那么只需要实现一个新的后端</p>
</li>
<li><p>优化阶段是一个通用的阶段，它针对的是统一的LLVM IR，不论是支持新的编程语言，还是支持新的硬件设备，都不需要对优化阶段做修改</p>
</li>
<li><p>相比之下，GCC的前端和后端没分得太开，前端后端耦合在了一起。所以GCC为了支持一门新的语言，或者为了支持一个新的目标平台，就变得特别困难</p>
</li>
<li><p>LLVM现在被作为实现各种静态和运行时编译语言的通用基础结构(GCC家族、Java、.NET、Python、Ruby、Scheme、Haskell、D等)</p>
</li>
</ul>
<h3 id="什么是Clang"><a href="#什么是Clang" class="headerlink" title="什么是Clang"></a>什么是<a href="http://clang.llvm.org/">Clang</a></h3><p>LLVM项目的一个子项目，基于LLVM架构的C/C++/Objective-C编译器前端。</p>
<p><strong>相比于GCC，Clang具有如下优点</strong></p>
<ul>
<li>编译速度快:在某些平台上，Clang的编译速度显著的快过GCC(Debug模式下编译OC速度比GCC快3倍)</li>
<li>占用内存小:Clang生成的AST所占用的内存是GCC的五分之一左右</li>
<li>模块化设计:Clang采用基于库的模块化设计，易于 IDE 集成及其他用途的重用</li>
<li>诊断信息可读性强:在编译过程中，Clang 创建并保留了大量详细的元数据 (metadata)，有利于调试和错误报告</li>
<li>设计清晰简单，容易理解，易于扩展增强</li>
</ul>
<h3 id="Clang与LLVM关系"><a href="#Clang与LLVM关系" class="headerlink" title="Clang与LLVM关系"></a>Clang与LLVM关系</h3><img src="/2021/12/24/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%90%86%E8%A7%A3%E4%BB%80%E4%B9%88%E6%98%AFLLVM/Clang-LLVM.png" class="">

<center>Clang与LLVM</center>

<p>LLVM整体架构，前端用的是clang，广义的LLVM是指整个LLVM架构，一般狭义的LLVM指的是LLVM后端（包含代码优化和目标代码生成）。</p>
<p>源代码（C/C++）经过clang–&gt; 中间代码(经过一系列的优化，优化用的是Pass) –&gt; 机器码</p>
<h3 id="OC源文件的编译过程"><a href="#OC源文件的编译过程" class="headerlink" title="OC源文件的编译过程"></a>OC源文件的编译过程</h3><p>这里用Xcode创建一个Test项目，然后cd到main.m的上一路径。<br>命令行查看编译的过程:$ clang -ccc-print-phases main.m</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ clang -ccc-print-phases main.m </span><br><span class="line"></span><br><span class="line">0: input, &quot;main.m&quot;, objective-c</span><br><span class="line">1: preprocessor, &#123;0&#125;, objective-c-cpp-output</span><br><span class="line">2: compiler, &#123;1&#125;, ir</span><br><span class="line">3: backend, &#123;2&#125;, assembler</span><br><span class="line">4: assembler, &#123;3&#125;, object</span><br><span class="line">5: linker, &#123;4&#125;, image</span><br><span class="line">6: bind-arch, &quot;x86_64&quot;, &#123;5&#125;, image</span><br></pre></td></tr></table></figure>

<p>0.找到main.m文件<br>1.预处理器，处理include、import、宏定义<br>2.编译器编译，编译成ir中间代码<br>3.后端，生成目标代码<br>4.汇编<br>5.链接其他动态库、静态库<br>6.编译成适合某个架构的代码</p>
<p>查看preprocessor(预处理)的结果:$ clang -E main.m<br>这个命令敲出，终端就会打印许多信息，大致如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1 &quot;main.m&quot;</span><br><span class="line"># 1 &quot;&lt;built-in&gt;&quot; 1</span><br><span class="line"># 1 &quot;&lt;built-in&gt;&quot; 3</span><br><span class="line"># 353 &quot;&lt;built-in&gt;&quot; 3</span><br><span class="line"># 1 &quot;&lt;command line&gt;&quot; 1</span><br><span class="line"># 1 &quot;&lt;built-in&gt;&quot; 2</span><br><span class="line"># 1 &quot;main.m&quot; 2</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">  int main(int argc, const char * argv[]) &#123;</span><br><span class="line">@autoreleasepool &#123;</span><br><span class="line">    NSLog(@&quot;Hello, World!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h3><p><strong>词法分析</strong>，生成Token: $ clang -fmodules -E -Xclang -dump-tokens main.m<br>将代码分成一个个小单元（token）</p>
<p>举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void test(int a, int b)&#123;</span><br><span class="line">       int c &#x3D; a + b - 3;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void &#39;void&#39;  [StartOfLine]  Loc&#x3D;&lt;main.m:18:1&gt;</span><br><span class="line">identifier &#39;test&#39;    [LeadingSpace] Loc&#x3D;&lt;main.m:18:6&gt;</span><br><span class="line">l_paren &#39;(&#39;     Loc&#x3D;&lt;main.m:18:10&gt;</span><br><span class="line">int &#39;int&#39;       Loc&#x3D;&lt;main.m:18:11&gt;</span><br><span class="line">identifier &#39;a&#39;   [LeadingSpace] Loc&#x3D;&lt;main.m:18:15&gt;</span><br><span class="line">comma &#39;,&#39;       Loc&#x3D;&lt;main.m:18:16&gt;</span><br><span class="line">int &#39;int&#39;    [LeadingSpace] Loc&#x3D;&lt;main.m:18:18&gt;</span><br><span class="line">identifier &#39;b&#39;   [LeadingSpace] Loc&#x3D;&lt;main.m:18:22&gt;</span><br><span class="line">r_paren &#39;)&#39;     Loc&#x3D;&lt;main.m:18:23&gt;</span><br><span class="line">l_brace &#39;&#123;&#39;     Loc&#x3D;&lt;main.m:18:24&gt;</span><br><span class="line">int &#39;int&#39;    [StartOfLine] [LeadingSpace]   Loc&#x3D;&lt;main.m:19:5&gt;</span><br><span class="line">identifier &#39;c&#39;   [LeadingSpace] Loc&#x3D;&lt;main.m:19:9&gt;</span><br><span class="line">equal &#39;&#x3D;&#39;    [LeadingSpace] Loc&#x3D;&lt;main.m:19:11&gt;</span><br><span class="line">identifier &#39;a&#39;   [LeadingSpace] Loc&#x3D;&lt;main.m:19:13&gt;</span><br><span class="line">plus &#39;+&#39;     [LeadingSpace] Loc&#x3D;&lt;main.m:19:15&gt;</span><br><span class="line">identifier &#39;b&#39;   [LeadingSpace] Loc&#x3D;&lt;main.m:19:17&gt;</span><br><span class="line">minus &#39;-&#39;    [LeadingSpace] Loc&#x3D;&lt;main.m:19:19&gt;</span><br><span class="line">numeric_constant &#39;3&#39;     [LeadingSpace] Loc&#x3D;&lt;main.m:19:21&gt;</span><br><span class="line">semi &#39;;&#39;        Loc&#x3D;&lt;main.m:19:22&gt;</span><br><span class="line">r_brace &#39;&#125;&#39;  [StartOfLine]  Loc&#x3D;&lt;main.m:20:1&gt;</span><br><span class="line">eof &#39;&#39;      Loc&#x3D;&lt;main.m:20:2&gt;</span><br></pre></td></tr></table></figure>

<p>可以看出，词法分析的时候，将上面的代码拆分一个个token，后面数字表示某一行的第几个字符，例如第一个void，表示第18行第一个字符。</p>
<h3 id="语法树-AST"><a href="#语法树-AST" class="headerlink" title="语法树-AST"></a>语法树-AST</h3><p>语法分析，生成语法树(AST，Abstract Syntax Tree): $ clang -fmodules -fsyntax-only -Xclang -ast-dump main.m<br>通过语法树，我们能知道这个代码是做什么的。</p>
<p>还是刚刚的test函数<br>生成语法树如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|-FunctionDecl 0x7fa1439f5630 &lt;line:18:1, line:20:1&gt; line:18:6 test &#39;void (int, int)&#39;</span><br><span class="line">| |-ParmVarDecl 0x7fa1439f54b0 &lt;col:11, col:15&gt; col:15 used a &#39;int&#39;</span><br><span class="line">| |-ParmVarDecl 0x7fa1439f5528 &lt;col:18, col:22&gt; col:22 used b &#39;int&#39;</span><br><span class="line">| &#96;-CompoundStmt 0x7fa142167c88 &lt;col:24, line:20:1&gt;</span><br><span class="line">|   &#96;-DeclStmt 0x7fa142167c70 &lt;line:19:5, col:22&gt;</span><br><span class="line">|     &#96;-VarDecl 0x7fa1439f5708 &lt;col:5, col:21&gt; col:9 c &#39;int&#39; cinit</span><br><span class="line">|       &#96;-BinaryOperator 0x7fa142167c48 &lt;col:13, col:21&gt; &#39;int&#39; &#39;-&#39;</span><br><span class="line">|         |-BinaryOperator 0x7fa142167c00 &lt;col:13, col:17&gt; &#39;int&#39; &#39;+&#39;</span><br><span class="line">|         | |-ImplicitCastExpr 0x7fa1439f57b8 &lt;col:13&gt; &#39;int&#39; &lt;LValueToRValue&gt;</span><br><span class="line">|         | | &#96;-DeclRefExpr 0x7fa1439f5768 &lt;col:13&gt; &#39;int&#39; lvalue ParmVar 0x7fa1439f54b0 &#39;a&#39; &#39;int&#39;</span><br><span class="line">|         | &#96;-ImplicitCastExpr 0x7fa1439f57d0 &lt;col:17&gt; &#39;int&#39; &lt;LValueToRValue&gt;</span><br><span class="line">|         |   &#96;-DeclRefExpr 0x7fa1439f5790 &lt;col:17&gt; &#39;int&#39; lvalue ParmVar 0x7fa1439f5528 &#39;b&#39; &#39;int&#39;</span><br><span class="line">|         &#96;-IntegerLiteral 0x7fa142167c28 &lt;col:21&gt; &#39;int&#39; 3</span><br><span class="line"></span><br><span class="line">&#96;-&lt;undeserialized declarations&gt;</span><br></pre></td></tr></table></figure>

<p>在终端敲出的时候，终端很直观的帮我们用颜色区分。我们可以用图形显示如下：</p>
<img src="/2021/12/24/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%90%86%E8%A7%A3%E4%BB%80%E4%B9%88%E6%98%AFLLVM/test-AST.jpg" class="">

<center>test函数的语法树</center>


<h3 id="LLVM-IR"><a href="#LLVM-IR" class="headerlink" title="LLVM IR"></a>LLVM IR</h3><p>LLVM IR有3种表示形式（本质是等价的）</p>
<ul>
<li>text:便于阅读的文本格式，类似于汇编语言，拓展名.ll， $ clang -S -emit-llvm main.m</li>
<li>memory:内存格式</li>
<li>bitcode:二进制格式，拓展名.bc， $ clang -c -emit-llvm main.m</li>
</ul>
<p>我们以text形式编译查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; Function Attrs: noinline nounwind optnone ssp uwtable</span><br><span class="line">define void @test(i32, i32) #2 &#123;</span><br><span class="line">  %3 &#x3D; alloca i32, align 4</span><br><span class="line">  %4 &#x3D; alloca i32, align 4</span><br><span class="line">  %5 &#x3D; alloca i32, align 4</span><br><span class="line">  store i32 %0, i32* %3, align 4</span><br><span class="line">  store i32 %1, i32* %4, align 4</span><br><span class="line">  %6 &#x3D; load i32, i32* %3, align 4</span><br><span class="line">  %7 &#x3D; load i32, i32* %4, align 4</span><br><span class="line">  %8 &#x3D; add nsw i32 %6, %7</span><br><span class="line">  %9 &#x3D; sub nsw i32 %8, 3</span><br><span class="line">  store i32 %9, i32* %5, align 4</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>IR基本语法</strong><br>注释以分号 ; 开头<br>全局标识符以@开头，局部标识符以%开头<br>alloca，在当前函数栈帧中分配内存<br>i32，32bit，4个字节的意思<br>align，内存对齐<br>store，写入数据<br>load，读取数据<br>官方语法参考 <a href="https://links.jianshu.com/go?to=https://llvm.org/docs/LangRef.html">https://llvm.org/docs/LangRef.html</a></p>
<h3 id="应用与实践"><a href="#应用与实践" class="headerlink" title="应用与实践"></a>应用与实践</h3><p>我们的开发都是基于源码开发，所以我们首先要进行源码下载和编译。<br><strong>源码下载</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载LLVM</span><br><span class="line">$ git clone https:&#x2F;&#x2F;git.llvm.org&#x2F;git&#x2F;llvm.git&#x2F;</span><br><span class="line"></span><br><span class="line">下载clang</span><br><span class="line">$ cd llvm&#x2F;tools</span><br><span class="line">$ git clone https:&#x2F;&#x2F;git.llvm.org&#x2F;git&#x2F;clang.git&#x2F;</span><br><span class="line"></span><br><span class="line">备注：clang是llvm的子项目，但是它们的源码是分开的，我们需要将clang放在llvm&#x2F;tools目录下。</span><br></pre></td></tr></table></figure>

<p><strong>源码编译</strong><br>这里我们在终端敲出的clang是xcode默认内置clang编译器，我们自己要进行LLVM开发的话，需要编译属于我们自己的clang编译器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先安装cmake和ninja(先安装brew，https:&#x2F;&#x2F;brew.sh&#x2F;)</span><br><span class="line">$ brew install cmake</span><br><span class="line">$ brew install ninja</span><br><span class="line"></span><br><span class="line">ninja如果安装失败，可以直接从github获取release版放入【&#x2F;usr&#x2F;local&#x2F;bin】中</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;ninja-build&#x2F;ninja&#x2F;releases</span><br><span class="line"></span><br><span class="line">在LLVM源码同级目录下新建一个【llvm_build】目录(最终会在【llvm_build】目录下生成【build.ninja】</span><br><span class="line"></span><br><span class="line">$ cd llvm_build</span><br><span class="line">$ cmake -G Ninja ..&#x2F;llvm -DCMAKE_INSTALL_PREFIX&#x3D;LLVM的安装路径</span><br><span class="line"></span><br><span class="line">备注：生成build.ninja，就表示编译成功，-DCMAKE_INSTALL_PREFIX 表示编译好的东西放在指定的路径，-D表示参数。</span><br><span class="line"></span><br><span class="line">更多cmake相关选项，可以参考: https:&#x2F;&#x2F;llvm.org&#x2F;docs&#x2F;CMake.html</span><br></pre></td></tr></table></figure>

<p>接下来依次执行编译、安装指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ninja</span><br><span class="line">编译完毕后， 【llvm_build】目录大概 21.05 G（这个真的是好大啊）</span><br><span class="line">$ ninja install</span><br></pre></td></tr></table></figure>

<p>然后到这里我们的编译就完成了。</p>
<p>另一种方式是通过Xcode编译，生成Xcode项目再进行编译，但是速度很慢(可能需要1个多小时)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法如下：</span><br><span class="line"> 在llvm同级目录下新建一个【llvm_xcode】目录</span><br><span class="line">$ cd llvm_xcode</span><br><span class="line">$ cmake -G Xcode ..&#x2F;llvm</span><br></pre></td></tr></table></figure>

<p><strong>应用与实践的参考</strong></p>
<ul>
<li>libclang、libTooling<br>官方参考:<a href="https://links.jianshu.com/go?to=https://clang.llvm.org/docs/Tooling.html">https://clang.llvm.org/docs/Tooling.html</a><br>应用:语法树分析、语言转换等</li>
<li>Clang插件开发<br>官方参考<br>1、<a href="https://links.jianshu.com/go?to=https://clang.llvm.org/docs/ClangPlugins.html">https://clang.llvm.org/docs/ClangPlugins.html</a><br>2、<a href="https://links.jianshu.com/go?to=https://clang.llvm.org/docs/ExternalClangExamples.html">https://clang.llvm.org/docs/ExternalClangExamples.html</a><br>3、<a href="https://links.jianshu.com/go?to=https://clang.llvm.org/docs/RAVFrontendAction.html">https://clang.llvm.org/docs/RAVFrontendAction.html</a><br>应用:代码检查(命名规范、代码规范)等</li>
<li>Pass开发<br>官方参考:<a href="https://links.jianshu.com/go?to=https://llvm.org/docs/WritingAnLLVMPass.html">https://llvm.org/docs/WritingAnLLVMPass.html</a><br>应用:代码优化、代码混淆等</li>
<li>开发新的编程语言<br>1、 <a href="https://links.jianshu.com/go?to=https://llvm-tutorial-cn.readthedocs.io/en/latest/index.html">https://llvm-tutorial-cn.readthedocs.io/en/latest/index.html</a><br>2、<a href="https://links.jianshu.com/go?to=https://kaleidoscope-llvm-tutorial-zh-cn.readthedocs.io/zh_CN/latest/">https://kaleidoscope-llvm-tutorial-zh-cn.readthedocs.io/zh_CN/latest/</a></li>
</ul>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p>搬运自<a href="https://www.jianshu.com/p/1367dad95445">深入浅出让你理解什么是LLVM</a></p>
]]></content>
      <categories>
        <category>编译</category>
      </categories>
      <tags>
        <tag>编译</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown中常用的LaTex数学公式</title>
    <url>/2022/08/29/markdown_latex/</url>
    <content><![CDATA[<p>在学习过程中，会涉及到大量的数学公式，并且考虑到准备以 Markdown 为主要做笔记方式，因此，在这里对 Markdown 中 LaTeX 数学公式命令做一个汇总。</p>
<blockquote>
<p><strong>重要说明：</strong>示例中的 <code>$formula$</code> 是生成公式的 LaTeX 语法。</p>
</blockquote>
<h1 id="公式排版"><a href="#公式排版" class="headerlink" title="公式排版"></a>公式排版</h1><p>LaTeX 公式有两种，一种是公式和文字在一行中混合排列的<strong>行内公式</strong>，一种是公式独占一行或几行的<strong>行间公式（独立公式）</strong>：</p>
<ul>
<li>行内公式：用 <code>$formula$</code> 表示，例如: <code>$\sum_&#123;i=0&#125;^&#123;n&#125;i^2$</code> 表示 $\sum_{i=0}^{n}i^2$</li>
<li>行间公式（独立公式）：* 用 <code>$$formula$$</code> 表示，例如: <code>$$\sum_&#123;i=0&#125;^&#123;n&#125;i^2$$</code> 表示$$\sum_{i=0}^{n}i^2$$</li>
</ul>
<blockquote>
<p>**Tips:**以下几个字符 <code># $ % &amp; ~ _ ^ \ &#123; &#125;</code> 有特殊意义。当表示这些字符时，需要转义，即在每个字符前加上 <code>\</code> 。而对于字符 <code>\</code> ，可使用 <code>$\backslash$</code> 命令得到 $\backslash$。</p>
</blockquote>
<h1 id="常用数学表达命令"><a href="#常用数学表达命令" class="headerlink" title="常用数学表达命令"></a>常用数学表达命令</h1><h2 id="上下标表示"><a href="#上下标表示" class="headerlink" title="上下标表示"></a>上下标表示</h2><ul>
<li>上标：用 <code>^</code> 后的内容表示上标，例如: <code>$x^&#123;(i)&#125;$</code> , <code>$y^&#123;(i)&#125;$</code> 表示 $x^{(i)}$ , $y^{(i)}$</li>
<li>下标：用 <code>_</code> 后的内容表示上标，例如: <code>$x_&#123;(i)&#125;$</code> , <code>$y_&#123;(i)&#125;$</code> 表示 $x_{(i)}$ , $y_{(i)}$</li>
<li>上下标混用：例如: <code>$x_1^2$</code> , <code>$x^&#123;y^&#123;z&#125; &#125;$</code> , <code>$x^&#123;y_z&#125;$</code> 表示 $x_1^2$, $x^{y^{z}}$, $x^{y_z}$</li>
</ul>
<p>当角标位置看起来不明显时，可以强制改变角标层次或者在角标前面加上改变其大小的命令(如 <code>\tiny</code> , <code>\small</code> , <code>\normalsize</code> , <code>\large</code> , <code>\Large</code> , <code>\LARGE</code>)。例如： <code>$y_N$</code> , <code>$y_&#123;_N&#125;$</code> , <code>$y_&#123;\tiny&#123;N&#125;&#125;$</code> 表示 $y_N$, $y_{<em>N}$, $y</em>{\tiny{N}}$</p>
<p>并且支持中文作为角标，例如: <code>$&#123;\partial f&#125;_&#123;\tiny极大值&#125;$</code> , <code>$&#123;\partial f&#125;_&#123;\large 极大值&#125;$</code>表示 ${\partial f}<em>{\tiny 极大值}$, ${\partial f}</em>{\large 极大值}$</p>
<h2 id="分数形式"><a href="#分数形式" class="headerlink" title="分数形式"></a>分数形式</h2><p>分式命令：</p>
<ul>
<li><code>$\dfrac&#123;&#125;&#123;&#125;$</code> ,表示该分式是以 displaystyle 设置的，例如： <code>$\dfrac&#123;y&#125;&#123;x&#125;$</code> 表示 $\dfrac{y}{x}$</li>
<li><code>$\tfrac&#123;&#125;&#123;&#125;$</code> ,表示该分式是以 textstyle 设置的，例如： <code>$\tfrac&#123;y&#125;&#123;x&#125;$</code> 表示 $\tfrac{y}{x}$</li>
<li><code>$\frac&#123;&#125;&#123;&#125;$</code> ,表示该分式根据环境设置样式，例如: <code>$\frac&#123;y&#125;&#123;x&#125;$</code> 表示 $\frac{y}{x}$</li>
<li><code>$&#123;&#125;\over&#123;&#125;$</code> ,分式的另一种表达方式，一般不建议使用(但是真的很方便啊)，例如: <code>$y \over x$</code> 表示 $y \over x$</li>
</ul>
<p>其具体区别请参考：</p>
<p><a href="https://tex.stackexchange.com/questions/135389/what-is-the-difference-between-dfrac-and-frac">What is the difference between <code>\dfrac</code> and <code>\frac</code>?</a></p>
<p><a href="https://tex.stackexchange.com/questions/73822/what-is-the-difference-between-over-and-frac">What is the difference between <code>\over</code> and <code>\frac</code>?</a></p>
<p>连分式 <code>$x_0+\frac&#123;1&#125;&#123;x_1+\frac&#123;1&#125;&#123;x_2+\frac&#123;1&#125;&#123;x_3+\frac&#123;1&#125;&#123;x_4&#125; &#125; &#125; &#125;$</code> 表示 $x_0+\frac{1}{x_1+\frac{1}{x_2+\frac{1}{x_3+\frac{1}{x_4}}}}$</p>
<p>可以通过强制改变字体大小使得分子分母字体大小一致，例如: <code>$\newcommand&#123;\FS&#125;[2]&#123;\dfrac&#123; #1&#125;&#123; #2&#125;&#125;x_0+\FS&#123;1&#125;&#123;x_1+\FS&#123;1&#125;&#123;x_2+\FS&#123;1&#125;&#123;x_3+\FS&#123;1&#125;&#123;x_4&#125;&#125;&#125;&#125;$</code> 表示 $\newcommand{\FS}[2]{\dfrac{ #1}{ #2}}x_0+\FS{1}{x_1+\FS{1}{x_2+\FS{1}{x_3+\FS{1}{x_4}}}}$</p>
<blockquote>
<p>这里{和#连在一起在hexo生成templates时会出现问题。</p>
</blockquote>
<p>其中第一行命令定义了一个新的分式命令，规定每个调用该命令的分式都按 <code>\displaystyle</code> 的格式显示分式，等价于 <code>$x_0+\dfrac&#123;1&#125;&#123;x_1+\dfrac&#123;1&#125;&#123;x_2+\dfrac&#123;1&#125;&#123;x_3+\dfrac&#123;1&#125;&#123;x_4&#125;&#125;&#125;&#125;$</code></p>
<p>分数线长度值是预设为分子分母的最大长度，如果想要使分数线再长一点，可以在分子或分母两端添加一些间隔，例如: <code>$\frac&#123;1&#125;&#123;2&#125;$</code> , <code>$\frac&#123;\;1\;&#125;&#123;\;2\;&#125;$</code> 表示 $\frac{1}{2}$, $\frac{;1;}{;2;}$</p>
<h2 id="根式"><a href="#根式" class="headerlink" title="根式"></a>根式</h2><ul>
<li>二次根式命令： <code>\sqrt&#123;表达式&#125;</code> ，例如: <code>$\sqrt&#123;x&#125;$</code> 表示 $\sqrt{x}$</li>
<li>$n$次根式命令： <code>\sqrt[n]&#123;表达式&#125;</code> ，例如: <code>$\sqrt[3]&#123;x&#125;$</code> 表示 $\sqrt[3]{x}$</li>
</ul>
<p>被开方表达式字符高度不一致时，根号上面的横线可能不在同一条直线上。可以在被开方表达式插入一个只有高度没有宽度的数学支柱 <code>\mathstrut</code> ，例如： <code>$\sqrt&#123;a&#125;+\sqrt&#123;b&#125;+\sqrt&#123;c&#125;$</code> , <code>$\sqrt&#123;\mathstrut a&#125;+\sqrt&#123;\mathstrut b&#125;+\sqrt&#123;\mathstrut c&#125;$</code> 表示 $\sqrt{a}+\sqrt{b}+\sqrt{c}$, $\sqrt{\mathstrut a}+\sqrt{\mathstrut b}+\sqrt{\mathstrut c}$</p>
<p>当开方次数的位置显得略低时，可以将开方改为上标，并拉近与根式的水平距离，即将命令中的 <code>[n]</code> 改为 <code>[^n\!]</code> (其中 ^ 表示是上标，! 表示缩小间隔), 例如： <code>$sqrt&#123;1+\sqrt[p]&#123;1+\sqrt[p]&#123;1+a&#125;&#125;&#125;$</code> , <code>$\sqrt&#123;1+\sqrt[^p \!]&#123;1+\sqrt[^p \!]&#123;1+a&#125;&#125;&#125;$</code> 表示 $\sqrt{1+\sqrt[p]{1+\sqrt[p]{1+a}}}$, $\sqrt{1+\sqrt[^p !]{1+\sqrt[^p !]{1+a}}}$</p>
<h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>使用 <code>\vec&#123;矢量&#125;</code> 来产生一个矢量，也可以使用 <code>\overrightarrow</code> 等命令自定义字母上方的符号，例如: <code>$$\vec&#123;x&#125; \quad \overleftarrow&#123;xy&#125; \quad \overleftrightarrow&#123;xy&#125; \quad \overrightarrow&#123;xy&#125;$$</code> 表示</p>
<p>$$\vec{x} \quad \overleftarrow{xy} \quad \overleftrightarrow{xy} \quad \overrightarrow{xy}$$</p>
<h2 id="定界符-自适应放大命令"><a href="#定界符-自适应放大命令" class="headerlink" title="定界符 - 自适应放大命令"></a>定界符 - 自适应放大命令</h2><p>自适应放大命令: <code>\left</code> 和 <code>\right</code> , 本命令放在左右定界符前，随着公式内容大小自动调整符号大小，例如: <code>$\left(\frac&#123;1&#125;&#123;xyz&#125;\right)$</code> 表示 $\left(\frac{1}{xyz}\right)$</p>
<p>还有另外一种使用方式 <code>$() \big(\big) \Big(\Big) \Bigg(\Bigg)$</code> 表示 $() \big(\big) \Big(\Big) \Bigg(\Bigg)$</p>
<blockquote>
<p><strong>Tips:</strong> <code>\left</code> 和 <code>\right</code> 需成对使用，只需要一边时，可用 <code>\left.</code> 或 <code>\right.</code> 进行配对，例如: <code>$\left.\frac&#123;1&#125;&#123;2&#125;x^2\right|_0^1$</code> 表示 $\left.\frac{1}{2}x^2\right|_0^1$.</p>
</blockquote>
<h2 id="空白间距-占位宽度"><a href="#空白间距-占位宽度" class="headerlink" title="空白间距 - 占位宽度"></a>空白间距 - 占位宽度</h2><p><code>\quad</code> 代表当前字体下接近字符 <code>M</code> 的宽度。</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">没有空格</td>
<td align="center"><code>$ab$</code></td>
<td align="center">$ab$</td>
</tr>
<tr>
<td align="center">紧贴，缩进1/6m宽度</td>
<td align="center"><code>$a\!b$</code></td>
<td align="center">$a!b$</td>
</tr>
<tr>
<td align="center">小空格</td>
<td align="center"><code>$a\,b$</code></td>
<td align="center">$a,b$</td>
</tr>
<tr>
<td align="center">1/3个空格</td>
<td align="center"><code>$a\ b$</code></td>
<td align="center">$a\ b$</td>
</tr>
<tr>
<td align="center">中等空格</td>
<td align="center"><code>$a\:b$</code> 或 <code>$a\;b$</code></td>
<td align="center">$a:b$</td>
</tr>
<tr>
<td align="center">一个空格</td>
<td align="center"><code>$a \quad b$</code></td>
<td align="center">$a \quad b$</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h2><p>省略号用 <code>\dots \cdots \vdot \ddots</code> 表示。 <code>\dots</code> 和 <code>\cdots</code> 的纵向位置不同，前者一般用于有下标的序列，例如: <code>$$x_1, x_2, \dots, x_n \quad 1,2,\cdots,n \quad \vdots \quad \ddots$$</code> 表示$$x_1, x_2, \dots, x_n \quad 1,2,\cdots,n \quad \vdots \quad \ddots$$</p>
<h2 id="多行公式"><a href="#多行公式" class="headerlink" title="多行公式"></a>多行公式</h2><h3 id="长公式"><a href="#长公式" class="headerlink" title="长公式"></a>长公式</h3><p>无须对齐可使用 <code>multline</code> , 需要对齐使用 <code>split</code> , 用 <code>\\</code> 和 <code>&amp;</code> 来分行和设置对齐的位置，例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;multline&#125;</span><br><span class="line">x&#x3D;a+b+c+&#123;&#125; \\</span><br><span class="line">d+e+f+g</span><br><span class="line">\end&#123;multline&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{multline}<br>x=a+b+c+{} \<br>d+e+f+g<br>\end{multline}<br>$$</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;split&#125;</span><br><span class="line">x&#x3D;&#123;&#125;&amp;a+b+c+&#123;&#125; \\</span><br><span class="line">&amp;d+e+f+g</span><br><span class="line">\end&#123;split&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{split}<br>x={}&amp;a+b+c+{} \<br>&amp;d+e+f+g<br>\end{split}<br>$$</p>
<h3 id="公式组"><a href="#公式组" class="headerlink" title="公式组"></a>公式组</h3><p>不需要对齐的公式组用 <code>gather</code> , 需要对齐使用 <code>align</code> , 同样用 <code>&amp;</code> 设置对齐位置。例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;gather&#125;</span><br><span class="line">a&#x3D;b+c+d \\</span><br><span class="line">x&#x3D;y+z</span><br><span class="line">\end&#123;gather&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{gather}<br>a=b+c+d \<br>x=y+z<br>\end{gather}<br>$$</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;align&#125;</span><br><span class="line">a &amp;&#x3D;b+c+d \\</span><br><span class="line">x &amp;&#x3D;y+z</span><br><span class="line">\end&#123;align&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{align}<br>a &amp;=b+c+d \<br>x &amp;=y+z<br>\end{align}<br>$$</p>
<h3 id="分支公式"><a href="#分支公式" class="headerlink" title="分支公式"></a>分支公式</h3><p>分段函数通常用 <code>cases</code> , 例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">y&#x3D;\begin&#123;cases&#125;</span><br><span class="line">-x,\quad &amp;x \leq 0 \\</span><br><span class="line">x, &amp;x&gt;0</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>y=\begin{cases}<br>-x,\quad &amp;x \leq 0 \<br>x, &amp;x&gt;0<br>\end{cases}<br>$$</p>
<h3 id="公式编号"><a href="#公式编号" class="headerlink" title="公式编号"></a>公式编号</h3><p>自动编号的公式可以用如下方法表示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;equation&#125;</span><br><span class="line">E&#x3D;mc^2</span><br><span class="line">\end&#123;equation&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{equation}<br>E=mc^2<br>\end{equation}<br>$$</p>
<p>也可以通过命令 <code>\tag&#123;n&#125;</code> 手动为公式编号，并使用 <code>\label&#123;&#125;</code> 指令埋下锚点，例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">S(r_k) &#x3D; \sum_&#123;r_k \ne r_i&#125; \text&#123;exp&#125;(\frac&#123;-D_s(r_k, r_i)&#125;&#123;\sigma_s^2&#125;)\label&#123;eq:test&#125;\tag&#123;1.1&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>S(r_k) = \sum_{r_k \ne r_i} \text{exp}(\frac{-D_s(r_k, r_i)}{\sigma_s^2})\label{eq:test}\tag{1.1}<br>$$</p>
<p>使用 <code>\eqref</code> 指令引用前面埋下的锚点， <code>$\eqref&#123;eq:test&#125;$</code> 将显示为 $\eqref{eq:Test}$</p>
<h3 id="取消公式编号"><a href="#取消公式编号" class="headerlink" title="取消公式编号"></a>取消公式编号</h3><p>可在公式后加上 <code>\nonumber</code> 命令取消公式编号，例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;align&#125;</span><br><span class="line">a &amp;&#x3D;b+c+d \nonumber \\</span><br><span class="line">x &amp;&#x3D;y+z \nonumber</span><br><span class="line">\end&#123;align&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{align}<br>a &amp;=b+c+d \nonumber \<br>x &amp;=y+z \nonumber<br>\end{align}<br>$$</p>
<p>对于公式组，可采用 <code>aligned</code> 不对公式编号，例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">a &amp;&#x3D;b+c+d \\</span><br><span class="line">x &amp;&#x3D;y+z</span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{aligned}<br>a &amp;=b+c+d \<br>x &amp;=y+z<br>\end{aligned}<br>$$</p>
<h2 id="上下水平线"><a href="#上下水平线" class="headerlink" title="上下水平线"></a>上下水平线</h2><ul>
<li><code>\overline&#123;表达式&#125;</code> : 在表达式上方画出水平线，例如: <code>$\overline&#123;x+y&#125;$</code> 表示 $\overline{x+y}$</li>
<li><code>\underline&#123;表达式&#125;</code> : 在表达式下方画出水平线，例如: <code>$\underline&#123;x+y&#125;$</code> 表示 $\underline{x+y}$</li>
</ul>
<h2 id="上下大括号"><a href="#上下大括号" class="headerlink" title="上下大括号"></a>上下大括号</h2><ul>
<li><code>\overbrace&#123;表达式&#125;</code> : 在表达式上方画出一个水平的大括号，例如: <code>$\overbrace&#123;1+2+3+\cdots+100&#125;^&#123;100&#125;$</code> 表示 $\overbrace{1+2+3+\cdots+100}^{100}$</li>
<li><code>\underbrace&#123;表达式&#125;</code> : 在表达式下方画出一个水平的大括号，例如: <code>$\underbrace&#123;1+2+3+\cdots+100&#125;_&#123;100&#125;$</code> 表示 $\underbrace{1+2+3+\cdots+100}_{100}$</li>
</ul>
<h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p>生成矩阵的命令中每一行以 <code>\\</code> 结束，矩阵的元素之间用 <code>&amp;</code> 来分隔开，例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">x_&#123;_&#123;11&#125; &#125; &amp; x_&#123;_&#123;12&#125; &#125; &amp; \dots &amp; x_&#123;_&#123;1n&#125; &#125; \\</span><br><span class="line">x_&#123;_&#123;21&#125; &#125; &amp; x_&#123;_&#123;22&#125; &#125; &amp; \dots &amp; x_&#123;_&#123;2n&#125; &#125; \\</span><br><span class="line">\vdots &amp; \vdots &amp; \ddots  &amp; \vdots  \\</span><br><span class="line">x_&#123;_&#123;m1&#125; &#125; &amp; x_&#123;_&#123;m2&#125; &#125; &amp; \dots &amp; x_&#123;_&#123;mn&#125; &#125; \\</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{matrix}<br>x_{<em>{11} } &amp; x</em>{<em>{12} } &amp; \dots &amp; x</em>{<em>{1n} } \<br>x</em>{<em>{21} } &amp; x</em>{<em>{22} } &amp; \dots &amp; x</em>{<em>{2n} } \<br>\vdots &amp; \vdots &amp; \ddots  &amp; \vdots  \<br>x</em>{<em>{m1} } &amp; x</em>{<em>{m2} } &amp; \dots &amp; x</em>{_{mn} } \<br>\end{matrix}<br>$$</p>
<p>带各类不同边界的矩阵:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;pmatrix&#125; a &amp; b \\ c &amp; d \\ \end&#123;pmatrix&#125; \quad</span><br><span class="line">\begin&#123;bmatrix&#125; a &amp; b \\ c &amp; d \\ \end&#123;bmatrix&#125; \quad</span><br><span class="line">\left[ \begin&#123;matrix&#125; a &amp; b \\ c &amp; d \\ \end&#123;matrix&#125; \right] \quad</span><br><span class="line">\begin&#123;Bmatrix&#125; a &amp; b \\ c &amp; d \\ \end&#123;Bmatrix&#125; \quad</span><br><span class="line">\left\&#123; \begin&#123;matrix&#125; a &amp; b \\ c &amp; d \\ \end&#123;matrix&#125; \right\&#125; \quad</span><br><span class="line">\begin&#123;vmatrix&#125; a &amp; b \\ c &amp; d \\ \end&#123;vmatrix&#125; \quad</span><br><span class="line">\begin&#123;Vmatrix&#125; a &amp; b \\ c &amp; d \\ \end&#123;Vmatrix&#125; \quad</span><br><span class="line">\left[ \begin&#123;array&#125; &#123;c|c&#125; a &amp; b \\ c &amp; d \\ \end&#123;array&#125; \right]</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{pmatrix} a &amp; b \ c &amp; d \ \end{pmatrix} \quad<br>\begin{bmatrix} a &amp; b \ c &amp; d \ \end{bmatrix} \quad<br>\left[ \begin{matrix} a &amp; b \ c &amp; d \ \end{matrix} \right] \quad<br>\begin{Bmatrix} a &amp; b \ c &amp; d \ \end{Bmatrix} \quad<br>\left{ \begin{matrix} a &amp; b \ c &amp; d \ \end{matrix} \right} \quad<br>\begin{vmatrix} a &amp; b \ c &amp; d \ \end{vmatrix} \quad<br>\begin{Vmatrix} a &amp; b \ c &amp; d \ \end{Vmatrix} \quad<br>\left[ \begin{array} {c|c} a &amp; b \ c &amp; d \ \end{array} \right]<br>$$</p>
<h2 id="Norm-范数符号"><a href="#Norm-范数符号" class="headerlink" title="Norm - 范数符号"></a>Norm - 范数符号</h2><p>范数命令: <code>\parallel</code><br>例如: <code>$\parallel x \parallel_2$</code> 表示 $\parallel x \parallel_2$</p>
<h2 id="堆积符号"><a href="#堆积符号" class="headerlink" title="堆积符号"></a>堆积符号</h2><ul>
<li><code>\stackrel&#123;上位符号&#125;&#123;基位符号&#125;</code> : 基位符号大，上位符号小，例如: <code>$\vec&#123;x&#125;\stackrel&#123;\mathrm&#123;def&#125; &#125;&#123;=&#125;&#123;x_1,\dots,x_n&#125;$</code> 表示 $\vec{x}\stackrel{\mathrm{def} }{=}{x_1,\dots,x_n}$</li>
<li><code>&#123;上位公式 \choose 下位公式&#125;</code> : 上下符号一样大，上下符号被包括在圆弧内，例如: <code>$&#123;n+1 \choose k&#125;=&#123;n \choose k&#125;+&#123;n \choose k-1&#125;$</code> 表示 ${n+1 \choose k}={n \choose k}+{n \choose k-1}$</li>
<li><code>&#123;上位公式 \atop 下位公式&#125;</code> : 上下符号一样大，例如: <code>$\sum_&#123;k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n&#125;A_k$</code>表示 $\sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A_k$</li>
</ul>
<h2 id="给公式加一个方框"><a href="#给公式加一个方框" class="headerlink" title="给公式加一个方框"></a>给公式加一个方框</h2><p><code>\boxed</code> 命令给公式加一个方框，例如: <code>$$\boxed&#123;E=mc^2&#125;$$</code>表示$$\boxed{E=mc^2}$$</p>
<h2 id="给公式加点颜色"><a href="#给公式加点颜色" class="headerlink" title="给公式加点颜色"></a>给公式加点颜色</h2><p><code>\color&#123;color&#125;&#123;text&#125;</code> 命令给 <code>text</code> 部分渲染 <code>color</code> , 例如:</p>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>$\color&#123;black&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{black}{text}$</td>
</tr>
<tr>
<td align="center"><code>$\color&#123;gray&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{gray}{text}$</td>
</tr>
<tr>
<td align="center"><code>$\color&#123;silver&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{silver}{text}$</td>
</tr>
<tr>
<td align="center"><code>$\color&#123;white&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{white}{text}$</td>
</tr>
<tr>
<td align="center"><code>$\color&#123;maroon&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{maroon}{text}$</td>
</tr>
<tr>
<td align="center"><code>$\color&#123;red&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{red}{text}$</td>
</tr>
<tr>
<td align="center"><code>$\color&#123;yellow&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{yellow}{text}$</td>
</tr>
<tr>
<td align="center"><code>$\color&#123;lime&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{lime}{text}$</td>
</tr>
<tr>
<td align="center"><code>$\color&#123;olive&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{olive}{text}$</td>
</tr>
<tr>
<td align="center"><code>$\color&#123;green&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{green}{text}$</td>
</tr>
<tr>
<td align="center"><code>$\color&#123;teal&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{teal}{text}$</td>
</tr>
<tr>
<td align="center"><code>$\color&#123;aqua&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{aqua}{text}$</td>
</tr>
<tr>
<td align="center"><code>$\color&#123;blue&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{blue}{text}$</td>
</tr>
<tr>
<td align="center"><code>$\color&#123;navy&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{navy}{text}$</td>
</tr>
<tr>
<td align="center"><code>$\color&#123;purple&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{purple}{text}$</td>
</tr>
<tr>
<td align="center"><code>$\color&#123;fuchsia&#125;&#123;text&#125;$</code></td>
<td align="center">$\color{fuchsia}{text}$</td>
</tr>
</tbody></table>
<h2 id="添加刪除线"><a href="#添加刪除线" class="headerlink" title="添加刪除线"></a>添加刪除线</h2><p>在公式内使用 <code>\require&#123;cancel&#125;</code> 来允许 <code>片段删除线</code> 的显示。<br>声明片段删除线后，使用 <code>\cancel&#123;字符&#125;</code> , <code>\bcancel&#123;字符&#125;</code> , <code>\xcancel&#123;字符&#125;</code> 和 <code>\cancelto&#123;字符&#125;</code> 来实现各种片段删除线效果，例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\require&#123;enclose&#125;\begin&#123;array&#125;&#123;rl&#125;</span><br><span class="line">\verb|y+\cancel&#123;x&#125;| &amp; y+\cancel&#123;x&#125;\\</span><br><span class="line">\verb|\cancel&#123;y+x&#125;| &amp; \cancel&#123;y+x&#125;\\</span><br><span class="line">\verb|y+\bcancel&#123;x&#125;| &amp; y+\bcancel&#123;x&#125;\\</span><br><span class="line">\verb|y+\xcancel&#123;x&#125;| &amp; y+\xcancel&#123;x&#125;\\</span><br><span class="line">\verb|y+\cancelto&#123;0&#125;&#123;x&#125;| &amp; y+\cancelto&#123;0&#125;&#123;x&#125;\\</span><br><span class="line">\verb+\frac&#123;1\cancel9&#125;&#123;\cancel95&#125; &#x3D; \frac15+&amp; \frac&#123;1\cancel9&#125;&#123;\cancel95&#125; &#x3D; \frac15 \\</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\require{enclose}\begin{array}{rl}<br>\verb|y+\cancel{x}| &amp; y+\cancel{x}\<br>\verb|\cancel{y+x}| &amp; \cancel{y+x}\<br>\verb|y+\bcancel{x}| &amp; y+\bcancel{x}\<br>\verb|y+\xcancel{x}| &amp; y+\xcancel{x}\<br>\verb|y+\cancelto{0}{x}| &amp; y+\cancelto{0}{x}\<br>\verb+\frac{1\cancel9}{\cancel95} = \frac15+&amp; \frac{1\cancel9}{\cancel95} = \frac15 \<br>\end{array}<br>$$</p>
<p>使用 <code>\require&#123;enclose&#125;</code> 来允许 <code>整段删除线</code> 的显示。<br>声明整段删除线后，使用 <code>\enclose&#123;删除线效果&#125;&#123;字符&#125;</code> 来实现各种整段删除线效果。<br>其中，删除线效果有 <code>horizontalstrike</code> , <code>verticalstrike</code> , <code>updiagonalstrike</code> 和 <code>downdiagonalstrike</code>，可叠加使用，例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\require&#123;enclose&#125;\begin&#123;array&#125;&#123;rl&#125;</span><br><span class="line">\verb|\enclose&#123;horizontalstrike&#125;&#123;x+y&#125;| &amp; \enclose&#123;horizontalstrike&#125;&#123;x+y&#125;\\</span><br><span class="line">\verb|\enclose&#123;verticalstrike&#125;&#123;\frac xy&#125;| &amp; \enclose&#123;verticalstrike&#125;&#123;\frac xy&#125;\\</span><br><span class="line">\verb|\enclose&#123;updiagonalstrike&#125;&#123;x+y&#125;| &amp; \enclose&#123;updiagonalstrike&#125;&#123;x+y&#125;\\</span><br><span class="line">\verb|\enclose&#123;downdiagonalstrike&#125;&#123;x+y&#125;| &amp; \enclose&#123;downdiagonalstrike&#125;&#123;x+y&#125;\\</span><br><span class="line">\verb|\enclose&#123;horizontalstrike,updiagonalstrike&#125;&#123;x+y&#125;| &amp; \enclose&#123;horizontalstrike,updiagonalstrike&#125;&#123;x+y&#125;\\</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\require{enclose}\begin{array}{rl}<br>\verb|\enclose{horizontalstrike}{x+y}| &amp; \enclose{horizontalstrike}{x+y}\<br>\verb|\enclose{verticalstrike}{\frac xy}| &amp; \enclose{verticalstrike}{\frac xy}\<br>\verb|\enclose{updiagonalstrike}{x+y}| &amp; \enclose{updiagonalstrike}{x+y}\<br>\verb|\enclose{downdiagonalstrike}{x+y}| &amp; \enclose{downdiagonalstrike}{x+y}\<br>\verb|\enclose{horizontalstrike,updiagonalstrike}{x+y}| &amp; \enclose{horizontalstrike,updiagonalstrike}{x+y}\<br>\end{array}<br>$$</p>
<h2 id="字体转换"><a href="#字体转换" class="headerlink" title="字体转换"></a>字体转换</h2><p>若要对公式的某一部分字符进行字体转换，可以用 <code>&#123;\字体 &#123;需转换的部分字符&#125; &#125;</code> 命令，其中 <code>\字体</code> 部分可以参照下表选择合适的字体，一般情况下，公式默认为意大利体。</p>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">说明</th>
<th align="center">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>\rm</code></td>
<td align="center">罗马体</td>
<td align="center">$\rm{D}$</td>
</tr>
<tr>
<td align="center"><code>\cal</code></td>
<td align="center">花体</td>
<td align="center">$\cal{D}$</td>
</tr>
<tr>
<td align="center"><code>\it</code></td>
<td align="center">意大利体</td>
<td align="center">$\it{D}$</td>
</tr>
<tr>
<td align="center"><code>\Bbb</code></td>
<td align="center">黑板粗体</td>
<td align="center">$\Bbb{D}$</td>
</tr>
<tr>
<td align="center"><code>\bf</code></td>
<td align="center">粗体</td>
<td align="center">$\bf{D}$</td>
</tr>
<tr>
<td align="center"><code>\mit</code></td>
<td align="center">数学斜体</td>
<td align="center">$\mit{D}$</td>
</tr>
<tr>
<td align="center"><code>\sf</code></td>
<td align="center">等线体</td>
<td align="center">$\sf{D}$</td>
</tr>
<tr>
<td align="center"><code>\scr</code></td>
<td align="center">手写体</td>
<td align="center">$\scr{D}$</td>
</tr>
<tr>
<td align="center"><code>\tt</code></td>
<td align="center">打字机体</td>
<td align="center">$\tt{D}$</td>
</tr>
<tr>
<td align="center"><code>\frak</code></td>
<td align="center">旧德式字体</td>
<td align="center">$\frak{D}$</td>
</tr>
<tr>
<td align="center"><code>\boldsymbol</code></td>
<td align="center">黑体</td>
<td align="center">$\boldsymbol{D}$</td>
</tr>
</tbody></table>
<h2 id="交换图表使用"><a href="#交换图表使用" class="headerlink" title="交换图表使用"></a>交换图表使用</h2><p>使用一行 <code>$\require&#123;AMScd&#125;$</code> 语句来允许交换图表的显示。<br>声明交换图表后，语法与矩阵相似，在开头使用 <code>begin&#123;CD&#125;</code> , 在结尾使用 <code>end&#123;CD&#125;</code> , 在中间插入图表元素，每个元素之间插入 <code>&amp;</code> , 并在每行结尾处使用 <code>\\</code> , 例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$\require&#123;AMScd&#125;$</span><br><span class="line">$$</span><br><span class="line">\begin&#123;CD&#125;</span><br><span class="line">    A @&gt;a&gt;&gt; B\\</span><br><span class="line">    @V b V V\# @VV c V\\</span><br><span class="line">    C @&gt;&gt;d&gt; D</span><br><span class="line">\end&#123;CD&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$\require{AMScd}$<br>$$<br>\begin{CD}<br>    A @&gt;a&gt;&gt; B\<br>    @V b V V# @VV c V\<br>    C @&gt;&gt;d&gt; D<br>\end{CD}<br>$$</p>
<p>其中，<code>@&gt;&gt;&gt;</code> 代表右箭头, <code>@&lt;&lt;&lt;</code> 代表左箭头, <code>@VVV</code> 代表下箭头, <code>@AAA</code> 代表上箭头, <code>@=</code> 代表水平双实线, <code>@|</code> 代表竖直双实线, <code>@.</code> 代表没有箭头。<br>在 <code>@&gt;&gt;&gt;</code> 的 <code>&gt;&gt;&gt;</code> 之间任意插入文字即代表该箭头的注释文字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;CD&#125;</span><br><span class="line">    A @&gt;&gt;&gt; B @&gt;&#123;\text&#123;very long label&#125;&#125;&gt;&gt; C \\</span><br><span class="line">    @. @AAA @| \\</span><br><span class="line">    D @&#x3D; E @&lt;&lt;&lt; F</span><br><span class="line">\end&#123;CD&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{CD}<br>    A @&gt;&gt;&gt; B @&gt;{\text{very long label}}&gt;&gt; C \<br>    @. @AAA @| \<br>    D @= E @&lt;&lt;&lt; F<br>\end{CD}<br>$$</p>
<h1 id="LaTeX-常用数学符号整理"><a href="#LaTeX-常用数学符号整理" class="headerlink" title="LaTeX 常用数学符号整理"></a>LaTeX 常用数学符号整理</h1><h2 id="表1-数学模式重音符号"><a href="#表1-数学模式重音符号" class="headerlink" title="表1 数学模式重音符号"></a>表1 数学模式重音符号</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\hat{a}$</td>
<td align="center"><code>$\hat&#123;a&#125;$</code></td>
<td align="center">$\check{a}$</td>
<td align="center"><code>$\check&#123;a&#125;$</code></td>
<td align="center">$\tilde{a}$</td>
<td align="center"><code>$\tilde&#123;a&#125;$</code></td>
</tr>
<tr>
<td align="center">$\grave{a}$</td>
<td align="center"><code>$\grave&#123;a&#125;$</code></td>
<td align="center">$\dot{a}$</td>
<td align="center"><code>$\dot&#123;a&#125;$</code></td>
<td align="center">$\ddot{a}$</td>
<td align="center"><code>$\ddot&#123;a&#125;$</code></td>
</tr>
<tr>
<td align="center">$\bar{a}$</td>
<td align="center"><code>$\bar&#123;a&#125;$</code></td>
<td align="center">$\vec{a} $</td>
<td align="center"><code>$\vec&#123;a&#125; $</code></td>
<td align="center">$\widehat{A}$</td>
<td align="center"><code>$\widehat&#123;A&#125;$</code></td>
</tr>
<tr>
<td align="center">$\acute{a}$</td>
<td align="center"><code>$\acute&#123;a&#125;$</code></td>
<td align="center">$\breve{a} $</td>
<td align="center"><code>$\breve&#123;a&#125; $</code></td>
<td align="center">$\widetilde{A}$</td>
<td align="center"><code>$\widetilde&#123;A&#125;$</code></td>
</tr>
</tbody></table>
<h2 id="表2-希腊字母"><a href="#表2-希腊字母" class="headerlink" title="表2 希腊字母"></a>表2 希腊字母</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\alpha$</td>
<td align="center"><code>$\alpha$</code></td>
<td align="center">$\theta$</td>
<td align="center"><code>$\theta$</code></td>
<td align="center">$o$</td>
<td align="center"><code>$o$</code></td>
<td align="center">$\upsilon$</td>
<td align="center"><code>$\upsilon$</code></td>
</tr>
<tr>
<td align="center">$\beta$</td>
<td align="center"><code>$\beta$</code></td>
<td align="center">$\vartheta$</td>
<td align="center"><code>$\vartheta$</code></td>
<td align="center">$\pi$</td>
<td align="center"><code>$\pi$</code></td>
<td align="center">$\phi$</td>
<td align="center"><code>$\phi$</code></td>
</tr>
<tr>
<td align="center">$\gamma$</td>
<td align="center"><code>$\gamma$</code></td>
<td align="center">$\iota$</td>
<td align="center"><code>$\iota$</code></td>
<td align="center">$\varpi$</td>
<td align="center"><code>$\varpi$</code></td>
<td align="center">$\varphi$</td>
<td align="center"><code>$\varphi$</code></td>
</tr>
<tr>
<td align="center">$\delta$</td>
<td align="center"><code>$\delta$</code></td>
<td align="center">$\kappa$</td>
<td align="center"><code>$\kappa$</code></td>
<td align="center">$\rho$</td>
<td align="center"><code>$\rho$</code></td>
<td align="center">$\chi$</td>
<td align="center"><code>$\chi$</code></td>
</tr>
<tr>
<td align="center">$\epsilon$</td>
<td align="center"><code>$\epsilon$</code></td>
<td align="center">$\lambda$</td>
<td align="center"><code>$\lambda$</code></td>
<td align="center">$\varrho$</td>
<td align="center"><code>$\varrho$</code></td>
<td align="center">$\psi$</td>
<td align="center"><code>$\psi$</code></td>
</tr>
<tr>
<td align="center">$\varepsilon$</td>
<td align="center"><code>$\varepsilon$</code></td>
<td align="center">$\mu$</td>
<td align="center"><code>$\mu$</code></td>
<td align="center">$\sigma$</td>
<td align="center"><code>$\sigma$</code></td>
<td align="center">$\omega$</td>
<td align="center"><code>$\omega$</code></td>
</tr>
<tr>
<td align="center">$\zeta$</td>
<td align="center"><code>$\zeta$</code></td>
<td align="center">$\nu$</td>
<td align="center"><code>$\nu$</code></td>
<td align="center">$\varsigma$</td>
<td align="center"><code>$\varsigma$</code></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">$\eta$</td>
<td align="center"><code>$\eta$</code></td>
<td align="center">$\xi$</td>
<td align="center"><code>$\xi$</code></td>
<td align="center">$\tau$</td>
<td align="center"><code>$\tau$</code></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<blockquote>
<p><strong>Tips:</strong></p>
<p>如果使用大写的希腊字母，把命令的首字母变成大写即可，例如: <code>$\Gamma$</code> 表示 $\Gamma$ .</p>
<p>如果使用斜体大写希腊字母，再在大写希腊字母的 LaTeX 命令前加上 var , 例如:  <code>$\varGamma$</code> 表示 $\varGamma$ .</p>
</blockquote>
<h2 id="表3-二元关系符"><a href="#表3-二元关系符" class="headerlink" title="表3 二元关系符"></a>表3 二元关系符</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$&lt;$</td>
<td align="center"><code>$&lt;$</code></td>
<td align="center">$&gt;$</td>
<td align="center"><code>$&gt;$</code></td>
<td align="center">$=$</td>
<td align="center"><code>$=$</code></td>
</tr>
<tr>
<td align="center">$\leq$</td>
<td align="center"><code>$\leq$</code> 或 <code>$\le$</code></td>
<td align="center">$\geq$</td>
<td align="center"><code>$\geq$</code> 或 <code>$\ge$</code></td>
<td align="center">$\equiv$</td>
<td align="center"><code>$\equiv$</code></td>
</tr>
<tr>
<td align="center">$\ll$</td>
<td align="center"><code>$\ll$</code></td>
<td align="center">$\gg$</td>
<td align="center"><code>$\gg$</code></td>
<td align="center">$\doteq$</td>
<td align="center"><code>$\doteq$</code></td>
</tr>
<tr>
<td align="center">$\prec$</td>
<td align="center"><code>$\prec$</code></td>
<td align="center">$\succ$</td>
<td align="center"><code>$\succ$</code></td>
<td align="center">$\sim$</td>
<td align="center"><code>$\sim$</code></td>
</tr>
<tr>
<td align="center">$\preceq$</td>
<td align="center"><code>$\preceq$</code></td>
<td align="center">$\succeq$</td>
<td align="center"><code>$\succeq$</code></td>
<td align="center">$\simeq$</td>
<td align="center"><code>$\simeq$</code></td>
</tr>
<tr>
<td align="center">$\subset$</td>
<td align="center"><code>$\subset$</code></td>
<td align="center">$\supset$</td>
<td align="center"><code>$\supset$</code></td>
<td align="center">$\approx$</td>
<td align="center"><code>$\approx$</code></td>
</tr>
<tr>
<td align="center">$\subseteq$</td>
<td align="center"><code>$\subseteq$</code></td>
<td align="center">$\supseteq$</td>
<td align="center"><code>$\supseteq$</code></td>
<td align="center">$\cong$</td>
<td align="center"><code>$\cong$</code></td>
</tr>
<tr>
<td align="center">$\sqsubset$</td>
<td align="center"><code>$\sqsubset$</code></td>
<td align="center">$\sqsupset$</td>
<td align="center"><code>$\sqsupset$</code></td>
<td align="center">$\Join$</td>
<td align="center"><code>$\Join$</code></td>
</tr>
<tr>
<td align="center">$\sqsubseteq$</td>
<td align="center"><code>$\sqsubseteq$</code></td>
<td align="center">$\sqsupseteq$</td>
<td align="center"><code>$\sqsupseteq$</code></td>
<td align="center">$\bowtie$</td>
<td align="center"><code>$\bowtie$</code></td>
</tr>
<tr>
<td align="center">$\in$</td>
<td align="center"><code>$\in$</code></td>
<td align="center">$\ni$</td>
<td align="center"><code>$\ni$</code> 或 <code>$\owns$</code></td>
<td align="center">$\propto$</td>
<td align="center"><code>$\propto$</code></td>
</tr>
<tr>
<td align="center">$\vdash$</td>
<td align="center"><code>$\vdash$</code></td>
<td align="center">$\dashv$</td>
<td align="center"><code>$\dashv$</code></td>
<td align="center">$\models$</td>
<td align="center"><code>$\models$</code></td>
</tr>
<tr>
<td align="center">$\mid$</td>
<td align="center"><code>$\mid$</code></td>
<td align="center">$\parallel$</td>
<td align="center"><code>$\parallel$</code></td>
<td align="center">$\perp$</td>
<td align="center"><code>$\perp$</code></td>
</tr>
<tr>
<td align="center">$\smile$</td>
<td align="center"><code>$\smile$</code></td>
<td align="center">$\frown$</td>
<td align="center"><code>$\frown$</code></td>
<td align="center">$\asymp$</td>
<td align="center"><code>$\asymp$</code></td>
</tr>
<tr>
<td align="center">$:$</td>
<td align="center"><code>$:$</code></td>
<td align="center">$\notin$</td>
<td align="center"><code>$\notin$</code></td>
<td align="center">$\neq$</td>
<td align="center"><code>$\neq$</code> 或 <code>$\ne$</code></td>
</tr>
</tbody></table>
<blockquote>
<p><strong>Tips:</strong> 可以在上述符号的相应命令前加上 <code>\not</code> , 得到其否定形式，例如: <code>$\not\subset$</code> 表示 $\not\subset$.</p>
</blockquote>
<h2 id="表4-二元运算符"><a href="#表4-二元运算符" class="headerlink" title="表4 二元运算符"></a>表4 二元运算符</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$+$</td>
<td align="center"><code>$+$</code></td>
<td align="center">$-$</td>
<td align="center"><code>$-$</code></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">$\pm$</td>
<td align="center"><code>$\pm$</code></td>
<td align="center">$\mp$</td>
<td align="center"><code>$\mp$</code></td>
<td align="center">$\triangleleft$</td>
<td align="center"><code>$\triangleleft$</code></td>
</tr>
<tr>
<td align="center">$\cdot$</td>
<td align="center"><code>$\cdot$</code></td>
<td align="center">$\div$</td>
<td align="center"><code>$\div$</code></td>
<td align="center">$\triangleright$</td>
<td align="center"><code>$\triangleright$</code></td>
</tr>
<tr>
<td align="center">$\times$</td>
<td align="center"><code>$\times$</code></td>
<td align="center">$\setminus$</td>
<td align="center"><code>$\setminus$</code></td>
<td align="center">$\star$</td>
<td align="center"><code>$\star$</code></td>
</tr>
<tr>
<td align="center">$\cup$</td>
<td align="center"><code>$\cup$</code></td>
<td align="center">$\cap$</td>
<td align="center"><code>$\cap$</code></td>
<td align="center">$\ast$</td>
<td align="center"><code>$\ast$</code></td>
</tr>
<tr>
<td align="center">$\sqcup$</td>
<td align="center"><code>$\sqcup$</code></td>
<td align="center">$\sqcap$</td>
<td align="center"><code>$\sqcap$</code></td>
<td align="center">$\circ$</td>
<td align="center"><code>$\circ$</code></td>
</tr>
<tr>
<td align="center">$\vee$</td>
<td align="center"><code>$\vee$</code></td>
<td align="center">$\wedge$</td>
<td align="center"><code>$\wedge$</code> 或 <code>$\land$</code></td>
<td align="center">$\bullet$</td>
<td align="center"><code>$\bullet$</code></td>
</tr>
<tr>
<td align="center">$\oplus$</td>
<td align="center"><code>$\oplus$</code></td>
<td align="center">$\ominus$</td>
<td align="center"><code>$\ominus$</code></td>
<td align="center">$\diamond$</td>
<td align="center"><code>$\diamond$</code></td>
</tr>
<tr>
<td align="center">$\odot$</td>
<td align="center"><code>$\odot$</code></td>
<td align="center">$\oslash$</td>
<td align="center"><code>$\oslash$</code></td>
<td align="center">$\uplus$</td>
<td align="center"><code>$\uplus$</code></td>
</tr>
<tr>
<td align="center">$\otimes$</td>
<td align="center"><code>$\otimes$</code></td>
<td align="center">$\bigcirc$</td>
<td align="center"><code>$\bigcirc$</code></td>
<td align="center">$\amalg$</td>
<td align="center"><code>$\amalg$</code></td>
</tr>
<tr>
<td align="center">$\bigtriangleup$</td>
<td align="center"><code>$\bigtriangleup$</code></td>
<td align="center">$\bigtriangledown$</td>
<td align="center"><code>$\bigtriangledown$</code></td>
<td align="center">$\dagger$</td>
<td align="center"><code>$\dagger$</code></td>
</tr>
<tr>
<td align="center">$\lhd$</td>
<td align="center"><code>$\lhd$</code></td>
<td align="center">$\rhd$</td>
<td align="center"><code>$\rhd$</code></td>
<td align="center">$\ddagger$</td>
<td align="center"><code>$\ddagger$</code></td>
</tr>
<tr>
<td align="center">$\unlhd$</td>
<td align="center"><code>$\unlhd$</code></td>
<td align="center">$\unrhd$</td>
<td align="center"><code>$\unrhd$</code></td>
<td align="center">$\wr$</td>
<td align="center"><code>$\wr$</code></td>
</tr>
</tbody></table>
<h2 id="表5-大尺寸运算符"><a href="#表5-大尺寸运算符" class="headerlink" title="表5 大尺寸运算符"></a>表5 大尺寸运算符</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\sum$</td>
<td align="center"><code>$\sum$</code></td>
<td align="center">$\bigcup$</td>
<td align="center"><code>$\bigcup$</code></td>
<td align="center">$\bigvee$</td>
<td align="center"><code>$\bigvee$</code></td>
<td align="center">$\bigoplus$</td>
<td align="center"><code>$\bigoplus$</code></td>
</tr>
<tr>
<td align="center">$\prod$</td>
<td align="center"><code>$\prod$</code></td>
<td align="center">$\bigcap$</td>
<td align="center"><code>$\bigcap$</code></td>
<td align="center">$\bigwedge$</td>
<td align="center"><code>$\bigwedge$</code></td>
<td align="center">$\bigotimes$</td>
<td align="center"><code>$\bigotimes$</code></td>
</tr>
<tr>
<td align="center">$\coprod$</td>
<td align="center"><code>$\coprod$</code></td>
<td align="center">$\bigsqcup$</td>
<td align="center"><code>$\bigsqcup$</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">$\bigodot$</td>
<td align="center"><code>$\bigodot$</code></td>
</tr>
<tr>
<td align="center">$\int$</td>
<td align="center"><code>$\int$</code></td>
<td align="center">$\oint$</td>
<td align="center"><code>$\oint$</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">$\biguplus$</td>
<td align="center"><code>$\biguplus$</code></td>
</tr>
</tbody></table>
<h2 id="表6-箭头"><a href="#表6-箭头" class="headerlink" title="表6 箭头"></a>表6 箭头</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\leftarrow$</td>
<td align="center"><code>$\leftarrow$</code> 或 <code>$\gets$</code></td>
<td align="center">$\longleftarrow$</td>
<td align="center"><code>$\longleftarrow$</code></td>
<td align="center">$\uparrow$</td>
<td align="center"><code>$\uparrow$</code></td>
</tr>
<tr>
<td align="center">$\rightarrow$</td>
<td align="center"><code>$\rightarrow$</code> 或 <code>$\to$</code></td>
<td align="center">$\longrightarrow$</td>
<td align="center"><code>$\longrightarrow$</code></td>
<td align="center">$\downarrow$</td>
<td align="center"><code>$\downarrow$</code></td>
</tr>
<tr>
<td align="center">$\leftrightarrow$</td>
<td align="center"><code>$\leftrightarrow$</code></td>
<td align="center">$\longleftrightarrow$</td>
<td align="center"><code>$\longleftrightarrow$</code></td>
<td align="center">$\updownarrow$</td>
<td align="center"><code>$\updownarrow$</code></td>
</tr>
<tr>
<td align="center">$\Leftarrow$</td>
<td align="center"><code>$\Leftarrow$</code></td>
<td align="center">$\Longleftarrow$</td>
<td align="center"><code>$\Longleftarrow$</code></td>
<td align="center">$\Uparrow$</td>
<td align="center"><code>$\Uparrow$</code></td>
</tr>
<tr>
<td align="center">$\Rightarrow$</td>
<td align="center"><code>$\Rightarrow$</code></td>
<td align="center">$\Longrightarrow$</td>
<td align="center"><code>$\Longrightarrow$</code></td>
<td align="center">$\Downarrow$</td>
<td align="center"><code>$\Downarrow$</code></td>
</tr>
<tr>
<td align="center">$\Leftrightarrow$</td>
<td align="center"><code>$\Leftrightarrow$</code></td>
<td align="center">$\Longleftrightarrow$</td>
<td align="center"><code>$\Longleftrightarrow$</code></td>
<td align="center">$\Updownarrow$</td>
<td align="center"><code>$\Updownarrow$</code></td>
</tr>
<tr>
<td align="center">$\mapsto$</td>
<td align="center"><code>$\mapsto$</code></td>
<td align="center">$\longmapsto$</td>
<td align="center"><code>$\longmapsto$</code></td>
<td align="center">$\nearrow$</td>
<td align="center"><code>$\nearrow$</code></td>
</tr>
<tr>
<td align="center">$\hookleftarrow$</td>
<td align="center"><code>$\hookleftarrow$</code></td>
<td align="center">$\hookrightarrow$</td>
<td align="center"><code>$\hookrightarrow$</code></td>
<td align="center">$\searrow$</td>
<td align="center"><code>$\searrow$</code></td>
</tr>
<tr>
<td align="center">$\leftharpoonup$</td>
<td align="center"><code>$\leftharpoonup$</code></td>
<td align="center">$\rightharpoonup$</td>
<td align="center"><code>$\rightharpoonup$</code></td>
<td align="center">$\swarrow$</td>
<td align="center"><code>$\swarrow$</code></td>
</tr>
<tr>
<td align="center">$\leftharpoondown$</td>
<td align="center"><code>$\leftharpoondown$</code></td>
<td align="center">$\rightharpoondown$</td>
<td align="center"><code>$\rightharpoondown$</code></td>
<td align="center">$\nwarrow$</td>
<td align="center"><code>$\nwarrow$</code></td>
</tr>
<tr>
<td align="center">$\rightleftharpoons$</td>
<td align="center"><code>$\rightleftharpoons$</code></td>
<td align="center">$\iff$</td>
<td align="center"><code>$\iff$</code></td>
<td align="center">$\leadsto$</td>
<td align="center"><code>$\leadsto$</code></td>
</tr>
</tbody></table>
<h2 id="表7-定界符"><a href="#表7-定界符" class="headerlink" title="表7 定界符"></a>表7 定界符</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$($</td>
<td align="center"><code>$($</code></td>
<td align="center">$)$</td>
<td align="center"><code>$)$</code></td>
<td align="center">$\uparrow$</td>
<td align="center"><code>$\uparrow$</code></td>
<td align="center">$\Uparrow$</td>
<td align="center"><code>$\Uparrow$</code></td>
</tr>
<tr>
<td align="center">$[$</td>
<td align="center"><code>$[$</code> 或 <code>$\lbrack$</code></td>
<td align="center">$]$</td>
<td align="center"><code>$]$</code> 或 <code>$\rbrack$</code></td>
<td align="center">$\downarrow$</td>
<td align="center"><code>$\downarrow$</code></td>
<td align="center">$\Downarrow$</td>
<td align="center"><code>$\Downarrow$</code></td>
</tr>
<tr>
<td align="center">${$</td>
<td align="center"><code>$\&#123;$</code> 或 <code>$\lbrace$</code></td>
<td align="center">$}$</td>
<td align="center"><code>$\&#125;$</code> 或 <code>$ rlbrace $</code></td>
<td align="center">$\updownarrow$</td>
<td align="center"><code>$\updownarrow$</code></td>
<td align="center">$\Updownarrow$</td>
<td align="center"><code>$\Updownarrow$</code></td>
</tr>
<tr>
<td align="center">$\langle$</td>
<td align="center"><code>$\langle$</code></td>
<td align="center">$\rangle$</td>
<td align="center"><code>$\rangle$</code></td>
<td align="center">$\vert$</td>
<td align="center"><code>$\vert$</code></td>
<td align="center">$\Vert$</td>
<td align="center"><code>$\Vert$</code></td>
</tr>
<tr>
<td align="center">$\lfloor$</td>
<td align="center"><code>$\lfloor$</code></td>
<td align="center">$\rfloor$</td>
<td align="center"><code>$\rfloor$</code></td>
<td align="center">$\lceil$</td>
<td align="center"><code>$\lceil$</code></td>
<td align="center">$\rceil$</td>
<td align="center"><code>$\rceil$</code></td>
</tr>
<tr>
<td align="center">$/$</td>
<td align="center"><code>$/$</code></td>
<td align="center">$\backslash$</td>
<td align="center"><code>$\backslash$</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="表8-大尺寸定界符"><a href="#表8-大尺寸定界符" class="headerlink" title="表8 大尺寸定界符"></a>表8 大尺寸定界符</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\lgroup$</td>
<td align="center"><code>$\lgroup$</code></td>
<td align="center">$\rgroup$</td>
<td align="center"><code>$\rgroup$</code></td>
</tr>
<tr>
<td align="center">$\lmoustache$</td>
<td align="center"><code>$\lmoustache$</code></td>
<td align="center">$\rmoustache$</td>
<td align="center"><code>$\rmoustache$</code></td>
</tr>
<tr>
<td align="center">$\arrowvert$</td>
<td align="center"><code>$\arrowvert$</code></td>
<td align="center">$\Arrowvert$</td>
<td align="center"><code>$\Arrowvert$</code></td>
</tr>
<tr>
<td align="center">$\bracevert$</td>
<td align="center"><code>$\bracevert$</code></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="表9-其它符号"><a href="#表9-其它符号" class="headerlink" title="表9 其它符号"></a>表9 其它符号</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\dots$</td>
<td align="center"><code>$\dots$</code></td>
<td align="center">$\cdots$</td>
<td align="center"><code>$\cdots$</code></td>
<td align="center">$\vdots$</td>
<td align="center"><code>$\vdots$</code></td>
<td align="center">$\ddots$</td>
<td align="center"><code>$\ddots$</code></td>
</tr>
<tr>
<td align="center">$\hbar$</td>
<td align="center"><code>$\hbar$</code></td>
<td align="center">$\imath$</td>
<td align="center"><code>$\imath$</code></td>
<td align="center">$\jmath$</td>
<td align="center"><code>$\jmath$</code></td>
<td align="center">$\ell$</td>
<td align="center"><code>$\ell$</code></td>
</tr>
<tr>
<td align="center">$\Re$</td>
<td align="center"><code>$\Re$</code></td>
<td align="center">$\Im$</td>
<td align="center"><code>$\Im$</code></td>
<td align="center">$\aleph$</td>
<td align="center"><code>$\aleph$</code></td>
<td align="center">$\wp$</td>
<td align="center"><code>$\wp$</code></td>
</tr>
<tr>
<td align="center">$\forall$</td>
<td align="center"><code>$\forall$</code></td>
<td align="center">$\exists$</td>
<td align="center"><code>$\exists$</code></td>
<td align="center">$\mho$</td>
<td align="center"><code>$\mho$</code></td>
<td align="center">$\partial$</td>
<td align="center"><code>$\partial$</code></td>
</tr>
<tr>
<td align="center">$’$</td>
<td align="center"><code>$&#39;$</code></td>
<td align="center">$\prime$</td>
<td align="center"><code>$\prime$</code></td>
<td align="center">$\emptyset$</td>
<td align="center"><code>$\emptyset$</code></td>
<td align="center">$\infty$</td>
<td align="center"><code>$\infty$</code></td>
</tr>
<tr>
<td align="center">$\nabla$</td>
<td align="center"><code>$\nabla$</code></td>
<td align="center">$\triangle$</td>
<td align="center"><code>$\triangle$</code></td>
<td align="center">$\Box$</td>
<td align="center"><code>$\Box$</code></td>
<td align="center">$\Diamond$</td>
<td align="center"><code>$\Diamond$</code></td>
</tr>
<tr>
<td align="center">$\bot$</td>
<td align="center"><code>$\bot$</code></td>
<td align="center">$\top$</td>
<td align="center"><code>$\top$</code></td>
<td align="center">$\angle$</td>
<td align="center"><code>$\angle$</code></td>
<td align="center">$\surd$</td>
<td align="center"><code>$\surd$</code></td>
</tr>
<tr>
<td align="center">$\diamondsuit$</td>
<td align="center"><code>$\diamondsuit$</code></td>
<td align="center">$\heartsuit$</td>
<td align="center"><code>$\heartsuit$</code></td>
<td align="center">$\clubsuit$</td>
<td align="center"><code>$\clubsuit$</code></td>
<td align="center">$\spadesuit$</td>
<td align="center"><code>$\spadesuit$</code></td>
</tr>
<tr>
<td align="center">$\neg$</td>
<td align="center"><code>$\neg$</code> 或 <code>$\lnot$</code></td>
<td align="center">$\flat$</td>
<td align="center"><code>$\flat$</code></td>
<td align="center">$\natural$</td>
<td align="center"><code>$\natural$</code></td>
<td align="center">$\sharp$</td>
<td align="center"><code>$\sharp$</code></td>
</tr>
</tbody></table>
<h2 id="表10-AMS-定界符"><a href="#表10-AMS-定界符" class="headerlink" title="表10 AMS 定界符"></a>表10 AMS 定界符</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\ulcorner$</td>
<td align="center"><code>$\ulcorner$</code></td>
<td align="center">$\urcorner$</td>
<td align="center"><code>$\urcorner$</code></td>
<td align="center">$\llcorner$</td>
<td align="center"><code>$\llcorner$</code></td>
<td align="center">$\lrcorner$</td>
<td align="center"><code>$\lrcorner$</code></td>
</tr>
<tr>
<td align="center">$\lvert$</td>
<td align="center"><code>$\lvert$</code></td>
<td align="center">$\rvert$</td>
<td align="center"><code>$\rvert$</code></td>
<td align="center">$\lVert$</td>
<td align="center"><code>$\lVert$</code></td>
<td align="center">$\rVert$</td>
<td align="center"><code>$\rVert$</code></td>
</tr>
</tbody></table>
<h2 id="表11-AMS-希腊和希伯来字母"><a href="#表11-AMS-希腊和希伯来字母" class="headerlink" title="表11 AMS 希腊和希伯来字母"></a>表11 AMS 希腊和希伯来字母</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\digamma$</td>
<td align="center"><code>$\digamma$</code></td>
<td align="center">$\varkappa$</td>
<td align="center"><code>$\varkappa$</code></td>
<td align="center">$\beth$</td>
<td align="center"><code>$\beth$</code></td>
</tr>
<tr>
<td align="center">$\daleth$</td>
<td align="center"><code>$\daleth$</code></td>
<td align="center">$\gimel$</td>
<td align="center"><code>$\gimel$</code></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="表12-AMS-二元关系符"><a href="#表12-AMS-二元关系符" class="headerlink" title="表12 AMS 二元关系符"></a>表12 AMS 二元关系符</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\lessdot$</td>
<td align="center"><code>$\lessdot$</code></td>
<td align="center">$\gtrdot$</td>
<td align="center"><code>$\gtrdot$</code></td>
<td align="center">$\doteqdot$</td>
<td align="center"><code>$\doteqdot$</code></td>
</tr>
<tr>
<td align="center">$\leqslant$</td>
<td align="center"><code>$\leqslant$</code></td>
<td align="center">$\geqslant$</td>
<td align="center"><code>$\geqslant$</code></td>
<td align="center">$\risingdotseq$</td>
<td align="center"><code>$\risingdotseq$</code></td>
</tr>
<tr>
<td align="center">$\eqslantless$</td>
<td align="center"><code>$\eqslantless$</code></td>
<td align="center">$\eqslantgtr$</td>
<td align="center"><code>$\eqslantgtr$</code></td>
<td align="center">$\fallingdotseq$</td>
<td align="center"><code>$\fallingdotseq$</code></td>
</tr>
<tr>
<td align="center">$\leqq$</td>
<td align="center"><code>$\leqq$</code></td>
<td align="center">$\geqq$</td>
<td align="center"><code>$\geqq$</code></td>
<td align="center">$\eqcirc$</td>
<td align="center"><code>$\eqcirc$</code></td>
</tr>
<tr>
<td align="center">$\lll$</td>
<td align="center"><code>$\lll$</code> 或 <code>$\llless$</code></td>
<td align="center">$\ggg$</td>
<td align="center"><code>$\ggg$</code></td>
<td align="center">$\circeq$</td>
<td align="center"><code>$\circeq$</code></td>
</tr>
<tr>
<td align="center">$\lesssim$</td>
<td align="center"><code>$\lesssim$</code></td>
<td align="center">$\gtrsim$</td>
<td align="center"><code>$\gtrsim$</code></td>
<td align="center">$\triangleq$</td>
<td align="center"><code>$\triangleq$</code></td>
</tr>
<tr>
<td align="center">$\lessapprox$</td>
<td align="center"><code>$\lessapprox$</code></td>
<td align="center">$\gtrapprox$</td>
<td align="center"><code>$\gtrapprox$</code></td>
<td align="center">$\bumpeq$</td>
<td align="center"><code>$\bumpeq$</code></td>
</tr>
<tr>
<td align="center">$\lessgtr$</td>
<td align="center"><code>$\lessgtr$</code></td>
<td align="center">$\gtrless$</td>
<td align="center"><code>$\gtrless$</code></td>
<td align="center">$\Bumpeq$</td>
<td align="center"><code>$\Bumpeq$</code></td>
</tr>
<tr>
<td align="center">$\lesseqgtr$</td>
<td align="center"><code>$\lesseqgtr$</code></td>
<td align="center">$\gtreqless$</td>
<td align="center"><code>$\gtreqless$</code></td>
<td align="center">$\thicksim$</td>
<td align="center"><code>$\thicksim$</code></td>
</tr>
<tr>
<td align="center">$\lesseqqgtr$</td>
<td align="center"><code>$\lesseqqgtr$</code></td>
<td align="center">$\gtreqqless$</td>
<td align="center"><code>$\gtreqqless$</code></td>
<td align="center">$\thickapprox$</td>
<td align="center"><code>$\thickapprox$</code></td>
</tr>
<tr>
<td align="center">$\preccurlyeq$</td>
<td align="center"><code>$\preccurlyeq$</code></td>
<td align="center">$\succcurlyeq$</td>
<td align="center"><code>$\succcurlyeq$</code></td>
<td align="center">$\approxeq$</td>
<td align="center"><code>$\approxeq$</code></td>
</tr>
<tr>
<td align="center">$\curlyeqprec$</td>
<td align="center"><code>$\curlyeqprec$</code></td>
<td align="center">$\curlyeqsucc$</td>
<td align="center"><code>$\curlyeqsucc$</code></td>
<td align="center">$\backsim$</td>
<td align="center"><code>$\backsim$</code></td>
</tr>
<tr>
<td align="center">$\precsim$</td>
<td align="center"><code>$\precsim$</code></td>
<td align="center">$\succsim$</td>
<td align="center"><code>$\succsim$</code></td>
<td align="center">$\backsimeq$</td>
<td align="center"><code>$\backsimeq$</code></td>
</tr>
<tr>
<td align="center">$\precapprox$</td>
<td align="center"><code>$\precapprox$</code></td>
<td align="center">$\succapprox$</td>
<td align="center"><code>$\succapprox$</code></td>
<td align="center">$\vDash$</td>
<td align="center"><code>$\vDash$</code></td>
</tr>
<tr>
<td align="center">$\subseteqq$</td>
<td align="center"><code>$\subseteqq$</code></td>
<td align="center">$\supseteqq$</td>
<td align="center"><code>$\supseteqq$</code></td>
<td align="center">$\Vdash$</td>
<td align="center"><code>$\Vdash$</code></td>
</tr>
<tr>
<td align="center">$\Subset$</td>
<td align="center"><code>$\Subset$</code></td>
<td align="center">$\Supset$</td>
<td align="center"><code>$\Supset$</code></td>
<td align="center">$\Vvdash$</td>
<td align="center"><code>$\Vvdash$</code></td>
</tr>
<tr>
<td align="center">$\sqsubset$</td>
<td align="center"><code>$\sqsubset$</code></td>
<td align="center">$\sqsupset$</td>
<td align="center"><code>$\sqsupset$</code></td>
<td align="center">$\backepsilon$</td>
<td align="center"><code>$\backepsilon$</code></td>
</tr>
<tr>
<td align="center">$\therefore$</td>
<td align="center"><code>$\therefore$</code></td>
<td align="center">$\because$</td>
<td align="center"><code>$\because$</code></td>
<td align="center">$\varpropto$</td>
<td align="center"><code>$\varpropto$</code></td>
</tr>
<tr>
<td align="center">$\shortmid$</td>
<td align="center"><code>$\shortmid$</code></td>
<td align="center">$\shortparallel$</td>
<td align="center"><code>$\shortparallel$</code></td>
<td align="center">$\between$</td>
<td align="center"><code>$\between$</code></td>
</tr>
<tr>
<td align="center">$\smallsmile$</td>
<td align="center"><code>$\smallsmile$</code></td>
<td align="center">$\smallfrown$</td>
<td align="center"><code>$\smallfrown$</code></td>
<td align="center">$\pitchfork$</td>
<td align="center"><code>$\pitchfork$</code></td>
</tr>
<tr>
<td align="center">$\vartriangleleft$</td>
<td align="center"><code>$\vartriangleleft$</code></td>
<td align="center">$\vartriangleright$</td>
<td align="center"><code>$\vartriangleright$</code></td>
<td align="center">$\blacktriangleleft$</td>
<td align="center"><code>$\blacktriangleleft$</code></td>
</tr>
<tr>
<td align="center">$\trianglelefteq$</td>
<td align="center"><code>$\trianglelefteq$</code></td>
<td align="center">$\trianglerighteq$</td>
<td align="center"><code>$\trianglerighteq$</code></td>
<td align="center">$\blacktriangleright$</td>
<td align="center"><code>$\blacktriangleright$</code></td>
</tr>
</tbody></table>
<h2 id="表13-AMS-箭头"><a href="#表13-AMS-箭头" class="headerlink" title="表13 AMS 箭头"></a>表13 AMS 箭头</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\dashleftarrow$</td>
<td align="center"><code>$\dashleftarrow$</code></td>
<td align="center">$\dashrightarrow$</td>
<td align="center"><code>$\dashrightarrow$</code></td>
<td align="center">$\multimap$</td>
<td align="center"><code>$\multimap$</code></td>
</tr>
<tr>
<td align="center">$\leftleftarrows$</td>
<td align="center"><code>$\leftleftarrows$</code></td>
<td align="center">$\rightrightarrows$</td>
<td align="center"><code>$\rightrightarrows$</code></td>
<td align="center">$\upuparrows$</td>
<td align="center"><code>$\upuparrows$</code></td>
</tr>
<tr>
<td align="center">$\leftrightarrows$</td>
<td align="center"><code>$\leftrightarrows$</code></td>
<td align="center">$\rightleftarrows$</td>
<td align="center"><code>$\rightleftarrows$</code></td>
<td align="center">$\downdownarrows$</td>
<td align="center"><code>$\downdownarrows$</code></td>
</tr>
<tr>
<td align="center">$\Lleftarrow$</td>
<td align="center"><code>$\Lleftarrow$</code></td>
<td align="center">$\Rrightarrow$</td>
<td align="center"><code>$\Rrightarrow$</code></td>
<td align="center">$\upharpoonleft$</td>
<td align="center"><code>$\upharpoonleft$</code></td>
</tr>
<tr>
<td align="center">$\twoheadleftarrow$</td>
<td align="center"><code>$\twoheadleftarrow$</code></td>
<td align="center">$\twoheadrightarrow$</td>
<td align="center"><code>$\twoheadrightarrow$</code></td>
<td align="center">$\upharpoonright$</td>
<td align="center"><code>$\upharpoonright$</code></td>
</tr>
<tr>
<td align="center">$\leftarrowtail$</td>
<td align="center"><code>$\leftarrowtail$</code></td>
<td align="center">$\rightarrowtail$</td>
<td align="center"><code>$\rightarrowtail$</code></td>
<td align="center">$\downharpoonleft$</td>
<td align="center"><code>$\downharpoonleft$</code></td>
</tr>
<tr>
<td align="center">$\leftrightharpoons $</td>
<td align="center"><code>$\leftrightharpoons $</code></td>
<td align="center">$\rightleftharpoons$</td>
<td align="center"><code>$\rightleftharpoons$</code></td>
<td align="center">$\downharpoonright$</td>
<td align="center"><code>$\downharpoonright$</code></td>
</tr>
<tr>
<td align="center">$\Lsh$</td>
<td align="center"><code>$\Lsh$</code></td>
<td align="center">$\Rsh$</td>
<td align="center"><code>$\Rsh$</code></td>
<td align="center">$\rightsquigarrow$</td>
<td align="center"><code>$\rightsquigarrow$</code></td>
</tr>
<tr>
<td align="center">$\looparrowleft$</td>
<td align="center"><code>$\looparrowleft$</code></td>
<td align="center">$\looparrowright$</td>
<td align="center"><code>$\looparrowright$</code></td>
<td align="center">$\leftrightsquigarrow$</td>
<td align="center"><code>$\leftrightsquigarrow$</code></td>
</tr>
<tr>
<td align="center">$\curvearrowleft$</td>
<td align="center"><code>$\curvearrowleft$</code></td>
<td align="center">$\curvearrowright$</td>
<td align="center"><code>$\curvearrowright$</code></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">$\circlearrowleft$</td>
<td align="center"><code>$\circlearrowleft$</code></td>
<td align="center">$\circlearrowright$</td>
<td align="center"><code>$\circlearrowright$</code></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="表14-AMS-二元否定关系符和箭头"><a href="#表14-AMS-二元否定关系符和箭头" class="headerlink" title="表14 AMS 二元否定关系符和箭头"></a>表14 AMS 二元否定关系符和箭头</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\nless$</td>
<td align="center"><code>$\nless$</code></td>
<td align="center">$\ngtr$</td>
<td align="center"><code>$\ngtr$</code></td>
<td align="center">$\varsubsetneqq$</td>
<td align="center"><code>$\varsubsetneqq$</code></td>
</tr>
<tr>
<td align="center">$\lneq$</td>
<td align="center"><code>$\lneq$</code></td>
<td align="center">$\gneq$</td>
<td align="center"><code>$\gneq$</code></td>
<td align="center">$\varsupsetneqq$</td>
<td align="center"><code>$\varsupsetneqq$</code></td>
</tr>
<tr>
<td align="center">$\nleq$</td>
<td align="center"><code>$\nleq$</code></td>
<td align="center">$\ngeq$</td>
<td align="center"><code>$\ngeq$</code></td>
<td align="center">$\nsubseteqq$</td>
<td align="center"><code>$\nsubseteqq$</code></td>
</tr>
<tr>
<td align="center">$\nleqslant$</td>
<td align="center"><code>$\nleqslant$</code></td>
<td align="center">$\ngeqslant$</td>
<td align="center"><code>$\ngeqslant$</code></td>
<td align="center">$\nsupseteqq$</td>
<td align="center"><code>$\nsupseteqq$</code></td>
</tr>
<tr>
<td align="center">$\lneqq$</td>
<td align="center"><code>$\lneqq$</code></td>
<td align="center">$\gneqq$</td>
<td align="center"><code>$\gneqq$</code></td>
<td align="center">$\nmid$</td>
<td align="center"><code>$\nmid$</code></td>
</tr>
<tr>
<td align="center">$\lvertneqq$</td>
<td align="center"><code>$\lvertneqq$</code></td>
<td align="center">$\gvertneqq$</td>
<td align="center"><code>$\gvertneqq$</code></td>
<td align="center">$\nparallel$</td>
<td align="center"><code>$\nparallel$</code></td>
</tr>
<tr>
<td align="center">$\nleqq$</td>
<td align="center"><code>$\nleqq$</code></td>
<td align="center">$\ngeqq$</td>
<td align="center"><code>$\ngeqq$</code></td>
<td align="center">$\nshortmid$</td>
<td align="center"><code>$\nshortmid$</code></td>
</tr>
<tr>
<td align="center">$\lnsim$</td>
<td align="center"><code>$\lnsim$</code></td>
<td align="center">$\gnsim$</td>
<td align="center"><code>$\gnsim$</code></td>
<td align="center">$\nshortparallel$</td>
<td align="center"><code>$\nshortparallel$</code></td>
</tr>
<tr>
<td align="center">$\lnapprox$</td>
<td align="center"><code>$\lnapprox$</code></td>
<td align="center">$\gnapprox$</td>
<td align="center"><code>$\gnapprox$</code></td>
<td align="center">$\nsim$</td>
<td align="center"><code>$\nsim$</code></td>
</tr>
<tr>
<td align="center">$\nprec$</td>
<td align="center"><code>$\nprec$</code></td>
<td align="center">$\nsucc$</td>
<td align="center"><code>$\nsucc$</code></td>
<td align="center">$\ncong$</td>
<td align="center"><code>$\ncong$</code></td>
</tr>
<tr>
<td align="center">$\npreceq$</td>
<td align="center"><code>$\npreceq$</code></td>
<td align="center">$\nsucceq$</td>
<td align="center"><code>$\nsucceq$</code></td>
<td align="center">$\nvdash$</td>
<td align="center"><code>$\nvdash$</code></td>
</tr>
<tr>
<td align="center">$\precneqq$</td>
<td align="center"><code>$\precneqq$</code></td>
<td align="center">$\succneqq$</td>
<td align="center"><code>$\succneqq$</code></td>
<td align="center">$\nvDash$</td>
<td align="center"><code>$\nvDash$</code></td>
</tr>
<tr>
<td align="center">$\precnsim$</td>
<td align="center"><code>$\precnsim$</code></td>
<td align="center">$\succnsim$</td>
<td align="center"><code>$\succnsim$</code></td>
<td align="center">$\nVdash$</td>
<td align="center"><code>$\nVdash$</code></td>
</tr>
<tr>
<td align="center">$\precnapprox$</td>
<td align="center"><code>$\precnapprox$</code></td>
<td align="center">$\succnapprox$</td>
<td align="center"><code>$\succnapprox$</code></td>
<td align="center">$\nVDash$</td>
<td align="center"><code>$\nVDash$</code></td>
</tr>
<tr>
<td align="center">$\subsetneq$</td>
<td align="center"><code>$\subsetneq$</code></td>
<td align="center">$\supsetneq$</td>
<td align="center"><code>$\supsetneq$</code></td>
<td align="center">$\ntriangleleft$</td>
<td align="center"><code>$\ntriangleleft$</code></td>
</tr>
<tr>
<td align="center">$\varsubsetneq$</td>
<td align="center"><code>$\varsubsetneq$</code></td>
<td align="center">$\varsupsetneq$</td>
<td align="center"><code>$\varsupsetneq$</code></td>
<td align="center">$\ntriangleright$</td>
<td align="center"><code>$\ntriangleright$</code></td>
</tr>
<tr>
<td align="center">$\nsubseteq$</td>
<td align="center"><code>$\nsubseteq$</code></td>
<td align="center">$\nsupseteq$</td>
<td align="center"><code>$\nsupseteq$</code></td>
<td align="center">$\ntrianglelefteq$</td>
<td align="center"><code>$\ntrianglelefteq$</code></td>
</tr>
<tr>
<td align="center">$\subsetneqq$</td>
<td align="center"><code>$\subsetneqq$</code></td>
<td align="center">$\supsetneqq$</td>
<td align="center"><code>$\supsetneqq$</code></td>
<td align="center">$\ntrianglerighteq$</td>
<td align="center"><code>$\ntrianglerighteq$</code></td>
</tr>
<tr>
<td align="center">$\nleftarrow$</td>
<td align="center"><code>$\nleftarrow$</code></td>
<td align="center">$\nrightarrow$</td>
<td align="center"><code>$\nrightarrow$</code></td>
<td align="center">$\nleftrightarrow$</td>
<td align="center"><code>$\nleftrightarrow$</code></td>
</tr>
<tr>
<td align="center">$\nLeftarrow$</td>
<td align="center"><code>$\nLeftarrow$</code></td>
<td align="center">$\nRightarrow$</td>
<td align="center"><code>$\nRightarrow$</code></td>
<td align="center">$\nLeftrightarrow$</td>
<td align="center"><code>$\nLeftrightarrow$</code></td>
</tr>
</tbody></table>
<h2 id="表15-AMS-二元运算符"><a href="#表15-AMS-二元运算符" class="headerlink" title="表15 AMS 二元运算符"></a>表15 AMS 二元运算符</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\dotplus$</td>
<td align="center"><code>$\dotplus$</code></td>
<td align="center">$\centerdot$</td>
<td align="center"><code>$\centerdot$</code></td>
<td align="center">$\intercal$</td>
<td align="center"><code>$\intercal$</code></td>
</tr>
<tr>
<td align="center">$\ltimes$</td>
<td align="center"><code>$\ltimes$</code></td>
<td align="center">$\rtimes$</td>
<td align="center"><code>$\rtimes$</code></td>
<td align="center">$\divideontimes$</td>
<td align="center"><code>$\divideontimes$</code></td>
</tr>
<tr>
<td align="center">$\Cup$</td>
<td align="center"><code>$\Cup$</code> 或 <code>$\doublecup$</code></td>
<td align="center">$\Cap$</td>
<td align="center"><code>$\Cap$</code> 或 <code>$\doublecap$</code></td>
<td align="center">$\smallsetminus$</td>
<td align="center"><code>$\smallsetminus$</code></td>
</tr>
<tr>
<td align="center">$\veebar$</td>
<td align="center"><code>$\veebar$</code></td>
<td align="center">$\barwedge$</td>
<td align="center"><code>$\barwedge$</code></td>
<td align="center">$\doublebarwedge$</td>
<td align="center"><code>$\doublebarwedge$</code></td>
</tr>
<tr>
<td align="center">$\boxplus$</td>
<td align="center"><code>$\boxplus$</code></td>
<td align="center">$\boxminus$</td>
<td align="center"><code>$\boxminus$</code></td>
<td align="center">$\circleddash$</td>
<td align="center"><code>$\circleddash$</code></td>
</tr>
<tr>
<td align="center">$\boxtimes$</td>
<td align="center"><code>$\boxtimes$</code></td>
<td align="center">$\boxdot$</td>
<td align="center"><code>$\boxdot$</code></td>
<td align="center">$\circledcirc$</td>
<td align="center"><code>$\circledcirc$</code></td>
</tr>
<tr>
<td align="center">$\leftthreetimes$</td>
<td align="center"><code>$\leftthreetimes$</code></td>
<td align="center">$\rightthreetimes$</td>
<td align="center"><code>$\rightthreetimes$</code></td>
<td align="center">$\circledast$</td>
<td align="center"><code>$\circledast$</code></td>
</tr>
<tr>
<td align="center">$\curlyvee$</td>
<td align="center"><code>$\curlyvee$</code></td>
<td align="center">$\curlywedge$</td>
<td align="center"><code>$\curlywedge$</code></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="表16-AMS-其它符号"><a href="#表16-AMS-其它符号" class="headerlink" title="表16 AMS 其它符号"></a>表16 AMS 其它符号</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\hbar$</td>
<td align="center"><code>$\hbar$</code></td>
<td align="center">$\hslash$</td>
<td align="center"><code>$\hslash$</code></td>
<td align="center">$\Bbbk$</td>
<td align="center"><code>$\Bbbk$</code></td>
</tr>
<tr>
<td align="center">$\square$</td>
<td align="center"><code>$\square$</code></td>
<td align="center">$\blacksquare$</td>
<td align="center"><code>$\blacksquare$</code></td>
<td align="center">$\circledS$</td>
<td align="center"><code>$\circledS$</code></td>
</tr>
<tr>
<td align="center">$\vartriangle$</td>
<td align="center"><code>$\vartriangle$</code></td>
<td align="center">$\blacktriangle$</td>
<td align="center"><code>$\blacktriangle$</code></td>
<td align="center">$\complement$</td>
<td align="center"><code>$\complement$</code></td>
</tr>
<tr>
<td align="center">$\triangledown$</td>
<td align="center"><code>$\triangledown$</code></td>
<td align="center">$\blacktriangledown$</td>
<td align="center"><code>$\blacktriangledown$</code></td>
<td align="center">$\Game$</td>
<td align="center"><code>$\Game$</code></td>
</tr>
<tr>
<td align="center">$\lozenge$</td>
<td align="center"><code>$\lozenge$</code></td>
<td align="center">$\blacklozenge$</td>
<td align="center"><code>$\blacklozenge$</code></td>
<td align="center">$\bigstar$</td>
<td align="center"><code>$\bigstar$</code></td>
</tr>
<tr>
<td align="center">$\angle$</td>
<td align="center"><code>$\angle$</code></td>
<td align="center">$\measuredangle$</td>
<td align="center"><code>$\measuredangle$</code></td>
<td align="center">$\sphericalangle$</td>
<td align="center"><code>$\sphericalangle$</code></td>
</tr>
<tr>
<td align="center">$\diagup$</td>
<td align="center"><code>$\diagup$</code></td>
<td align="center">$\diagdown$</td>
<td align="center"><code>$\diagdown$</code></td>
<td align="center">$\backprime$</td>
<td align="center"><code>$\backprime$</code></td>
</tr>
<tr>
<td align="center">$\nexists$</td>
<td align="center"><code>$\nexists$</code></td>
<td align="center">$\Finv$</td>
<td align="center"><code>$\Finv$</code></td>
<td align="center">$\varnothing$</td>
<td align="center"><code>$\varnothing$</code></td>
</tr>
<tr>
<td align="center">$\eth$</td>
<td align="center"><code>$\eth$</code></td>
<td align="center">$\mho$</td>
<td align="center"><code>$\mho$</code></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="表17-数学字母"><a href="#表17-数学字母" class="headerlink" title="表17 数学字母"></a>表17 数学字母</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$\mathrm{ABCdef}$</td>
<td align="center"><code>$\mathrm&#123;ABCdef&#125;$</code></td>
</tr>
<tr>
<td align="center">$\mathit{ABCdef}$</td>
<td align="center"><code>$\mathit&#123;ABCdef&#125;$</code></td>
</tr>
<tr>
<td align="center">$\mathcal{ABCdef}$</td>
<td align="center"><code>$\mathcal&#123;ABCdef&#125;$</code></td>
</tr>
<tr>
<td align="center">$\mathscr{ABCdef}$</td>
<td align="center"><code>$\mathscr&#123;ABCdef&#125;$</code></td>
</tr>
<tr>
<td align="center">$\mathfrak{ABCdef}$</td>
<td align="center"><code>$\mathfrak&#123;ABCdef&#125;$</code></td>
</tr>
<tr>
<td align="center">$\mathbb{ABCdef}$</td>
<td align="center"><code>$\mathbb&#123;ABCdef&#125;$</code></td>
</tr>
</tbody></table>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.jianshu.com/p/0ea47ae02262">Markdown 中 LaTex 数学公式命令</a></p>
]]></content>
      <categories>
        <category>数学公式</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title>Boofuzz源码分析</title>
    <url>/2022/03/22/Boofuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="Boofuzz样例"><a href="#Boofuzz样例" class="headerlink" title="Boofuzz样例"></a>Boofuzz样例</h3><p>以一个TFTP Fuzzer为例，大概看一下Boofuzz的用法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> boofuzz <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    session = Session(sleep_time=<span class="number">1</span>,</span><br><span class="line">                      target=Target(connection=SocketConnection(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">69</span>,proto=<span class="string">&quot;udp&quot;</span>)))</span><br><span class="line">    s_initialize(<span class="string">&quot;write&quot;</span>)</span><br><span class="line">    s_static(<span class="string">&quot;\\x00\\x02&quot;</span>)</span><br><span class="line">    s_string(<span class="string">&quot;filename&quot;</span>)</span><br><span class="line">    s_static(<span class="string">&quot;\\x00&quot;</span>)</span><br><span class="line">    s_static(<span class="string">&quot;netascii&quot;</span>)</span><br><span class="line">    s_static(<span class="string">&quot;\\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">    session.connect(s_get(<span class="string">&#x27;write&#x27;</span>))</span><br><span class="line">    session.fuzz()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>在源码中可以看到<code>SocketConnection</code>会在未来版本中移除，现在应该使用<code>BaseSocketConnection</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">warnings.warn(</span><br><span class="line">        <span class="string">&quot;SocketConnection is deprecated and will be removed in a future version of Boofuzz. &quot;</span></span><br><span class="line">        <span class="string">&quot;Use the classes derived from BaseSocketConnection instead.&quot;</span>,</span><br><span class="line">        FutureWarning,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<p>Fuzzer的创建包含三层，Session -&gt; Target -&gt; Connection</p>
<h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>顾名思义，Connection对象是网络连接的代表，Boofuzz支持各种基于socket的连接，从源码部分就可以看到，常用的还是TCP和UDP，这里还支持网络协议栈中2层和3层的原生Socket。</p>
<img src="/2022/03/22/Boofuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/connection.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SocketConnection</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    host,</span></span></span><br><span class="line"><span class="function"><span class="params">    port=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    proto=<span class="string">&quot;tcp&quot;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    bind=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    send_timeout=<span class="number">5.0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    recv_timeout=<span class="number">5.0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    ethernet_proto=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    l2_dst=<span class="string">b&quot;\xFF&quot;</span> * <span class="number">6</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    udp_broadcast=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    server=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    sslcontext=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    server_hostname=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>):</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    warnings.warn(</span><br><span class="line">        <span class="string">&quot;SocketConnection is deprecated and will be removed in a future version of Boofuzz. &quot;</span></span><br><span class="line">        <span class="string">&quot;Use the classes derived from BaseSocketConnection instead.&quot;</span>,</span><br><span class="line">        FutureWarning,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> proto <span class="keyword">not</span> <span class="keyword">in</span> _PROTOCOLS:</span><br><span class="line">        <span class="keyword">raise</span> exception.SullyRuntimeError(<span class="string">&quot;INVALID PROTOCOL SPECIFIED: %s&quot;</span> % proto)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> proto <span class="keyword">in</span> _PROTOCOLS_PORT_REQUIRED <span class="keyword">and</span> port <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;__init__() argument port required for protocol &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(proto))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> proto == <span class="string">&quot;udp&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> udp_socket_connection.UDPSocketConnection(</span><br><span class="line">            host, port, send_timeout, recv_timeout, server, bind, udp_broadcast</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">elif</span> proto == <span class="string">&quot;tcp&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> tcp_socket_connection.TCPSocketConnection(host, port, send_timeout, recv_timeout, server)</span><br><span class="line">    <span class="keyword">elif</span> proto == <span class="string">&quot;ssl&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> ssl_socket_connection.SSLSocketConnection(</span><br><span class="line">            host, port, send_timeout, recv_timeout, server, sslcontext, server_hostname</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">elif</span> proto == <span class="string">&quot;raw-l2&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> raw_l2_socket_connection.RawL2SocketConnection(host, send_timeout, recv_timeout)</span><br><span class="line">    <span class="keyword">elif</span> proto == <span class="string">&quot;raw-l3&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> ethernet_proto <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            ethernet_proto = raw_l3_socket_connection.ETH_P_IP</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> raw_l3_socket_connection.RawL3SocketConnection(host, send_timeout, recv_timeout, ethernet_proto, l2_dst)</span><br></pre></td></tr></table></figure>

<p>在<code>SocketConnection</code>函数中根据我们传入的proto参数来调用响应Connection类的构造函数。</p>
<p>以<code>TCPSocketConnection</code>为例,其继承自<code>BaseSocketConnection</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TCPSocketConnection</span>(<span class="params">base_socket_connection.BaseSocketConnection</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;BaseSocketConnection implementation for use with TCP Sockets.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionadded:: 0.2.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        host (str): Hostname or IP adress of target system.</span></span><br><span class="line"><span class="string">        port (int): Port of target service.</span></span><br><span class="line"><span class="string">        send_timeout (float): Seconds to wait for send before timing out. Default 5.0.</span></span><br><span class="line"><span class="string">        recv_timeout (float): Seconds to wait for recv before timing out. Default 5.0.</span></span><br><span class="line"><span class="string">        server (bool): Set to True to enable server side fuzzing.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, port, send_timeout=<span class="number">5.0</span>, recv_timeout=<span class="number">5.0</span>, server=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(TCPSocketConnection, self).__init__(send_timeout, recv_timeout)</span><br><span class="line"></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.server = server</span><br><span class="line">        self._serverSock = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p><code>BaseSocketConnection</code>是一个继承了<code>itarget_connection.ITargetConnection</code>接口的抽象基类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseSocketConnection</span>(<span class="params">with_metaclass(<span class="params">abc.ABCMeta, itarget_connection.ITargetConnection</span>)</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;This class serves as a base for a number of Connections over sockets.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionadded:: 0.2.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        send_timeout (float): Seconds to wait for send before timing out. Default 5.0.</span></span><br><span class="line"><span class="string">        recv_timeout (float): Seconds to wait for recv before timing out. Default 5.0.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, send_timeout, recv_timeout</span>):</span></span><br><span class="line">        self._send_timeout = send_timeout</span><br><span class="line">        self._recv_timeout = recv_timeout</span><br><span class="line"></span><br><span class="line">        self._sock = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Close connection to the target.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._sock.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Opens connection to the target. Make sure to call close!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDTIMEO, _seconds_to_sockopt_format(self._send_timeout))</span><br><span class="line">        self._sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVTIMEO, _seconds_to_sockopt_format(self._recv_timeout))</span><br></pre></td></tr></table></figure>



<h4 id="python元类编程"><a href="#python元类编程" class="headerlink" title="python元类编程"></a>python元类编程</h4><p>抽象类和接口都是面向对象里面的概念，抽象类是指一类<strong>不可直接实例化，只可被继承</strong>的类，接口则定义了继承接口的类必须实现的方法。python是没有这两个概念相关的关键字的，在python中，抽象类是以抽象基类的方式实现的(Abstract Base Classes, ABC)。</p>
<p>ABC中提供了<code>@abstractmethod</code>装饰器来指定抽象方法,下面代码中定义了一个抽象类C，并且定义了三个抽象方法，D类则是继承抽象类C然后实现了他的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">metaclass=abc.ABCMeta</span>):</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span>(<span class="params">self</span>):</span> <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clsa</span>(<span class="params">cls</span>):</span> <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stca</span>():</span> <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="params">C</span>):</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;property: a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clsa</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;classmethod clsa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stca</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;staticmethod stca&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">d = D()</span><br><span class="line">d.a</span><br><span class="line"><span class="comment"># property: a</span></span><br><span class="line">d.clsa()</span><br><span class="line"><span class="comment"># classmethod clsa</span></span><br><span class="line">d.stca()</span><br><span class="line"><span class="comment"># staticmethod stca</span></span><br></pre></td></tr></table></figure>

<p>这里<code>BaseSocketConnection</code>的定义中用到了<code>with_metaclass</code>来创建这个类。</p>
<p><a href="https://stackoverflow.com/questions/18513821/python-metaclass-understanding-the-with-metaclass">Python Metaclass : Understanding the ‘with_metaclass()’ - Stack Overflow</a></p>
<p>这里引入<code>with_metaclass</code>是为了兼容python2和python3，在我的python3.8上<code>with_metaclass</code>如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_metaclass</span>(<span class="params">meta, *bases</span>):</span></span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">metaclass</span>(<span class="params">meta</span>):</span></span><br><span class="line">        __call__ = <span class="built_in">type</span>.__call__</span><br><span class="line">        __init__ = <span class="built_in">type</span>.__init__</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, name, this_bases, d</span>):</span></span><br><span class="line">            <span class="keyword">if</span> this_bases <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls, name, (), d)</span><br><span class="line">            <span class="keyword">return</span> meta(name, bases, d)</span><br><span class="line">    <span class="keyword">return</span> metaclass(<span class="string">&#x27;temporary_class&#x27;</span>, <span class="literal">None</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>根据<code>BaseSocketConnection</code>传入的参数，这里meta是<code>ABCmeta</code>，bases是<code>ITargetConnection</code>，这里是定义了一个临时元类metaclass继承自ABCmeta，并重写了其new方法，这样下面return时，就会依次调用其new和init方法来新建一个对象，而元类创建的是一个类，因此结果是一个基类为bases的抽象类，然后BaseSocketConnection就继承自它。这里具体的调试过程没搞明白。</p>
<p>总之这里BaseSocketConnection继承了ITargetConnection的接口，并且定义了一些基本方法，如open、send、recv、close以及关于延时的变量等。</p>
<h4 id="TCPSocketConnection"><a href="#TCPSocketConnection" class="headerlink" title="TCPSocketConnection"></a>TCPSocketConnection</h4><p>具体的TCPSocket的实现。</p>
<h5 id="open"><a href="#open" class="headerlink" title="open"></a>open</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open</span>(<span class="params">self</span>):</span></span><br><span class="line">    self._open_socket()</span><br><span class="line">    self._connect_socket()</span><br></pre></td></tr></table></figure>



<h5 id="open-socket函数"><a href="#open-socket函数" class="headerlink" title="open_socket函数"></a>open_socket函数</h5><p>就是创建一个socket。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_open_socket</span>(<span class="params">self</span>):</span></span><br><span class="line">    self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># call superclass to set timeout sockopt</span></span><br><span class="line">    <span class="built_in">super</span>(TCPSocketConnection, self).<span class="built_in">open</span>()</span><br></pre></td></tr></table></figure>



<h5 id="connect-socket函数"><a href="#connect-socket函数" class="headerlink" title="connect_socket函数"></a>connect_socket函数</h5><p>这里可以看到boofuzz支持server被连接的模式，server只会接受一个连接。如果是多连接的场景，需要自己修改对应逻辑，主动连接同理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_connect_socket</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment">#server模式</span></span><br><span class="line">    <span class="keyword">if</span> self.server:</span><br><span class="line">        self._sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._sock.bind((self.host, self.port))</span><br><span class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> e.errno == errno.EADDRINUSE:</span><br><span class="line">                <span class="keyword">raise</span> exception.BoofuzzOutOfAvailableSockets()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">        self._serverSock = self._sock</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#只会接受一个连接</span></span><br><span class="line">            self._serverSock.listen(<span class="number">1</span>)</span><br><span class="line">            self._sock, addr = self._serverSock.accept()</span><br><span class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># When connection timeout expires, tear down the server socket so we can re-open it again after</span></span><br><span class="line">            <span class="comment"># restarting the target.</span></span><br><span class="line">            self.close()</span><br><span class="line">            <span class="keyword">if</span> e.errno <span class="keyword">in</span> [errno.EAGAIN]:</span><br><span class="line">                <span class="keyword">raise</span> exception.BoofuzzTargetConnectionFailedError(<span class="built_in">str</span>(e))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">    <span class="comment">#主动连接</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._sock.connect((self.host, self.port))</span><br><span class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> e.errno == errno.EADDRINUSE:</span><br><span class="line">                <span class="keyword">raise</span> exception.BoofuzzOutOfAvailableSockets()</span><br><span class="line">            <span class="keyword">elif</span> e.errno <span class="keyword">in</span> [errno.ECONNREFUSED, errno.EINPROGRESS, errno.ETIMEDOUT]:</span><br><span class="line">                <span class="keyword">raise</span> exception.BoofuzzTargetConnectionFailedError(<span class="built_in">str</span>(e))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br></pre></td></tr></table></figure>



<h5 id="send"><a href="#send" class="headerlink" title="send"></a>send</h5><p>向目标发送数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        num_sent = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            num_sent = self._sock.send(data)</span><br><span class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> e.errno == errno.ECONNABORTED:</span><br><span class="line">                raise_(</span><br><span class="line">                    exception.BoofuzzTargetConnectionAborted(socket_errno=e.errno, socket_errmsg=e.strerror),</span><br><span class="line">                    <span class="literal">None</span>,</span><br><span class="line">                    sys.exc_info()[<span class="number">2</span>],</span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">elif</span> e.errno <span class="keyword">in</span> [errno.ECONNRESET, errno.ENETRESET, errno.ETIMEDOUT, errno.EPIPE]:</span><br><span class="line">                raise_(exception.BoofuzzTargetConnectionReset(), <span class="literal">None</span>, sys.exc_info()[<span class="number">2</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> num_sent</span><br></pre></td></tr></table></figure>



<h5 id="recv"><a href="#recv" class="headerlink" title="recv"></a>recv</h5><p>这里可以设定最大接受字节数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv</span>(<span class="params">self, max_bytes</span>):</span></span><br><span class="line">        data = <span class="string">b&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = self._sock.recv(max_bytes)</span><br><span class="line">        <span class="keyword">except</span> socket.timeout:</span><br><span class="line">            data = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> e.errno == errno.ECONNABORTED:</span><br><span class="line">                raise_(</span><br><span class="line">                    exception.BoofuzzTargetConnectionAborted(socket_errno=e.errno, socket_errmsg=e.strerror),</span><br><span class="line">                    <span class="literal">None</span>,</span><br><span class="line">                    sys.exc_info()[<span class="number">2</span>],</span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">elif</span> (e.errno == errno.ECONNRESET) <span class="keyword">or</span> (e.errno == errno.ENETRESET) <span class="keyword">or</span> (e.errno == errno.ETIMEDOUT):</span><br><span class="line">                raise_(exception.BoofuzzTargetConnectionReset(), <span class="literal">None</span>, sys.exc_info()[<span class="number">2</span>])</span><br><span class="line">            <span class="keyword">elif</span> e.errno == errno.EWOULDBLOCK:  <span class="comment"># timeout condition if using SO_RCVTIMEO or SO_SNDTIMEO</span></span><br><span class="line">                data = <span class="string">b&quot;&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>

<p>可以看出Connection这层就已经实现了连接的建立以及数据的收发相关的功能。</p>
<h3 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Target</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Target descriptor container.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Takes an ITargetConnection and wraps send/recv with appropriate</span></span><br><span class="line"><span class="string">    FuzzDataLogger calls.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>Target注释部分也说了，Target对象主要是在<code>Connection</code>的接口上wrap上log。可以看到Target的send函数，除了加的repeater功能，基本上就是添加了log。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Opens connection to the target. Make sure to call close!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    self._fuzz_data_logger.log_info(<span class="string">&quot;Opening target connection (&#123;0&#125;)...&quot;</span>.<span class="built_in">format</span>(self._target_connection.info))</span><br><span class="line">    self._target_connection.<span class="built_in">open</span>()</span><br><span class="line">    self._fuzz_data_logger.log_info(<span class="string">&quot;Connection opened.&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">self, data</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Send data to the target. Only valid after calling open!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data: Data to send.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    num_sent = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> self._fuzz_data_logger <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        repeat = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.repeater <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            repeat = <span class="string">&quot;, &quot;</span> + self.repeater.log_message()</span><br><span class="line"></span><br><span class="line">        self._fuzz_data_logger.log_info(<span class="string">&quot;Sending &#123;0&#125; bytes&#123;1&#125;...&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(data), repeat))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.repeater <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        self.repeater.start()</span><br><span class="line">        <span class="keyword">while</span> self.repeater.repeat():</span><br><span class="line">            num_sent = self._target_connection.send(data=data)</span><br><span class="line">        self.repeater.reset()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num_sent = self._target_connection.send(data=data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self._fuzz_data_logger <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        self._fuzz_data_logger.log_send(data[:num_sent])</span><br></pre></td></tr></table></figure>

<p>另外Target中还有一些Monitor的初始化工作，后面再说，Target中提供了设置Logger的接口函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_fuzz_data_logger</span>(<span class="params">self, fuzz_data_logger</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Set this object&#x27;s fuzz data logger -- for sent and received fuzz data.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param fuzz_data_logger: New logger.</span></span><br><span class="line"><span class="string">    :type fuzz_data_logger: ifuzz_logger.IFuzzLogger</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    self._fuzz_data_logger = fuzz_data_logger</span><br></pre></td></tr></table></figure>

<p>在session中会调用这个函数来添加logger，默认是<code>FuzzLoggerText</code>。</p>
<h3 id="Session-Logger部分"><a href="#Session-Logger部分" class="headerlink" title="Session Logger部分"></a>Session Logger部分</h3><p>Session对象可以看成fuzzer的后端对象，其参数基本上就是涉及到fuzz控制的各种粒度，其函数基本上就是fuzz过程了。fuzz过程后面再分析，这里先看下上面余留的logger部分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span>(<span class="params">pgraph.Graph</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">args</span>):</span></span><br><span class="line">        <span class="keyword">if</span> fuzz_loggers <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            fuzz_loggers = []</span><br><span class="line">            <span class="keyword">if</span> self.console_gui <span class="keyword">and</span> os.name != <span class="string">&quot;nt&quot;</span>:</span><br><span class="line">                fuzz_loggers.append(fuzz_logger_curses.FuzzLoggerCurses(web_port=self.web_port))</span><br><span class="line">                self._keep_web_open = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                fuzz_loggers = [fuzz_logger_text.FuzzLoggerText()]</span><br></pre></td></tr></table></figure>

<p>如果<code>fuzz_loggers</code>没指定的话，这里就设置成<code>FuzzLoggerText</code>，而<code>FuzzLoggerText</code>默认会设置为标注输出，因此就形成了打印到终端，所以如果想输出到文件，就可以set自己new的FuzzLoggerText，并设置其file_handle为文件句柄。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FuzzLoggerText</span>(<span class="params">ifuzz_logger_backend.IFuzzLoggerBackend</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, file_handle=sys.stdout, bytes_to_str=DEFAULT_HEX_TO_STR</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type file_handle: io.BinaryIO</span></span><br><span class="line"><span class="string">        :param file_handle: Open file handle for logging. Defaults to sys.stdout.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type bytes_to_str: function</span></span><br><span class="line"><span class="string">        :param bytes_to_str: Function that converts sent/received bytes data to string for logging.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._file_handle = file_handle</span><br><span class="line">        self._format_raw_bytes = bytes_to_str</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_print_log_msg</span>(<span class="params">self, msg_type, msg=<span class="literal">None</span>, data=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            helpers.format_log_msg(msg_type=msg_type, description=msg, data=data, indent_size=self.INDENT_SIZE),</span><br><span class="line">            file=self._file_handle,</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>



<h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><p>boofuzz是基于格式的，因此在开始fuzz前需要先定义目标数据格式。boofuzz有两种数据定义的方式：Static Protocol Definition(old) 和 Protocol Definition(new) 。这两种数据定义的方式只是接口不同，其内部存储的格式是类似的，而且每种基本都够用了，所以这里只分析下Static Protocol Definition。</p>
<p><a href="https://boofuzz.readthedocs.io/en/stable/user/static-protocol-definition.html">Static Protocol Definition — boofuzz 0.4.0 documentation</a></p>
<p><a href="https://boofuzz.readthedocs.io/en/stable/user/protocol-definition.html">Protocol Definition — boofuzz 0.4.0 documentation</a></p>
<p>数据分成三个层次，Requests是发出的message，Blocks来组成message，Primitives(原语)是组成block的元素(字节、字符串、数字、校验和等)。</p>
<h4 id="s-initialize"><a href="#s-initialize" class="headerlink" title="s_initialize"></a>s_initialize</h4><p><code>s_initialize</code>会创建一个request，我们需要提供一个name来标识这个request，新建的request会被加到<code>REQUESTS</code>中，并设置为当前操作的Request。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s_initialize</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Initialize a new block request. All blocks / primitives generated after this call apply to the named request.</span></span><br><span class="line"><span class="string">    Use s_switch() to jump between factories.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type  name: str</span></span><br><span class="line"><span class="string">    :param name: Name of request</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">in</span> blocks.REQUESTS:</span><br><span class="line">        <span class="keyword">raise</span> exception.SullyRuntimeError(<span class="string">&quot;blocks.REQUESTS ALREADY EXISTS: %s&quot;</span> % name)</span><br><span class="line">		<span class="comment">#REQUESTS是全局字典，这里向其添加个request</span></span><br><span class="line">    blocks.REQUESTS[name] = Request(name)</span><br><span class="line">    <span class="comment">#同时将新建的设置为当前操作的request</span></span><br><span class="line">    blocks.CURRENT = blocks.REQUESTS[name]</span><br></pre></td></tr></table></figure>



<h4 id="Session-init"><a href="#Session-init" class="headerlink" title="Session.init"></a>Session.init</h4><p>Session中创建根结点，用户可以指定一些initial requests：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对图初始化，新建一个root节点</span></span><br><span class="line"> self.root = pgraph.Node()</span><br><span class="line"> self.root.label = <span class="string">&quot;__ROOT_NODE__&quot;</span></span><br><span class="line"> self.root.name = self.root.label</span><br><span class="line"> self.last_recv = <span class="literal">None</span></span><br><span class="line"> self.last_send = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"> self.add_node(self.root)</span><br><span class="line">  <span class="comment">#把传进来的target加到target数组中</span></span><br><span class="line"> <span class="keyword">if</span> target <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">apply_options</span>(<span class="params">monitor</span>):</span></span><br><span class="line">         monitor.set_options(crash_filename=self._crash_filename)</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">     target.monitor_alive.append(apply_options)</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span>:</span><br><span class="line">         self.add_target(target)</span><br><span class="line">     <span class="keyword">except</span> exception.BoofuzzRpcError <span class="keyword">as</span> e:</span><br><span class="line">         self._fuzz_data_logger.log_error(<span class="built_in">str</span>(e))</span><br><span class="line">         <span class="keyword">raise</span></span><br></pre></td></tr></table></figure>



<h4 id="s-get、s-switch"><a href="#s-get、s-switch" class="headerlink" title="s_get、s_switch"></a>s_get、s_switch</h4><p>网络协议一般是各种Request的状态转移图，Boofuzz也支持建立这种图。我们可以再次调用s_initialize来创建一个新的Request，通过s_get可以在不同的Request直接切换，从而改变当前操作的对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s_get</span>(<span class="params">name=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> name:</span><br><span class="line">        <span class="keyword">return</span> blocks.CURRENT</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ensure this gotten request is the new current.</span></span><br><span class="line">    s_switch(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> blocks.REQUESTS:</span><br><span class="line">        <span class="keyword">raise</span> exception.SullyRuntimeError(<span class="string">&quot;blocks.REQUESTS NOT FOUND: %s&quot;</span> % name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> blocks.REQUESTS[name]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s_switch</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Change the current request to the one specified by &quot;name&quot;.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type  name: str</span></span><br><span class="line"><span class="string">    :param name: Name of request</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> blocks.REQUESTS:</span><br><span class="line">        <span class="keyword">raise</span> exception.SullyRuntimeError(<span class="string">&quot;blocks.REQUESTS NOT FOUND: %s&quot;</span> % name)</span><br><span class="line">		<span class="comment">#将name的Request设置为CURRENT</span></span><br><span class="line">    blocks.CURRENT = blocks.REQUESTS[name]</span><br></pre></td></tr></table></figure>



<h4 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h4><p>connect是连边，即在两个Node(Request)上连边。只填一个参数的话，就是默认把提供的参数node连到root上，node就是Request对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span>(<span class="params">self, src, dst=<span class="literal">None</span>, callback=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="comment"># if only a source was provided, then make it the destination and set the source to the root node.</span></span><br><span class="line">        <span class="keyword">if</span> dst <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment">#dst不指定就是从 root连接到src</span></span><br><span class="line">            dst = src</span><br><span class="line">            src = self.root</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if source or destination is a name, resolve the actual node.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(src, six.string_types):</span><br><span class="line">            src = self.find_node(<span class="string">&quot;name&quot;</span>, src)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(dst, six.string_types):</span><br><span class="line">            dst = self.find_node(<span class="string">&quot;name&quot;</span>, dst)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if source or destination is not in the graph, add it.</span></span><br><span class="line">        <span class="keyword">if</span> src != self.root <span class="keyword">and</span> self.find_node(<span class="string">&quot;name&quot;</span>, src.name) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.add_node(src)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.find_node(<span class="string">&quot;name&quot;</span>, dst.name) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.add_node(dst)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create an edge between the two nodes and add it to the graph.</span></span><br><span class="line">        edge = Connection(src.<span class="built_in">id</span>, dst.<span class="built_in">id</span>, callback)  <span class="comment">#建边</span></span><br><span class="line">        self.add_edge(edge)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> edge</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_node</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Add a pgraph node to the graph. We overload this routine to automatically generate and assign an ID whenever a</span></span><br><span class="line"><span class="string">        node is added.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            node (pgraph.Node): Node to add to session graph</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        node.number = <span class="built_in">len</span>(self.nodes)</span><br><span class="line">        node.<span class="built_in">id</span> = <span class="built_in">len</span>(self.nodes)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.<span class="built_in">id</span> <span class="keyword">not</span> <span class="keyword">in</span> self.nodes:</span><br><span class="line">            self.nodes[node.<span class="built_in">id</span>] = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure>

<p>这个 Connection 就是继承自最朴素的Edge(边)，只不过其提供了一个callback参数，这个会在状态转移的时候调用，因此可以添加一些自定义的功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span>(<span class="params">pgraph.Edge</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, src, dst, callback=<span class="literal">None</span></span>):</span></span><br><span class="line">		    <span class="built_in">super</span>(Connection, self).__init__(src, dst)</span><br><span class="line"></span><br><span class="line">        self.callback = callback</span><br></pre></td></tr></table></figure>

<p>状态图案例：</p>
<img src="/2022/03/22/Boofuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/connect_graph.png" class="">

<p>创建完Request之后，接下来就是向里面添加Primitives，根据数据类型划分出多个添加函数，首先看string类型的函数s_string。</p>
<h4 id="s-string"><a href="#s-string" class="headerlink" title="s_string"></a>s_string</h4><p>函数中新建String对象后，通过Request的push函数填充到request中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s_string</span>(<span class="params">value=<span class="string">&quot;&quot;</span>, size=<span class="literal">None</span>, padding=<span class="string">b&quot;\x00&quot;</span>, encoding=<span class="string">&quot;ascii&quot;</span>, fuzzable=<span class="literal">True</span>, max_len=<span class="literal">None</span>, name=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># support old interface where default was -1 instead of None</span></span><br><span class="line">    <span class="keyword">if</span> size == -<span class="number">1</span>:</span><br><span class="line">        size = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> max_len == -<span class="number">1</span>:</span><br><span class="line">        max_len = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    blocks.CURRENT.push(</span><br><span class="line">        String(</span><br><span class="line">            name=name,</span><br><span class="line">            default_value=value,</span><br><span class="line">            size=size,</span><br><span class="line">            padding=padding,</span><br><span class="line">            encoding=encoding,</span><br><span class="line">            max_len=max_len,</span><br><span class="line">            fuzzable=fuzzable,</span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>



<h4 id="Request-push"><a href="#Request-push" class="headerlink" title="Request.push"></a>Request.push</h4><p>1.首先给传进来的item也就是Primitive添加一些环境信息：</p>
<p> (1)context_path: 调用<code>_generate_context_path</code>产生的字符串，<code>_generate_context_path</code>是将<code>block_stack</code>中的字符串全部拼接在一起产生路径字符串，用于标记item的位置；</p>
<p> (2)设置item的request为当前request。</p>
<p>2.检查item的<code>qualified_name</code>是否重复，判断是否将item加入到names map中；</p>
<p>3.如果当前request还没有block，<code>block_stack</code>就为空，就将item插入到request的stack中；如果<code>block_stack</code>不为空，就相当于现在还在组建block，就把item插入到栈顶的block中；</p>
<p>4.如果item是block，会先把block插入到stack中，然后插入到<code>block_stack</code>中作为当前的<code>open_block</code>,接下来的primitive都会插入到该block里面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, item</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Push an item into the block structure. If no block is open, the item goes onto the request stack. otherwise,</span></span><br><span class="line"><span class="string">    the item goes onto the last open blocks stack.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    What this method does:</span></span><br><span class="line"><span class="string">    1. Sets context_path for each pushed FuzzableWrapper.</span></span><br><span class="line"><span class="string">    2. Sets request for each FuzzableWrapper</span></span><br><span class="line"><span class="string">    3. Checks for duplicate qualified_name items</span></span><br><span class="line"><span class="string">    4. Adds item to self.names map (based on qualified_name)</span></span><br><span class="line"><span class="string">    5. Adds the item to self.stack, or to the stack of the currently opened block.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Also: Manages block_stack, mostly an implementation detail to help static protocol definition</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @type item: BasePrimitive | Block | Request | Size | Repeat</span></span><br><span class="line"><span class="string">    @param item: Some primitive/block/request/etc.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    item.context_path = self._generate_context_path(self.block_stack)</span><br><span class="line">    item.request = self</span><br><span class="line">    <span class="comment"># ensure the name doesn&#x27;t already exist.</span></span><br><span class="line">    <span class="keyword">if</span> item.qualified_name <span class="keyword">in</span> <span class="built_in">list</span>(self.names):</span><br><span class="line">        <span class="keyword">raise</span> exception.SullyRuntimeError(<span class="string">&quot;BLOCK NAME ALREADY EXISTS: %s&quot;</span> % item.qualified_name)</span><br><span class="line"></span><br><span class="line">    self.names[item.qualified_name] = item</span><br><span class="line"></span><br><span class="line">    <span class="comment"># if there are no open blocks, the item gets pushed onto the request stack.</span></span><br><span class="line">    <span class="comment"># otherwise, the pushed item goes onto the stack of the last opened block.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.block_stack:</span><br><span class="line">        self.stack.append(item)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.block_stack[-<span class="number">1</span>].push(item)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add the opened block to the block stack.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, Block) <span class="keyword">or</span> <span class="built_in">isinstance</span>(item, Aligned):  <span class="comment"># TODO generic check here</span></span><br><span class="line">        self.block_stack.append(item)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_generate_context_path</span>(<span class="params">self, block_stack</span>):</span></span><br><span class="line">    context_path = <span class="string">&quot;.&quot;</span>.join(x.name <span class="keyword">for</span> x <span class="keyword">in</span> block_stack)  <span class="comment"># TODO put in method</span></span><br><span class="line">    context_path = <span class="string">&quot;.&quot;</span>.join(<span class="built_in">filter</span>(<span class="literal">None</span>, (self.name, context_path)))</span><br><span class="line">    <span class="keyword">return</span> context_path</span><br></pre></td></tr></table></figure>



<h4 id="block"><a href="#block" class="headerlink" title="block"></a>block</h4><p>根据doc，有两种插入block的方式：<code>startend</code>和<code>with</code>模式。</p>
<h5 id="startend方式"><a href="#startend方式" class="headerlink" title="startend方式"></a>startend方式</h5><p><code>s_block_start </code>初始化一个block，并将其push。</p>
<p><code>s_block_close </code>关闭这个block，说明数据已经填充完毕了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> s_block_start(<span class="string">&quot;header&quot;</span>):</span><br><span class="line">    s_static(<span class="string">&quot;\x00\x01&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> s_block_start(<span class="string">&quot;body&quot;</span>):</span><br><span class="line">        ...</span><br><span class="line">s_block_end()</span><br></pre></td></tr></table></figure>

<p><code>s_block_start</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s_block_start</span>(<span class="params">name=<span class="literal">None</span>, *args, **kwargs</span>):</span></span><br><span class="line">    block = Block(name=name, *args, **kwargs)</span><br><span class="line">    blocks.CURRENT.push(block)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> block</span><br></pre></td></tr></table></figure>

<p><code>s_block_end</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s_block_end</span>(<span class="params">name=<span class="literal">None</span></span>):</span></span><br><span class="line">    blocks.CURRENT.pop()</span><br></pre></td></tr></table></figure>



<h5 id="with方式"><a href="#with方式" class="headerlink" title="with方式"></a>with方式</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> s_block(<span class="string">&quot;header&quot;</span>):</span><br><span class="line">    s_static(<span class="string">&quot;\x00\x01&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> s_block_start(<span class="string">&quot;body&quot;</span>):</span><br></pre></td></tr></table></figure>

<p>with方式能用是因为<code>s_block</code>中调用的是<code>s_block_start</code>插入block，但是返回的是个<code>ScopedBlock</code>对象，这个对象注册了<strong>exit</strong>方法。</p>
<p>当with范围结束时，就会调用<code>s_block_end</code>方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s_block</span>(<span class="params">name=<span class="literal">None</span>, group=<span class="literal">None</span>, encoder=<span class="literal">None</span>, dep=<span class="literal">None</span>, dep_value=<span class="literal">None</span>, dep_values=<span class="literal">None</span>, dep_compare=<span class="string">&quot;==&quot;</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ScopedBlock</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, block</span>):</span></span><br><span class="line">            self.block = block</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            Setup before entering the &quot;with&quot; statement body</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> self.block</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, <span class="built_in">type</span>, value, traceback</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            Cleanup after executing the &quot;with&quot; statement body</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># Automagically close the block when exiting the &quot;with&quot; statement</span></span><br><span class="line">            s_block_end()</span><br><span class="line"></span><br><span class="line">    block = s_block_start(</span><br><span class="line">        name,</span><br><span class="line">        request=blocks.CURRENT,</span><br><span class="line">        group=group,</span><br><span class="line">        encoder=encoder,</span><br><span class="line">        dep=dep,</span><br><span class="line">        dep_value=dep_value,</span><br><span class="line">        dep_values=dep_values,</span><br><span class="line">        dep_compare=dep_compare,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ScopedBlock(block)</span><br></pre></td></tr></table></figure>



<h3 id="start-fuzz"><a href="#start-fuzz" class="headerlink" title="start fuzz"></a>start fuzz</h3><h4 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h4><p>fuzz开始于fuzz函数，传入一个request的name的话就只会fuzz这个request，不传就会按建立的图去遍历着fuzz。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuzz</span>(<span class="params">self, name=<span class="literal">None</span>, max_depth=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Fuzz the entire protocol tree.</span></span><br><span class="line"><span class="string">    Iterates through and fuzzes all fuzz cases, skipping according to</span></span><br><span class="line"><span class="string">    self.skip and restarting based on self.restart_interval.</span></span><br><span class="line"><span class="string">    If you want the web server to be available, your program must persist</span></span><br><span class="line"><span class="string">    after calling this method. helpers.pause_for_signal() is</span></span><br><span class="line"><span class="string">    available to this end.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        name (str): Pass in a Request name to fuzz only a single request message. Pass in a test case name to fuzz only a single test case.</span></span><br><span class="line"><span class="string">        max_depth (int): Maximum combinatorial depth; set to 1 for &quot;simple&quot; fuzzing.</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    self.total_mutant_index = <span class="number">0</span></span><br><span class="line">    self.total_num_mutations = self.num_mutations(max_depth=max_depth)</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> name == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        self._main_fuzz_loop(self._generate_mutations_indefinitely(max_depth=max_depth))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.fuzz_by_name(name=name)</span><br></pre></td></tr></table></figure>



<h4 id="main-fuzz-loop"><a href="#main-fuzz-loop" class="headerlink" title="_main_fuzz_loop"></a>_main_fuzz_loop</h4><p>1.首先会开启一个boofuzz的可视化web server；</p>
<p>2.调用<code>_start_target</code>启动target，一般测试服务器的时候，是我们手动启动目标服务器，所以用不到这个，但是配合<code>ProcMonitor</code>我们可以设置自启动目标(Windows平台)；</p>
<p>3.记录fuzz开始时间；</p>
<p>4.开始fuzz大循环，每次循环调用<code>_fuzz_current_case</code>进行fuzz；</p>
<p>5.<code>num_cases_actually_fuzzed+1</code>，如果<code>_index_end</code>参数不为空且<code>total_mutant_index</code>&gt;=<code>_index_end</code>的话就结束fuzz；</p>
<p>6.记录fuzz结束时间。</p>
<p>这里还有个选项是<code>_reuse_target_connection</code>，即重用连接。开启这个选项后，整个大循环中只会在这里open一次连接，如果不开这个选项，每次fuzz都会重新open一次连接。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_main_fuzz_loop</span>(<span class="params">self, fuzz_case_iterator</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Execute main fuzz logic; takes an iterator of test cases.</span></span><br><span class="line"><span class="string">    Preconditions: `self.total_mutant_index` and `self.total_num_mutations` are set properly.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        fuzz_case_iterator (Iterable): An iterator that walks through fuzz cases and yields MutationContext objec</span></span><br><span class="line"><span class="string">             See _iterate_single_node() for details.</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#这里是创建线程开启一个boofuzz的可视化web端口</span></span><br><span class="line">    <span class="keyword">if</span> self.web_port <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        self.server_init()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    self._start_target(self.targets[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> self._reuse_target_connection:</span><br><span class="line">        self.targets[<span class="number">0</span>].<span class="built_in">open</span>()</span><br><span class="line">    self.num_cases_actually_fuzzed = <span class="number">0</span></span><br><span class="line">    <span class="comment">#记录fuzz开始时间</span></span><br><span class="line">    self.start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> mutation_context <span class="keyword">in</span> fuzz_case_iterator:</span><br><span class="line">        <span class="keyword">if</span> self.total_mutant_index &lt; self._index_start:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># Check restart interval</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            self.num_cases_actually_fuzzed</span><br><span class="line">            <span class="keyword">and</span> self.restart_interval</span><br><span class="line">            <span class="keyword">and</span> self.num_cases_actually_fuzzed % self.restart_interval == <span class="number">0</span></span><br><span class="line">        ):</span><br><span class="line">            self._fuzz_data_logger.open_test_step(<span class="string">&quot;restart interval of %d reached&quot;</span> % self.restart_interval)</span><br><span class="line">            self._restart_target(self.targets[<span class="number">0</span>])</span><br><span class="line">        <span class="comment">#这里开始fuzz这次</span></span><br><span class="line">        self._fuzz_current_case(mutation_context)</span><br><span class="line">        <span class="comment">#这里是记录实际进行fuzz的次数</span></span><br><span class="line">        self.num_cases_actually_fuzzed += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._index_end <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> self.total_mutant_index &gt;= self._index_end:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> self._reuse_target_connection:</span><br><span class="line">        self.targets[<span class="number">0</span>].close()</span><br><span class="line">    <span class="keyword">if</span> self._keep_web_open <span class="keyword">and</span> self.web_port <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        self.end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">&quot;\nFuzzing session completed. Keeping webinterface up on localhost:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.web_port),</span><br><span class="line">            <span class="string">&quot;\nPress ENTER to close webinterface&quot;</span>,</span><br><span class="line">        )</span><br><span class="line">        <span class="built_in">input</span>()</span><br></pre></td></tr></table></figure>



<h4 id="start-target"><a href="#start-target" class="headerlink" title="_start_target"></a>_start_target</h4><p>内部调用monitor的<code>start_target</code>来启动目标，目标启动后，调用monitor的<code>post_start_target</code>回调函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_start_target</span>(<span class="params">self, target</span>):</span></span><br><span class="line">    started = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> monitor <span class="keyword">in</span> target.monitors:</span><br><span class="line">        <span class="keyword">if</span> monitor.start_target():</span><br><span class="line">            started = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> started:</span><br><span class="line">        <span class="keyword">for</span> monitor <span class="keyword">in</span> target.monitors:</span><br><span class="line">            monitor.post_start_target(target=target, fuzz_data_logger=self._fuzz_data_logger, session=self)</span><br></pre></td></tr></table></figure>



<h4 id="fuzz-current-case"><a href="#fuzz-current-case" class="headerlink" title="_fuzz_current_case"></a>_fuzz_current_case</h4><p>1.打印一些信息；</p>
<p>2.调用<code>_open_connection_keep_trying</code>打开连接，在这里可以实现自定义的网络状态monitor；</p>
<p>3.调用<code>_pre_send</code>函数，这里会调用monitor中的<code>pre_send</code>回调函数（Session处填的<code>pre_send_callback</code>会复制到<code>CallbackMonitor</code>的<code>on_pre_send</code>中，这里pre_send就会调用它们）具体可以看后面单独对<code>CallbackMonitor</code>的分析；</p>
<p>4.调用edge的callback函数，产生callback数据；</p>
<p>5.调用<code>transmit_fuzz</code>进行测试数据的收发；</p>
<p>6.调用<code>_check_for_passively_detected_failures</code>函数检查是否发生了crash。</p>
<p>根据设置的<code>sleep_time</code>参数暂停。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_fuzz_current_case</span>(<span class="params">self, mutation_context</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Fuzzes the current test case. Current test case is controlled by</span></span><br><span class="line"><span class="string">    fuzz_case_iterator().</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        mutation_context (MutationContext): Current mutation context.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    target = self.targets[<span class="number">0</span>]</span><br><span class="line">    self._pause_if_pause_flag_is_set()</span><br><span class="line">    test_case_name = self._test_case_name(mutation_context)</span><br><span class="line">    self.current_test_case_name = test_case_name</span><br><span class="line">    self._fuzz_data_logger.open_test_case(</span><br><span class="line">        <span class="string">&quot;&#123;0&#125;: &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(self.total_mutant_index, test_case_name),</span><br><span class="line">        name=test_case_name,</span><br><span class="line">        index=self.total_mutant_index,</span><br><span class="line">        num_mutations=self.total_num_mutations,</span><br><span class="line">        current_index=self.mutant_index,</span><br><span class="line">        current_num_mutations=self.fuzz_node.get_num_mutations(),</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> self.total_num_mutations <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        self._fuzz_data_logger.log_info(</span><br><span class="line">            <span class="string">&quot;Type: &#123;0&#125;. Case &#123;1&#125; of &#123;2&#125; overall.&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                <span class="built_in">type</span>(self.fuzz_node.mutant).__name__,</span><br><span class="line">                self.total_mutant_index,</span><br><span class="line">                self.total_num_mutations,</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self._fuzz_data_logger.log_info(</span><br><span class="line">            <span class="string">&quot;Type: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                <span class="built_in">type</span>(self.fuzz_node.mutant).__name__,</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#打开连接</span></span><br><span class="line">        self._open_connection_keep_trying(target)</span><br><span class="line">        <span class="comment">#_pre_send被调用</span></span><br><span class="line">        self._pre_send(target)</span><br><span class="line">    	  <span class="comment">#这里是正常发送message_path最后一条路径前面的路径数据，这里就可以看出boofuzz是按node进行fuzz的</span></span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> mutation_context.message_path[:-<span class="number">1</span>]:</span><br><span class="line">            prev_node = self.nodes[e.src]</span><br><span class="line">            node = self.nodes[e.dst]</span><br><span class="line">            protocol_session = ProtocolSession(</span><br><span class="line">                previous_message=prev_node,</span><br><span class="line">                current_message=node,</span><br><span class="line">            )</span><br><span class="line">            mutation_context.protocol_session = protocol_session</span><br><span class="line">            callback_data = self._callback_current_node(node=node, edge=e, test_case_context=protocol_session)</span><br><span class="line">            self._fuzz_data_logger.open_test_step(<span class="string">&quot;Transmit Prep Node &#x27;&#123;0&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(node.name))</span><br><span class="line">            self.transmit_normal(target, node, e, callback_data=callback_data, mutation_context=mutation_context)</span><br><span class="line">        prev_node = self.nodes[mutation_context.message_path[-<span class="number">1</span>].src]</span><br><span class="line">        node = self.nodes[mutation_context.message_path[-<span class="number">1</span>].dst]</span><br><span class="line">        protocol_session = ProtocolSession(</span><br><span class="line">            previous_message=prev_node,</span><br><span class="line">            current_message=node,</span><br><span class="line">        )</span><br><span class="line">        mutation_context.protocol_session = protocol_session</span><br><span class="line">        <span class="comment">#这里会调用callback，同时返回一个callback数据</span></span><br><span class="line">        callback_data = self._callback_current_node(</span><br><span class="line">            node=self.fuzz_node, edge=mutation_context.message_path[-<span class="number">1</span>], test_case_context=protocol_session</span><br><span class="line">        )</span><br><span class="line">        self._fuzz_data_logger.open_test_step(<span class="string">&quot;Fuzzing Node &#x27;&#123;0&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(self.fuzz_node.name))</span><br><span class="line">        <span class="comment">#进行实际的数据发送</span></span><br><span class="line">        self.transmit_fuzz(</span><br><span class="line">            target,</span><br><span class="line">            self.fuzz_node,</span><br><span class="line">            mutation_context.message_path[-<span class="number">1</span>],</span><br><span class="line">            callback_data=callback_data,</span><br><span class="line">            mutation_context=mutation_context,</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#检查是否发生了crash</span></span><br><span class="line">        self._check_for_passively_detected_failures(target=target)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._reuse_target_connection:</span><br><span class="line">            target.close()</span><br><span class="line">        <span class="comment">#这里也提供了接口来睡眠</span></span><br><span class="line">        <span class="keyword">if</span> self.sleep_time &gt; <span class="number">0</span>:</span><br><span class="line">            self._fuzz_data_logger.open_test_step(<span class="string">&quot;Sleep between tests.&quot;</span>)</span><br><span class="line">            self._sleep(self.sleep_time)</span><br></pre></td></tr></table></figure>



<h4 id="open-connection-keep-trying"><a href="#open-connection-keep-trying" class="headerlink" title="_open_connection_keep_trying"></a>_open_connection_keep_trying</h4><p>在不开启<code>_reuse_target_connection</code>的情况下调用target的open函数，代码中已经实现了自定义的网络状态monitor。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_open_connection_keep_trying</span>(<span class="params">self, target</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Open connection and if it fails, keep retrying.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        target (Target): Target to open.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#只有不开_reuse_target_connection的时候才会open</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self._reuse_target_connection:</span><br><span class="line">        out_of_available_sockets_count = <span class="number">0</span></span><br><span class="line">        unable_to_connect_count = <span class="number">0</span></span><br><span class="line">        initial_time = time.time()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#内部就是调用target的open函数，前面已经分析了</span></span><br><span class="line">                target.<span class="built_in">open</span>()</span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># break if no exception</span></span><br><span class="line">            <span class="keyword">except</span> exception.BoofuzzTargetConnectionFailedError:</span><br><span class="line">                <span class="keyword">if</span> self.restart_threshold <span class="keyword">and</span> unable_to_connect_count &gt;= self.restart_threshold:</span><br><span class="line">                    self._fuzz_data_logger.log_info(</span><br><span class="line">                        <span class="string">&quot;Unable to reconnect to target: Reached threshold of &#123;0&#125; retries. Ending fuzzing.&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                            self.restart_threshold</span><br><span class="line">                        )</span><br><span class="line">                    )</span><br><span class="line">                    <span class="comment">#自添加代码，实现网络状态的Monitor</span></span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(self.crash_filename + <span class="string">&quot;_&quot;</span> + <span class="built_in">str</span>(self.num_cases_actually_fuzzed),<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">                        fp.write((self.current_test_case_name+<span class="string">&quot;\n&quot;</span>).encode())</span><br><span class="line">                        fp.write(self.last_send)</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">                    <span class="keyword">raise</span></span><br><span class="line">                <span class="keyword">elif</span> self.restart_timeout <span class="keyword">and</span> time.time() &gt;= initial_time + self.restart_timeout:</span><br><span class="line">                    self._fuzz_data_logger.log_info(</span><br><span class="line">                        <span class="string">&quot;Unable to reconnect to target: Reached restart timeout of &#123;0&#125;s. Ending fuzzing.&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                            self.restart_timeout</span><br><span class="line">                        )</span><br><span class="line">                    )</span><br><span class="line">                    <span class="keyword">raise</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self._fuzz_data_logger.log_info(constants.WARN_CONN_FAILED_TERMINAL)</span><br><span class="line">                    self._restart_target(target)</span><br><span class="line">                    unable_to_connect_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">except</span> exception.BoofuzzOutOfAvailableSockets:</span><br><span class="line">                out_of_available_sockets_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> out_of_available_sockets_count == <span class="number">50</span>:</span><br><span class="line">                    <span class="keyword">raise</span> exception.BoofuzzError(<span class="string">&quot;There are no available sockets. Ending fuzzing.&quot;</span>)</span><br><span class="line">                self._fuzz_data_logger.log_info(<span class="string">&quot;There are no available sockets. Waiting for another 5 seconds.&quot;</span>)</span><br><span class="line">                time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>



<h4 id="pre-send"><a href="#pre-send" class="headerlink" title="_pre_send"></a>_pre_send</h4><p>依次调用target的monitor中的回调函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_pre_send</span>(<span class="params">self, target</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Execute custom methods to run prior to each fuzz request. The order of events is as follows::</span></span><br><span class="line"><span class="string">        pre_send() - req - callback ... req - callback - post_send()</span></span><br><span class="line"><span class="string">    When fuzzing RPC for example, register this method to establish the RPC bind.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        target (session.target): Target we are sending data to</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> monitor <span class="keyword">in</span> target.monitors:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._fuzz_data_logger.open_test_step(<span class="string">&quot;Monitor &#123;&#125;.pre_send()&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(monitor)))</span><br><span class="line">            monitor.pre_send(target=target, fuzz_data_logger=self._fuzz_data_logger, session=self)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            self._fuzz_data_logger.log_error(</span><br><span class="line">                constants.ERR_CALLBACK_FUNC.<span class="built_in">format</span>(func_name=<span class="string">&quot;&#123;&#125;.pre_send()&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(monitor)))</span><br><span class="line">                + traceback.format_exc()</span><br><span class="line">            )</span><br></pre></td></tr></table></figure>



<h4 id="callback-current-node"><a href="#callback-current-node" class="headerlink" title="_callback_current_node"></a>_callback_current_node</h4><p>调用当前边edge的callback函数，并返回callback数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_callback_current_node</span>(<span class="params">self, node, edge, test_case_context</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Execute callback preceding current node.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        test_case_context (ProtocolSession): Context for test case-scoped data.</span></span><br><span class="line"><span class="string">        node (pgraph.node.node (Node), optional): Current Request/Node</span></span><br><span class="line"><span class="string">        edge (pgraph.edge.edge (pgraph.edge), optional): Edge along the current fuzz path from &quot;node&quot; to next node.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        bytes: Data rendered by current node if any; otherwise None.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># if the edge has a callback, process it. the callback has the option to render the node, modify it and return.</span></span><br><span class="line">    <span class="comment">#调用edge的callback函数，并返回callback数据</span></span><br><span class="line">    <span class="keyword">if</span> edge.callback:</span><br><span class="line">        self._fuzz_data_logger.open_test_step(<span class="string">&quot;Callback function &#x27;&#123;0&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(edge.callback.__name__))</span><br><span class="line">        data = edge.callback(</span><br><span class="line">            self.targets[<span class="number">0</span>],</span><br><span class="line">            self._fuzz_data_logger,</span><br><span class="line">            session=self,</span><br><span class="line">            node=node,</span><br><span class="line">            edge=edge,</span><br><span class="line">            test_case_context=test_case_context,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>



<h4 id="check-for-passively-detected-failures"><a href="#check-for-passively-detected-failures" class="headerlink" title="_check_for_passively_detected_failures"></a>_check_for_passively_detected_failures</h4><p>依次调用monitor的<code>post_send</code>函数来获取是否发生了crash，如果发生了crash就继续调用<code>get_crash_synopsis</code>函数来获取crash概要。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_check_for_passively_detected_failures</span>(<span class="params">self, target, failure_already_detected=<span class="literal">False</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Check for and log passively detected failures. Return True if any found.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        target (Target): Target to be checked for failures.</span></span><br><span class="line"><span class="string">        failure_already_detected (bool): If a failure was already detected.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        bool: True if failures were found. False otherwise.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    has_crashed = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(target.monitors) &gt; <span class="number">0</span>:</span><br><span class="line">        self._fuzz_data_logger.open_test_step(<span class="string">&quot;Contact target monitors&quot;</span>)</span><br><span class="line">        <span class="comment"># So, we need to run through the array two times. First, we check</span></span><br><span class="line">        <span class="comment"># if any of the monitors reported a failure and</span></span><br><span class="line">        <span class="comment"># if so, we need to</span></span><br><span class="line">        <span class="comment"># gather a crash synopsis from them. We don&#x27;t know whether</span></span><br><span class="line">        <span class="comment"># a monitor can provide a crash synopsis, but in any case, we&#x27;ll</span></span><br><span class="line">        <span class="comment"># check. In the second run, we try to get crash synopsis from the</span></span><br><span class="line">        <span class="comment"># monitors that did not detect a crash as supplemental information.</span></span><br><span class="line">        finished_monitors = []</span><br><span class="line">        <span class="comment">#依次调用monitor的post_send函数</span></span><br><span class="line">        <span class="keyword">for</span> monitor <span class="keyword">in</span> target.monitors:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> monitor.post_send(target=target, fuzz_data_logger=self._fuzz_data_logger, session=self):</span><br><span class="line">                has_crashed = <span class="literal">True</span></span><br><span class="line">                self._fuzz_data_logger.log_fail(</span><br><span class="line">                    <span class="string">&quot;&#123;0&#125; detected crash on test case #&#123;1&#125;: &#123;2&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                        <span class="built_in">str</span>(monitor), self.total_mutant_index, monitor.get_crash_synopsis()</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">                finished_monitors.append(monitor)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> has_crashed <span class="keyword">and</span> <span class="keyword">not</span> failure_already_detected:</span><br><span class="line">            self._fuzz_data_logger.log_pass(<span class="string">&quot;No crash detected.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> monitor <span class="keyword">in</span> <span class="built_in">set</span>(target.monitors) - <span class="built_in">set</span>(finished_monitors):</span><br><span class="line"></span><br><span class="line">                synopsis = monitor.get_crash_synopsis()</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(synopsis) &gt; <span class="number">0</span>:</span><br><span class="line">                    self._fuzz_data_logger.log_fail(</span><br><span class="line">                        <span class="string">&quot;&#123;0&#125; provided additional information for crash on #&#123;1&#125;: &#123;2&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                            <span class="built_in">str</span>(monitor), self.total_mutant_index, monitor.get_crash_synopsis()</span><br><span class="line">                        )</span><br><span class="line">                    )</span><br><span class="line">    <span class="keyword">return</span> has_crashed</span><br></pre></td></tr></table></figure>



<h4 id="transmit-fuzz"><a href="#transmit-fuzz" class="headerlink" title="transmit_fuzz"></a>transmit_fuzz</h4><p>进行实际的数据收发：</p>
<p>1.判断是否传入了callback数据，如果有callback数据就使用callback数据，否则调用render来产生变异数据；</p>
<p>2.发送数据，并将发送的数据保存在<code>last_send</code>中；</p>
<p>3.接受数据，并将接受的数据保存在<code>last_recv</code>中。</p>
<p><code>last_send</code>和<code>last_recv</code>都非常重要，<code>last_send</code>可以在监测crash时dump出来作为crash样本，<code>last_recv</code>则可以在边回调中决定状态机的走向，以及产生callback数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transmit_fuzz</span>(<span class="params">self, sock, node, edge, callback_data, mutation_context</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Render and transmit a fuzzed node, process callbacks accordingly.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        sock (Target, optional): Socket-like object on which to transmit node</span></span><br><span class="line"><span class="string">        node (pgraph.node.node (Node), optional): Request/Node to transmit</span></span><br><span class="line"><span class="string">        edge (pgraph.edge.edge (pgraph.edge), optional): Edge along the current fuzz path from &quot;node&quot; to next node.</span></span><br><span class="line"><span class="string">        callback_data (bytes): Data from previous callback.</span></span><br><span class="line"><span class="string">        mutation_context (MutationContext): Current mutation context.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#这里就可以看到，边的callback是先于数据发送的，如果callback返回了自定义数据，那这里就会直接拿callback返回的数据发送</span></span><br><span class="line">    <span class="comment">#如果callback返回空数据，这里就会正常调用变异的数据渲染，然后发送变异数据</span></span><br><span class="line">    <span class="keyword">if</span> callback_data:</span><br><span class="line">        data = callback_data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = self.fuzz_node.render(mutation_context)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:  <span class="comment"># send</span></span><br><span class="line">        <span class="comment">#这里发送变异数据，同时将发送的数据保存在last_send里面</span></span><br><span class="line">        self.targets[<span class="number">0</span>].send(data)</span><br><span class="line">        self.last_send = data</span><br><span class="line">    <span class="keyword">except</span> exception.BoofuzzTargetConnectionReset:</span><br><span class="line">        <span class="keyword">if</span> self._ignore_connection_issues_when_sending_fuzz_data:</span><br><span class="line">            self._fuzz_data_logger.log_info(constants.ERR_CONN_RESET)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> BoofuzzFailure(message=constants.ERR_CONN_RESET)</span><br><span class="line">    <span class="keyword">except</span> exception.BoofuzzTargetConnectionAborted <span class="keyword">as</span> e:</span><br><span class="line">        msg = constants.ERR_CONN_ABORTED.<span class="built_in">format</span>(socket_errno=e.socket_errno, socket_errmsg=e.socket_errmsg)</span><br><span class="line">        <span class="keyword">if</span> self._ignore_connection_issues_when_sending_fuzz_data:</span><br><span class="line">            self._fuzz_data_logger.log_info(msg)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> BoofuzzFailure(msg)</span><br><span class="line">    <span class="keyword">except</span> exception.BoofuzzSSLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> self._ignore_connection_ssl_errors:</span><br><span class="line">            self._fuzz_data_logger.log_info(<span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> BoofuzzFailure(<span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line">    received = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:  <span class="comment"># recv</span></span><br><span class="line">        <span class="keyword">if</span> self._receive_data_after_fuzz:</span><br><span class="line">            received = self.targets[<span class="number">0</span>].recv()</span><br><span class="line">    <span class="keyword">except</span> exception.BoofuzzTargetConnectionReset:</span><br><span class="line">        <span class="keyword">if</span> self._check_data_received_each_request:</span><br><span class="line">            <span class="keyword">raise</span> BoofuzzFailure(message=constants.ERR_CONN_RESET)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._fuzz_data_logger.log_info(constants.ERR_CONN_RESET)</span><br><span class="line">    <span class="keyword">except</span> exception.BoofuzzTargetConnectionAborted <span class="keyword">as</span> e:</span><br><span class="line">        msg = constants.ERR_CONN_ABORTED.<span class="built_in">format</span>(socket_errno=e.socket_errno, socket_errmsg=e.socket_errmsg)</span><br><span class="line">        <span class="keyword">if</span> self._check_data_received_each_request:</span><br><span class="line">            <span class="keyword">raise</span> BoofuzzFailure(msg)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._fuzz_data_logger.log_info(msg)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> exception.BoofuzzSSLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> self._ignore_connection_ssl_errors:</span><br><span class="line">            self._fuzz_data_logger.log_info(<span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._fuzz_data_logger.log_fail(<span class="built_in">str</span>(e))</span><br><span class="line">            <span class="keyword">raise</span> BoofuzzFailure(<span class="built_in">str</span>(e))</span><br><span class="line">    <span class="comment">#这里会将这次接受到的数据保存在last_recv里面</span></span><br><span class="line">    self.last_recv = received</span><br></pre></td></tr></table></figure>



<h4 id="crash-dump"><a href="#crash-dump" class="headerlink" title="crash dump"></a>crash dump</h4><p>上面只介绍到监测crash而没说哪里dump crash，实际上crash的dump在各个Monitor中(在<code>_fuzz_current_case</code>函数中是没有的)。</p>
<p>以Procmon的<code>DebugThread</code>为例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_send</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This routine is called after the fuzzer transmits a test case and returns the status of the target.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        bool: True if the target is still active, False otherwise.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> self.is_alive():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.process_monitor.crash_filename, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> rec_file:</span><br><span class="line">            rec_file.write(self.process_monitor.last_synopsis)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.process_monitor.coredump_dir <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            dest = os.path.join(self.process_monitor.coredump_dir, <span class="built_in">str</span>(self.process_monitor.test_number))</span><br><span class="line">            src = _get_coredump_path()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> src <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                self.log(<span class="string">&quot;moving core dump %s -&gt; %s&quot;</span> % (src, dest))</span><br><span class="line">                os.rename(src, dest)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>到此为止，数据的收发流程基本就了解了，剩下需要看下数据是怎么从request中产生并变异的。</p>
<h3 id="数据变异"><a href="#数据变异" class="headerlink" title="数据变异"></a>数据变异</h3><p><code>_generate_mutations_indefinitely</code>这里会产生一个iterator，迭代产生<code>mutation_context</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> name == <span class="string">&quot;&quot;</span>:</span><br><span class="line">    self._main_fuzz_loop(self._generate_mutations_indefinitely(max_depth=max_depth))</span><br></pre></td></tr></table></figure>



<h4 id="generate-mutations-indefinitely"><a href="#generate-mutations-indefinitely" class="headerlink" title="_generate_mutations_indefinitely"></a>_generate_mutations_indefinitely</h4><p>这里<code>max_path</code>默认传进来是个none。</p>
<p>调用<code>_generate_n_mutations</code>来产生<code>mutation_context</code>。</p>
<p>depth是在一次<code>fuzz_case</code>中，产生几个变异体：depth为1，那就是一次就变异一个primitive。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_generate_mutations_indefinitely</span>(<span class="params">self, max_depth=<span class="literal">None</span>, path=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Yield MutationContext with n mutations per message over all messages, with n increasing indefinitely.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># indefinitely 无限期的</span></span><br><span class="line">    depth = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> max_depth <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> depth &lt;= max_depth:</span><br><span class="line">        valid_case_found_at_this_depth = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self._generate_n_mutations(depth=depth, path=path):</span><br><span class="line">            valid_case_found_at_this_depth = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">yield</span> m</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> valid_case_found_at_this_depth:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        depth += <span class="number">1</span></span><br></pre></td></tr></table></figure>



<h4 id="generate-n-mutations"><a href="#generate-n-mutations" class="headerlink" title="_generate_n_mutations"></a>_generate_n_mutations</h4><p>这里会先得到path再从path里得到要fuzz的node。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_generate_n_mutations</span>(<span class="params">self, depth, path</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Yield MutationContext with n mutations per message over all messages.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#调试此处的yield</span></span><br><span class="line">    <span class="comment"># for path in self._iterate_protocol_message_paths(path=path):</span></span><br><span class="line">    <span class="comment">#     print(self._message_path_to_str(path))</span></span><br><span class="line">    <span class="comment">#先得到要fuzz的path，再从中获取要fuzz的node</span></span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> self._iterate_protocol_message_paths(path=path):</span><br><span class="line">        <span class="comment">#_generate_n_mutations_for_path这个函数会根据上面取得的path构建MutationContext</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self._generate_n_mutations_for_path(path, depth=depth):</span><br><span class="line">            <span class="keyword">yield</span> m</span><br></pre></td></tr></table></figure>



<h4 id="iterate-protocol-message-paths"><a href="#iterate-protocol-message-paths" class="headerlink" title="_iterate_protocol_message_paths"></a>_iterate_protocol_message_paths</h4><p>先检查下是否有target以及从root发出的边。</p>
<p>如果指定了path，就直接返回指定的path，但是默认为空。</p>
<p>调用<code>_iterate_protocol_message_paths_recursive</code>遍历path。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_iterate_protocol_message_paths</span>(<span class="params">self, path=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Iterates over protocol and yields a path (list of Connection) leading to a given message).</span></span><br><span class="line"><span class="string">    #如果指定了path的集合，就返回这个指定的边的集合，否则就遍历整个协议中所有的边的可能性</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        path (list of Connection): Provide a specific path to yield only that specific path.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Yields:</span></span><br><span class="line"><span class="string">        list of Connection: List of edges along the path to the current one being fuzzed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        exception.SulleyRuntimeError: If no requests defined or no targets specified</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># we can&#x27;t fuzz if we don&#x27;t have at least one target and one request.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.targets:</span><br><span class="line">        <span class="keyword">raise</span> exception.SullyRuntimeError(<span class="string">&quot;No targets specified in session&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.edges_from(self.root.<span class="built_in">id</span>):</span><br><span class="line">        <span class="keyword">raise</span> exception.SullyRuntimeError(<span class="string">&quot;No requests specified in session&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> path <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> path</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> self._iterate_protocol_message_paths_recursive(this_node=self.root, path=[]):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br></pre></td></tr></table></figure>



<h4 id="iterate-protocol-message-paths-recursive"><a href="#iterate-protocol-message-paths-recursive" class="headerlink" title="_iterate_protocol_message_paths_recursive"></a>_iterate_protocol_message_paths_recursive</h4><p>这里遍历path的方法使用的是DFS，只不过用yield实现的，看着有些别扭，最终会产生从root出发的所有路径。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_iterate_protocol_message_paths_recursive</span>(<span class="params">self, this_node, path</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Recursive helper for _iterate_protocol.</span></span><br><span class="line"><span class="string">    #迭代的去取该协议中的msg的path</span></span><br><span class="line"><span class="string">    #这里应该是会返回所有路径</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        this_node (node.Node): Current node that is being fuzzed.</span></span><br><span class="line"><span class="string">        path (list of Connection): List of edges along the path to the current one being fuzzed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Yields:</span></span><br><span class="line"><span class="string">        list of Connection: List of edges along the path to the current one being fuzzed.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># step through every edge from the current node.</span></span><br><span class="line">    <span class="keyword">for</span> edge <span class="keyword">in</span> self.edges_from(this_node.<span class="built_in">id</span>):</span><br><span class="line">        <span class="comment"># keep track of the path as we fuzz through it, don&#x27;t count the root node.</span></span><br><span class="line">        <span class="comment"># we keep track of edges as opposed to nodes because if there is more then one path through a set of</span></span><br><span class="line">        <span class="comment"># given nodes we don&#x27;t want any ambiguity.</span></span><br><span class="line">        path.append(edge)</span><br><span class="line"></span><br><span class="line">        message_path = self._message_path_to_str(path)</span><br><span class="line">        logging.debug(<span class="string">&quot;fuzzing: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message_path))</span><br><span class="line">        self.fuzz_node = self.nodes[path[-<span class="number">1</span>].dst]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> path</span><br><span class="line"></span><br><span class="line">        <span class="comment"># recursively fuzz the remainder of the nodes in the session graph.</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> self._iterate_protocol_message_paths_recursive(self.fuzz_node, path):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line"></span><br><span class="line">    <span class="comment"># finished with the last node on the path, pop it off the path stack.</span></span><br><span class="line">    <span class="keyword">if</span> path:</span><br><span class="line">        path.pop()</span><br></pre></td></tr></table></figure>



<h4 id="generate-n-mutations-for-path"><a href="#generate-n-mutations-for-path" class="headerlink" title="_generate_n_mutations_for_path"></a>_generate_n_mutations_for_path</h4><p>知道path如何产生的之后再回去看<code>    MutationContext</code>是怎么产生的，<code>_generate_n_mutations_for_path</code>函数对传进来的path产生<code>mutation_context</code>，<code>mutation_context</code>就是代表这次case的变异体上下文，depth是标识一个<code>fuzz_case</code>使用几个变异体,默认为1。</p>
<p>那么<code>MutationContext</code>的mutations就只有一个<code>qualified_name</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_generate_n_mutations_for_path</span>(<span class="params">self, path, depth</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Yield MutationContext with n mutations for a specific message.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        path (list of Connection): Nodes (Requests) along the path to the current one being fuzzed.</span></span><br><span class="line"><span class="string">        depth (int): Yield sets of depth mutations.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Yields:</span></span><br><span class="line"><span class="string">        MutationContext: A MutationContext containing one mutation.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> mutations <span class="keyword">in</span> self._generate_n_mutations_for_path_recursive(path, depth=depth):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._mutations_contain_duplicate(mutations):</span><br><span class="line">            self.total_mutant_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">yield</span> MutationContext(message_path=path, mutations=&#123;n.qualified_name: n <span class="keyword">for</span> n <span class="keyword">in</span> mutations&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="generate-n-mutations-for-path-recursive"><a href="#generate-n-mutations-for-path-recursive" class="headerlink" title="_generate_n_mutations_for_path_recursive"></a>_generate_n_mutations_for_path_recursive</h4><p>调用<code>_generate_n_mutations_for_path_recursive</code>产生mutation集合。</p>
<p>mutaions由两个部分组成，一个是<code>_generate_mutations_for_request</code>函数产生的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_generate_n_mutations_for_path_recursive</span>(<span class="params">self, path, depth, skip_elements=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> skip_elements <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        skip_elements = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> depth == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">yield</span> []</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    new_skip = skip_elements.copy()</span><br><span class="line">    <span class="comment"># 调试yield</span></span><br><span class="line">    <span class="comment"># for mutations in self._generate_mutations_for_request(path=path, skip_elements=skip_elements):</span></span><br><span class="line">    <span class="comment">#     print(mutations)</span></span><br><span class="line">    <span class="keyword">for</span> mutations <span class="keyword">in</span> self._generate_mutations_for_request(path=path, skip_elements=skip_elements):</span><br><span class="line">        new_skip.update(m.qualified_name <span class="keyword">for</span> m <span class="keyword">in</span> mutations)</span><br><span class="line">        <span class="keyword">for</span> ms <span class="keyword">in</span> self._generate_n_mutations_for_path_recursive(path, depth=depth - <span class="number">1</span>, skip_elements=new_skip):</span><br><span class="line">            <span class="keyword">yield</span> mutations + ms</span><br></pre></td></tr></table></figure>



<h4 id="generate-mutations-for-request"><a href="#generate-mutations-for-request" class="headerlink" title="_generate_mutations_for_request"></a>_generate_mutations_for_request</h4><p>设置<code>fuzz_node</code>为当前路径上的最后一个node，之后调用<code>fuzz_node</code>的<code>get_mutations</code>，<code>fuzz_node</code>是一个request对象，所以这里调用的是request的<code>get_mutations</code>方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_generate_mutations_for_request</span>(<span class="params">self, path, skip_elements=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Yield each mutation for a specific message (the last message in path).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        path (list of Connection): Nodes (Requests) along the path to the current one being fuzzed.</span></span><br><span class="line"><span class="string">        path (iter of str): Qualified names of elements to skip while fuzzing.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Yields:</span></span><br><span class="line"><span class="string">        Mutation: Mutation object describing a single mutation.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> skip_elements <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        skip_elements = []</span><br><span class="line">    <span class="comment">#这里设置fuzz_node为当前fuzz路径的dst</span></span><br><span class="line">    self.fuzz_node = self.nodes[path[-<span class="number">1</span>].dst]</span><br><span class="line">    self.mutant_index = <span class="number">0</span></span><br><span class="line">    <span class="comment">#调试yield</span></span><br><span class="line">    <span class="comment">#value_list = list(self.fuzz_node.get_mutations(skip_elements=skip_elements))</span></span><br><span class="line">    <span class="comment">#这里会对node里的item枚举产生mutation</span></span><br><span class="line">    <span class="keyword">for</span> mutations <span class="keyword">in</span> self.fuzz_node.get_mutations(skip_elements=skip_elements):</span><br><span class="line">        <span class="comment">#记录整体的已经发生的变异次数</span></span><br><span class="line">        self.mutant_index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> mutations</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self._skip_current_node_after_current_test_case:</span><br><span class="line">            self._skip_current_node_after_current_test_case = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> self._skip_current_element_after_current_test_case:</span><br><span class="line">            self.fuzz_node.mutant.stop_mutations()</span><br><span class="line">            self._skip_current_element_after_current_test_case = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>



<h4 id="request-get-mutations"><a href="#request-get-mutations" class="headerlink" title="request.get_mutations"></a>request.get_mutations</h4><p>Request继承自<code>FuzzableBlock</code>，mutations是<code>FuzzableBlock</code>的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mutations</span>(<span class="params">self, default_value=<span class="literal">None</span>, skip_elements=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.mutations(default_value=default_value, skip_elements=skip_elements)</span><br></pre></td></tr></table></figure>



<h4 id="FuzzableBlock-mutations"><a href="#FuzzableBlock-mutations" class="headerlink" title="FuzzableBlock.mutations"></a>FuzzableBlock.mutations</h4><p>遍历当前request的stack中的item，即插入的block和primitive，再调用他们的<code>get_mutations</code>函数得到mutation。</p>
<p>primitives都继承自fuzzable，所以这里调用的是fuzzable的<code>get_mutations</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mutations</span>(<span class="params">self, default_value, skip_elements=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> skip_elements <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        skip_elements = []</span><br><span class="line">    <span class="comment">#遍历stack中的item</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> self.stack:</span><br><span class="line">        <span class="keyword">if</span> item.qualified_name <span class="keyword">in</span> skip_elements:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        self.request.mutant = item</span><br><span class="line">        <span class="keyword">for</span> mutation <span class="keyword">in</span> item.get_mutations():</span><br><span class="line">            <span class="keyword">yield</span> mutation</span><br></pre></td></tr></table></figure>



<h4 id="fuzzable-get-mutations"><a href="#fuzzable-get-mutations" class="headerlink" title="fuzzable.get_mutations"></a>fuzzable.get_mutations</h4><p>这个函数就是对当前item进行变异，并将变异的值传到生成的Mutation里面。</p>
<p>Mutation的构造这里就能看到，是由一个值value，一个所属item的<code>qualified_name</code>，以及变异计数index组成的。</p>
<p>这里终止变异用的是<code>_halt_mutations</code>标志，而<code>stop_mutations</code>函数是提供的接口，其内部就是设置<code>_halt_mutations</code>为true。</p>
<p><code>itertools.chain</code>的功能就是合并列表，所以这里值得来源就为<code>self.mutations(self.original_value())</code>，<code>self._fuzz_values</code>。</p>
<p>其中<code>_fuzz_values</code>在Fuzzable的<em>init</em>函数中是可以作为构造参数传入的，但是String（继承自Fuzzble）的构造函数里并没有这个参数，所以就没找到接口设置这个值(除了手动赋值)，所以这里总是空列表。</p>
<p>下面会以String为例，分析了其mutations函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mutations</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Iterate mutations. Used by boofuzz framework.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Yields:</span></span><br><span class="line"><span class="string">        list of Mutation: Mutations</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.fuzzable:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="comment">#value_list = list(itertools.chain(self.mutations(self.original_value()), self._fuzz_values))</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> itertools.chain(self.mutations(self.original_value()), self._fuzz_values):</span><br><span class="line">            <span class="comment">#这里是我自己添加的，当mutate进行200次后，就停止对这个item的mutate，以加速path的遍历，要不然会一直卡在对这一个item的遍历上</span></span><br><span class="line">            <span class="keyword">if</span> index&gt;<span class="number">200</span>:</span><br><span class="line">                self.stop_mutations()</span><br><span class="line">            <span class="keyword">if</span> self._halt_mutations:</span><br><span class="line">                self._halt_mutations = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">list</span>):</span><br><span class="line">                <span class="keyword">yield</span> value</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(value, Mutation):</span><br><span class="line">                <span class="keyword">yield</span> [value]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">yield</span> [Mutation(value=value, qualified_name=self.qualified_name, index=index)]</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        self._halt_mutations = <span class="literal">False</span>  <span class="comment"># in case stop_mutations is called when mutations were exhausted anyway</span></span><br></pre></td></tr></table></figure>



<h4 id="stop-mutations"><a href="#stop-mutations" class="headerlink" title="stop_mutations"></a>stop_mutations</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop_mutations</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Stop yielding mutations on the currently running :py:meth:`mutations` call.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Used by boofuzz to stop fuzzing an element when it&#x27;s already caused several failures.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        NoneType: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    self._halt_mutations = <span class="literal">True</span></span><br></pre></td></tr></table></figure>



<h4 id="String-mutation"><a href="#String-mutation" class="headerlink" title="String.mutation"></a>String.mutation</h4><p>这里进一步可以看到变异值有三个来源：</p>
<p><code>_fuzz_library</code> 可以理解为预置的容易产生crash的字典；</p>
<p><code>_yield_variable_mutations(default_value)</code> 对<code>default_value</code>进行重叠以产生变异值；</p>
<p><code>_yield_long_strings(self.long_string_seeds)</code> 带点随机性的变异，(随机替换字符为终结符)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mutations</span>(<span class="params">self, default_value</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Mutate the primitive by stepping through the fuzz library extended with the &quot;this&quot; library, return False on</span></span><br><span class="line"><span class="string">    completion.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        default_value (str): Default value of element.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Yields:</span></span><br><span class="line"><span class="string">        str: Mutations</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    last_val = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> itertools.chain(</span><br><span class="line">        self._fuzz_library,</span><br><span class="line">        self._yield_variable_mutations(default_value),</span><br><span class="line">        self._yield_long_strings(self.long_string_seeds),</span><br><span class="line">    ):</span><br><span class="line">        current_val = self._adjust_mutation_for_size(val)</span><br><span class="line">        <span class="keyword">if</span> last_val == current_val:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        last_val = current_val</span><br><span class="line">        <span class="keyword">yield</span> current_val</span><br></pre></td></tr></table></figure>



<h4 id="fuzz-library-只贴了一部分"><a href="#fuzz-library-只贴了一部分" class="headerlink" title="_fuzz_library (只贴了一部分)"></a>_fuzz_library (只贴了一部分)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># store fuzz_library as a class variable to avoid copying the ~70MB structure across each instantiated primitive.</span></span><br><span class="line"><span class="comment"># Has to be sorted to avoid duplicates</span></span><br><span class="line">_fuzz_library = [</span><br><span class="line">    <span class="string">&quot;!@#$%%^#$%#$@#$%$$@#$%^^**(()&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&quot;</span>,  <span class="comment"># strings ripped from spike (and some others I added)</span></span><br><span class="line">    <span class="string">&quot;$(reboot)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;$;reboot&quot;</span>,</span><br><span class="line">    <span class="string">&quot;%00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;%00/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;%01%02%03%04%0a%0d%0aADSF&quot;</span>,</span><br><span class="line">    <span class="string">&quot;%01%02%03@%04%0a%0d%0aADSF&quot;</span>,</span><br><span class="line">    <span class="string">&quot;%0a reboot %0a&quot;</span>,</span><br></pre></td></tr></table></figure>



<h4 id="yield-variable-mutations"><a href="#yield-variable-mutations" class="headerlink" title="_yield_variable_mutations"></a>_yield_variable_mutations</h4><p>重叠产生变异值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_variable_mutation_multipliers = [<span class="number">2</span>, <span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_yield_variable_mutations</span>(<span class="params">self, default_value</span>):</span></span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> self._variable_mutation_multipliers:</span><br><span class="line">        value = default_value * length</span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">not</span> <span class="keyword">in</span> self._fuzz_library:</span><br><span class="line">            <span class="keyword">yield</span> value</span><br><span class="line">            <span class="keyword">if</span> self.max_len <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">len</span>(value) &gt;= self.max_len:</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure>



<h4 id="yield-long-strings"><a href="#yield-long-strings" class="headerlink" title="_yield_long_strings"></a>_yield_long_strings</h4><p>这个函数有两部分，第一部分仍然是采取重叠的策略来产生变异值，只不过seed来自于<code>long_string_seeds</code>。</p>
<p><code>random.sample(list,size)</code>的功能是随机抽样，从list中抽size个数。</p>
<p>第二部分是先按<code>_long_string_lengths</code>中的长度产生一个D*size的字符串，然后再随机将其中的字符替换成/00,这是整个String的变异过程中唯一随机的部分。替换哪些位置的字符是在String初始化时已经按<code>_long_string_lengths</code>中的长度初始化过了（random_indices）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#传进去的sequences</span></span><br><span class="line">long_string_seeds = [<span class="string">&quot;C&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="string">&quot;=&quot;</span>,<span class="string">&quot;a=&quot;</span>,<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;,&quot;</span>,<span class="string">&quot;(&quot;</span>,<span class="string">&quot;)&quot;</span>,<span class="string">&quot;]&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;%&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;\x14&quot;</span>,<span class="string">&quot;\x00&quot;</span>,<span class="string">&quot;\xFE&quot;</span>,]</span><br><span class="line">_long_string_lengths = [<span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>, <span class="number">2048</span>, <span class="number">4096</span>, <span class="number">32768</span>, <span class="number">0xFFFF</span>]</span><br><span class="line">_long_string_deltas = [-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">_extra_long_string_lengths = [<span class="number">99999</span>, <span class="number">100000</span>, <span class="number">500000</span>, <span class="number">1000000</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_yield_long_strings</span>(<span class="params">self, sequences</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Given a sequence, yield a number of selectively chosen strings lengths of the given sequence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @type  sequences: list(str)</span></span><br><span class="line"><span class="string">    @param sequences: Sequence to repeat for creation of fuzz strings.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#也是重叠的策略，只不过这里是从long_string_seeds中选出sequence来进行重叠</span></span><br><span class="line">    <span class="keyword">for</span> sequence <span class="keyword">in</span> sequences:</span><br><span class="line">        <span class="comment">#按_long_string_lengths和_long_string_deltas结合产生的长度产生(标准)</span></span><br><span class="line">        <span class="keyword">for</span> size <span class="keyword">in</span> [</span><br><span class="line">            length + delta</span><br><span class="line">            <span class="keyword">for</span> length, delta <span class="keyword">in</span> itertools.product(self._long_string_lengths, self._long_string_deltas)</span><br><span class="line">        ]:</span><br><span class="line">            <span class="keyword">if</span> self.max_len <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> size &lt;= self.max_len:</span><br><span class="line">                data = sequence * math.ceil(size / <span class="built_in">len</span>(sequence))</span><br><span class="line">                <span class="keyword">yield</span> data[:size]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">		<span class="comment">#按_extra_long_string_lengths中的长度产生(额外定义)</span></span><br><span class="line">        <span class="keyword">for</span> size <span class="keyword">in</span> self._extra_long_string_lengths:</span><br><span class="line">            <span class="keyword">if</span> self.max_len <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> size &lt;= self.max_len:</span><br><span class="line">                data = sequence * math.ceil(size / <span class="built_in">len</span>(sequence))</span><br><span class="line">                <span class="keyword">yield</span> data[:size]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">		<span class="comment">#按最大长度产生</span></span><br><span class="line">        <span class="keyword">if</span> self.max_len <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            data = sequence * math.ceil(self.max_len / <span class="built_in">len</span>(sequence))</span><br><span class="line">            <span class="keyword">yield</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> size <span class="keyword">in</span> self._long_string_lengths:</span><br><span class="line">        <span class="keyword">if</span> self.max_len <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> size &lt;= self.max_len:</span><br><span class="line">            s = <span class="string">&quot;D&quot;</span> * size</span><br><span class="line">            <span class="keyword">for</span> loc <span class="keyword">in</span> self.random_indices[size]:</span><br><span class="line">                <span class="keyword">yield</span> s[:loc] + <span class="string">&quot;\x00&quot;</span> + s[loc + <span class="number">1</span> :]  <span class="comment"># Replace character at loc with terminator</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#def  init():</span></span><br><span class="line">        self.random_indices = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        local_random = random.Random(<span class="number">0</span>)  <span class="comment"># We want constant random numbers to generate reproducible test cases</span></span><br><span class="line">        previous_length = <span class="number">0</span></span><br><span class="line">        <span class="comment"># For every length add a random number of random indices to the random_indices dict. Prevent duplicates by</span></span><br><span class="line">        <span class="comment"># adding only indices in between previous_length and current length.</span></span><br><span class="line">        <span class="keyword">for</span> length <span class="keyword">in</span> self._long_string_lengths:</span><br><span class="line">            self.random_indices[length] = local_random.sample(</span><br><span class="line">                <span class="built_in">range</span>(previous_length, length), local_random.randint(<span class="number">1</span>, self._long_string_lengths[<span class="number">0</span>])</span><br><span class="line">            )</span><br><span class="line">            previous_length = length</span><br></pre></td></tr></table></figure>



<h4 id="总结数据变异流程"><a href="#总结数据变异流程" class="headerlink" title="总结数据变异流程"></a>总结数据变异流程</h4><p>一次<code>fuzz_case</code>所用的变异数据来自于<code>mutation_context</code>，<code>mutation_context</code>由<code>message_path</code>和mutations组成。</p>
<p>mutations产生于primitive，对primitive的一次变异产生一个mutation，mutation中包含变异值和所属的primitive的<code>qualified_name</code>。</p>
<p>根据传入的depth的数值，<code>mutation_context</code>可以包含多个mutation，只不过默认值depth为1，因此<code>mutation_context</code>一般就包含一个mutation。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#session._main_fuzz_loop()</span></span><br><span class="line"><span class="keyword">for</span> mutation_context <span class="keyword">in</span> fuzz_case_iterator:</span><br><span class="line">    <span class="keyword">if</span> self.total_mutant_index &lt; self._index_start:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#session._generate_n_mutations_for_path()</span></span><br><span class="line">self.total_mutant_index += <span class="number">1</span></span><br><span class="line"><span class="keyword">yield</span> MutationContext(message_path=path, mutations=&#123;n.qualified_name: n <span class="keyword">for</span> n <span class="keyword">in</span> mutations&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Fuzzable.get_mutations()</span></span><br><span class="line"><span class="keyword">yield</span> [Mutation(value=value, qualified_name=self.qualified_name, index=index)]</span><br></pre></td></tr></table></figure>

<p>变量<code>total_mutant_index</code>标记产生了多少<code>mutation_context</code>，也就等同于<code>fuzz_case</code>的次数。</p>
<p>变量<code>mutant_index</code>标记产生了多少mutant(mutation),在depth为1的情况下，<code>mutant_index</code>就等于<code>total_mutant_index</code>。</p>
<p>而mutation的产生则是首先会遍历出状态图的所有path，然后对path中最后一个node中的item进行变异。</p>
<h3 id="其他细节"><a href="#其他细节" class="headerlink" title="其他细节"></a>其他细节</h3><p>这里再分析下刚才没提到的一些细节，其实整体框架和流程已经分析完了，但是对这些小细节也比较清楚的话，能更好的了解boofuzz。</p>
<h4 id="qualified-name"><a href="#qualified-name" class="headerlink" title="qualified_name"></a>qualified_name</h4><p>我们创建primitive时一般只给个<code>default_value</code>，这样在Fuzzable里，就会默认赋值个name，格式是类型加计数，例如String1,String2。</p>
<p>primitive的<code>context_path</code>是在push的时候赋予的，标记着的是其在request中的位置。</p>
<p>最后<code>qualified_name</code>的产生是将<code>context_path</code>和name拼接在一起。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Fuzzable._init()</span></span><br><span class="line"><span class="keyword">if</span> self._name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    Fuzzable.name_counter += <span class="number">1</span></span><br><span class="line">    self._name = <span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(self).__name__, Fuzzable.name_counter)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#Request.push()</span></span><br><span class="line">item.context_path = self._generate_context_path(self.block_stack)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_generate_context_path</span>(<span class="params">self, block_stack</span>):</span></span><br><span class="line">    context_path = <span class="string">&quot;.&quot;</span>.join(x.name <span class="keyword">for</span> x <span class="keyword">in</span> block_stack)  <span class="comment"># TODO put in method</span></span><br><span class="line">    context_path = <span class="string">&quot;.&quot;</span>.join(<span class="built_in">filter</span>(<span class="literal">None</span>, (self.name, context_path)))</span><br><span class="line">    <span class="keyword">return</span> context_path</span><br><span class="line"><span class="comment">#Fuzzable.qualified_name</span></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qualified_name</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Dot-delimited name that describes the request name and the path to the element within the request.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Example: &quot;request1.block1.block2.node1&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;.&quot;</span>.join(s <span class="keyword">for</span> s <span class="keyword">in</span> (self._context_path, self.name) <span class="keyword">if</span> s != <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="path数据发送"><a href="#path数据发送" class="headerlink" title="path数据发送"></a>path数据发送</h4><p>前面已经介绍了变异值数据产生和数据发送，但是实际上数据产生和数据发送间还有一些细节没分析。</p>
<p>为了贴合网络协议，boofuzz在发送变异数据前，会先把其path上的正常数据先都发送过去，变异mutation都是在path的最后一个node上。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#seesion._fuzz_current_case()</span></span><br><span class="line"><span class="comment">#这里是正常发送message_path最后一条路径前面的路径数据，这里就可以看出boofuzz是按node Fuzz的</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> mutation_context.message_path[:-<span class="number">1</span>]:</span><br><span class="line">        prev_node = self.nodes[e.src]</span><br><span class="line">        node = self.nodes[e.dst]</span><br><span class="line">        protocol_session = ProtocolSession(</span><br><span class="line">            previous_message=prev_node,</span><br><span class="line">            current_message=node,</span><br><span class="line">        )</span><br><span class="line">        mutation_context.protocol_session = protocol_session</span><br><span class="line">        callback_data = self._callback_current_node(node=node, edge=e, test_case_context=protocol_session)</span><br><span class="line">        self._fuzz_data_logger.open_test_step(<span class="string">&quot;Transmit Prep Node &#x27;&#123;0&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(node.name))</span><br><span class="line">        self.transmit_normal(target, node, e, callback_data=callback_data,mutation_context=mutation_context)</span><br></pre></td></tr></table></figure>



<h5 id="transmit-normal"><a href="#transmit-normal" class="headerlink" title="transmit_normal"></a>transmit_normal</h5><p>如果<code>callback_data</code>不为空就发送<code>callback_data</code>，否则发送<code>render(mutation_context)</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transmit_normal</span>(<span class="params">self, sock, node, edge, callback_data, mutation_context</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Render and transmit a non-fuzzed node, process callbacks accordingly.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        sock (Target, optional): Socket-like object on which to transmit node</span></span><br><span class="line"><span class="string">        node (pgraph.node.node (Node), optional): Request/Node to transmit</span></span><br><span class="line"><span class="string">        edge (pgraph.edge.edge (pgraph.edge), optional): Edge along the current fuzz path from &quot;node&quot; to next node.</span></span><br><span class="line"><span class="string">        callback_data (bytes): Data from previous callback.</span></span><br><span class="line"><span class="string">        mutation_context (MutationContext): active mutation context</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> callback_data:</span><br><span class="line">        data = callback_data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = node.render(mutation_context=mutation_context)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:  <span class="comment"># send</span></span><br><span class="line">        self.targets[<span class="number">0</span>].send(data)</span><br><span class="line">        self.last_send = data</span><br><span class="line">    <span class="keyword">if</span> self._receive_data_after_each_request:</span><br><span class="line">        self.last_recv = self.targets[<span class="number">0</span>].recv()</span><br></pre></td></tr></table></figure>



<h5 id="request-render"><a href="#request-render" class="headerlink" title="request.render"></a>request.render</h5><p>这个函数流程前面也没分析。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span>(<span class="params">self, mutation_context=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.block_stack:</span><br><span class="line">        <span class="keyword">raise</span> exception.SullyRuntimeError(<span class="string">&quot;UNCLOSED BLOCK: %s&quot;</span> % self.block_stack[-<span class="number">1</span>].qualified_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self.get_child_data(mutation_context=mutation_context)</span><br></pre></td></tr></table></figure>



<h5 id="request-get-child-data"><a href="#request-get-child-data" class="headerlink" title="request.get_child_data"></a>request.get_child_data</h5><p>这个函数遍历request中的item，来拼接出数据，item基本都继承自Fuzzable(除了Block)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_child_data</span>(<span class="params">self, mutation_context</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Get child or referenced data for this node.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    For blocks that reference other data from the message structure (e.g. size, checksum, blocks). See</span></span><br><span class="line"><span class="string">    FuzzableBlock for an example.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        mutation_context (MutationContext): Mutation context.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        bytes: Child data.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    rendered = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> self.stack:</span><br><span class="line">        rendered += item.render(mutation_context=mutation_context)</span><br><span class="line">    <span class="keyword">return</span> rendered</span><br></pre></td></tr></table></figure>



<h5 id="Fuzzable-render"><a href="#Fuzzable-render" class="headerlink" title="Fuzzable.render"></a>Fuzzable.render</h5><p>调用<code>get_value</code>获取值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span>(<span class="params">self, mutation_context=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Render after applying mutation, if applicable.</span></span><br><span class="line"><span class="string">    :type mutation_context: MutationContext</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> self.encode(value=self.get_value(mutation_context=mutation_context),mutation_context=mutation_context)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">self, value, mutation_context</span>):</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure>



<h5 id="Fuzzable-get-value"><a href="#Fuzzable-get-value" class="headerlink" title="Fuzzable.get_value"></a>Fuzzable.get_value</h5><p>就是如果当前item在<code>mutation_context</code>的<code>qualified_name</code>中，就返回变异值，否则就返回初始值<code>_default_value</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span>(<span class="params">self, mutation_context=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Helper method to get the currently applicable value.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This is either the default value, or the active mutation value as dictated by mutation_context.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        mutation_context (MutationContext):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> mutation_context <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        mutation_context = MutationContext()</span><br><span class="line">    <span class="keyword">if</span> self.qualified_name <span class="keyword">in</span> mutation_context.mutations:</span><br><span class="line">        mutation = mutation_context.mutations[self.qualified_name]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">callable</span>(mutation.value):</span><br><span class="line">            value = mutation.value(self.original_value(test_case_context=mutation_context.protocol_session))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            value = mutation.value</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        value = self.original_value(test_case_context=mutation_context.protocol_session)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure>



<h5 id="original-value"><a href="#original-value" class="headerlink" title="original_value"></a>original_value</h5><p>因为传进来的都是ProtocolSession对象，所以走else分支返回<code>_default_value</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">original_value</span>(<span class="params">self, test_case_context=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Original, non-mutated value of element.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        test_case_context (ProtocolSession): Used to resolve ReferenceValueTestCaseSession type default values.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#这个分支不知道什么时候用到</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(self._default_value, ProtocolSessionReference):</span><br><span class="line">        <span class="keyword">if</span> test_case_context <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self._default_value.default_value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> test_case_context.session_variables[self._default_value.name]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> self._default_value</span><br></pre></td></tr></table></figure>

<p>继续上面数据发送的位置，path上的正常数据发送完之后才会发送变异数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prev_node = self.nodes[mutation_context.message_path[-<span class="number">1</span>].src]</span><br><span class="line">node = self.nodes[mutation_context.message_path[-<span class="number">1</span>].dst]</span><br><span class="line">protocol_session = ProtocolSession(</span><br><span class="line">    previous_message=prev_node,</span><br><span class="line">    current_message=node,</span><br><span class="line">)</span><br><span class="line">mutation_context.protocol_session = protocol_session</span><br><span class="line"><span class="comment">#这里会调用callback，同时返回一个callback数据</span></span><br><span class="line">callback_data = self._callback_current_node(</span><br><span class="line">    node=self.fuzz_node, edge=mutation_context.message_path[-<span class="number">1</span>], test_case_context=protocol_session</span><br><span class="line">)</span><br><span class="line">self._fuzz_data_logger.open_test_step(<span class="string">&quot;Fuzzing Node &#x27;&#123;0&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(self.fuzz_node.name))</span><br><span class="line"><span class="comment">#进行实际的变异数据发送</span></span><br><span class="line">self.transmit_fuzz(</span><br><span class="line">    target,</span><br><span class="line">    self.fuzz_node,</span><br><span class="line">    mutation_context.message_path[-<span class="number">1</span>],</span><br><span class="line">    callback_data=callback_data,</span><br><span class="line">    mutation_context=mutation_context,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h3><p>boofuzz只提供了三种monitor：</p>
<p>ProcessMonitor大概是和Procman进行rpc通讯来监控；</p>
<p>NetworkMonitor具体用法不太清楚，看doc里说用了wireshark；</p>
<p>CallbackMonitor是默认的Monitor，提供回调函数的功能。</p>
<p>我们一般需要一个监控连接状态的Monitor，如果连接失败则判定为发生了crash，保存crash样本，前面代码中有我实现的简陋的方案。</p>
<h4 id="CallbackMonitor"><a href="#CallbackMonitor" class="headerlink" title="CallbackMonitor"></a>CallbackMonitor</h4><p>这个Monitor是以Monitor的形式提供几种callback，在session的init函数中,是把传进来的callback赋值给<code>CallbackMonitor</code>，这个Monitor也是会默认。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> pre_send_callbacks <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    pre_send_methods = []</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    pre_send_methods = pre_send_callbacks</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> post_test_case_callbacks <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    post_test_case_methods = []</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    post_test_case_methods = post_test_case_callbacks</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> post_start_target_callbacks <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    post_start_target_methods = []</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    post_start_target_methods = post_start_target_callbacks</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> restart_callbacks <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    restart_methods = []</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    restart_methods = restart_callbacks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">self._callback_monitor = CallbackMonitor(</span><br><span class="line">    on_pre_send=pre_send_methods,</span><br><span class="line">    on_post_send=post_test_case_methods,</span><br><span class="line">    on_restart_target=restart_methods,</span><br><span class="line">    on_post_start_target=post_start_target_methods,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> target <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">apply_options</span>(<span class="params">monitor</span>):</span></span><br><span class="line">                monitor.set_options(crash_filename=self._crash_filename)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            target.monitor_alive.append(apply_options)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.add_target(target)</span><br><span class="line">            <span class="keyword">except</span> exception.BoofuzzRpcError <span class="keyword">as</span> e:</span><br><span class="line">                self._fuzz_data_logger.log_error(<span class="built_in">str</span>(e))</span><br><span class="line">                <span class="keyword">raise</span></span><br></pre></td></tr></table></figure>

<p>前面回调函数都是用的target的monitor的回调，在session的init中首先设置了<code>_callback_monitor</code>为刚才创建的<code>CallbackMonitor</code>，其给target设置的有些隐蔽，是在<code>add_target</code>中设置的。</p>
<h5 id="add-target"><a href="#add-target" class="headerlink" title="add_target"></a>add_target</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_target</span>(<span class="params">self, target</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Add a target to the session. Multiple targets can be added for parallel fuzzing.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        target (Target): Target to add to session</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pass specified target parameters to the PED-RPC server.</span></span><br><span class="line">    target.monitors_alive()</span><br><span class="line">    target.set_fuzz_data_logger(fuzz_data_logger=self._fuzz_data_logger)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self._callback_monitor <span class="keyword">not</span> <span class="keyword">in</span> target.monitors:</span><br><span class="line">        target.monitors.append(self._callback_monitor)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add target to internal list.</span></span><br><span class="line">    self.targets.append(target)</span><br></pre></td></tr></table></figure>



<h5 id="pre-send-1"><a href="#pre-send-1" class="headerlink" title="pre_send"></a>pre_send</h5><p>以<code>CallbackMonitor</code>的<code>pre_send</code>为例，可以看到其遍历<code>on_pre_send</code>函数来调用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_send</span>(<span class="params">self, target=<span class="literal">None</span>, fuzz_data_logger=<span class="literal">None</span>, session=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;This method iterates over all supplied pre send callbacks and executes them.</span></span><br><span class="line"><span class="string">    Their return values are discarded, exceptions are catched and logged, but otherwise</span></span><br><span class="line"><span class="string">    discarded.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> self.on_pre_send:</span><br><span class="line">            fuzz_data_logger.open_test_step(<span class="string">&#x27;Pre_Send callback: &quot;&#123;0&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(f.__name__))</span><br><span class="line">            f(target=target, fuzz_data_logger=fuzz_data_logger, session=session, sock=target)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        fuzz_data_logger.log_error(</span><br><span class="line">            constants.ERR_CALLBACK_FUNC.<span class="built_in">format</span>(func_name=<span class="string">&quot;pre_send&quot;</span>) + traceback.format_exc()</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>



<h3 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h3><p><a href="https://x1aor0.github.io/2022/01/14/BoofuzzDoc/">Boofuzz分析</a></p>
<p><a href="https://boofuzz.readthedocs.io/en/stable/index.html">boofuzz 0.4.0 documentation</a></p>
<p><a href="https://paper.seebug.org/1626/">IoT设备固件分析之网络协议 fuzz (seebug.org)</a></p>
]]></content>
      <categories>
        <category>模糊测试</category>
      </categories>
      <tags>
        <tag>模糊测试</tag>
      </tags>
  </entry>
</search>
